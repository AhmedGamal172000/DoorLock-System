
MC_HMI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000361e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c8  00800060  0000361e  000036b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800128  00800128  0000377a  2**0
                  ALLOC
  3 .stab         00002e74  00000000  00000000  0000377c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011e8  00000000  00000000  000065f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000077d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007918  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000096d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a5bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b36c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b4cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b759  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bf27  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 80 0f 	jmp	0x1f00	; 0x1f00 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 4d 0f 	jmp	0x1e9a	; 0x1e9a <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e1       	ldi	r30, 0x1E	; 30
      68:	f6 e3       	ldi	r31, 0x36	; 54
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 32       	cpi	r26, 0x28	; 40
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e2       	ldi	r26, 0x28	; 40
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 33       	cpi	r26, 0x30	; 48
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9c 0a 	call	0x1538	; 0x1538 <main>
      8a:	0c 94 0d 1b 	jmp	0x361a	; 0x361a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 91 1a 	jmp	0x3522	; 0x3522 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e1       	ldi	r26, 0x16	; 22
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ad 1a 	jmp	0x355a	; 0x355a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 9d 1a 	jmp	0x353a	; 0x353a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b9 1a 	jmp	0x3572	; 0x3572 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 9d 1a 	jmp	0x353a	; 0x353a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b9 1a 	jmp	0x3572	; 0x3572 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 91 1a 	jmp	0x3522	; 0x3522 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	86 e1       	ldi	r24, 0x16	; 22
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ad 1a 	jmp	0x355a	; 0x355a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 9d 1a 	jmp	0x353a	; 0x353a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 b9 1a 	jmp	0x3572	; 0x3572 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 9d 1a 	jmp	0x353a	; 0x353a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 b9 1a 	jmp	0x3572	; 0x3572 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 9d 1a 	jmp	0x353a	; 0x353a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 b9 1a 	jmp	0x3572	; 0x3572 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 a1 1a 	jmp	0x3542	; 0x3542 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 bd 1a 	jmp	0x357a	; 0x357a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <SendToCONTROL>:
boolean check = FALSE;
uint8 OPENDOORCOUNTER = 2;


void SendToCONTROL(uint8 key)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2f 97       	sbiw	r28, 0x0f	; 15
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	8f 87       	std	Y+15, r24	; 0x0f

	UART_sendByte(key);
     b5c:	8f 85       	ldd	r24, Y+15	; 0x0f
     b5e:	0e 94 dd 19 	call	0x33ba	; 0x33ba <UART_sendByte>

	if((key <= 9) && (key >= 0))
     b62:	8f 85       	ldd	r24, Y+15	; 0x0f
     b64:	8a 30       	cpi	r24, 0x0A	; 10
     b66:	28 f4       	brcc	.+10     	; 0xb72 <SendToCONTROL+0x2c>
	{
		LCD_displayString("*"); /* display the pressed keypad switch */
     b68:	80 e6       	ldi	r24, 0x60	; 96
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	0e 94 78 18 	call	0x30f0	; 0x30f0 <LCD_displayString>
     b70:	1d c0       	rjmp	.+58     	; 0xbac <SendToCONTROL+0x66>
	}
	else if(key == 13)
     b72:	8f 85       	ldd	r24, Y+15	; 0x0f
     b74:	8d 30       	cpi	r24, 0x0D	; 13
     b76:	71 f4       	brne	.+28     	; 0xb94 <SendToCONTROL+0x4e>
	{
		LCD_clearScreen();
     b78:	0e 94 1f 19 	call	0x323e	; 0x323e <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"Enter New PW");
     b7c:	22 e6       	ldi	r18, 0x62	; 98
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	60 e0       	ldi	r22, 0x00	; 0
     b84:	a9 01       	movw	r20, r18
     b86:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <LCD_displayStringRowColumn>
		LCD_moveCursor(1,0);
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	60 e0       	ldi	r22, 0x00	; 0
     b8e:	0e 94 a1 18 	call	0x3142	; 0x3142 <LCD_moveCursor>
     b92:	0c c0       	rjmp	.+24     	; 0xbac <SendToCONTROL+0x66>
	}
	else if(key == '=' || key == '+' || key == '-')
     b94:	8f 85       	ldd	r24, Y+15	; 0x0f
     b96:	8d 33       	cpi	r24, 0x3D	; 61
     b98:	49 f0       	breq	.+18     	; 0xbac <SendToCONTROL+0x66>
     b9a:	8f 85       	ldd	r24, Y+15	; 0x0f
     b9c:	8b 32       	cpi	r24, 0x2B	; 43
     b9e:	31 f0       	breq	.+12     	; 0xbac <SendToCONTROL+0x66>
     ba0:	8f 85       	ldd	r24, Y+15	; 0x0f
     ba2:	8d 32       	cpi	r24, 0x2D	; 45
     ba4:	19 f0       	breq	.+6      	; 0xbac <SendToCONTROL+0x66>
	{

	}
	else
	{
		LCD_displayCharacter(key); /* display the pressed keypad switch */
     ba6:	8f 85       	ldd	r24, Y+15	; 0x0f
     ba8:	0e 94 84 16 	call	0x2d08	; 0x2d08 <LCD_displayCharacter>
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	90 e4       	ldi	r25, 0x40	; 64
     bb0:	ac e1       	ldi	r26, 0x1C	; 28
     bb2:	b5 e4       	ldi	r27, 0x45	; 69
     bb4:	8b 87       	std	Y+11, r24	; 0x0b
     bb6:	9c 87       	std	Y+12, r25	; 0x0c
     bb8:	ad 87       	std	Y+13, r26	; 0x0d
     bba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bbc:	6b 85       	ldd	r22, Y+11	; 0x0b
     bbe:	7c 85       	ldd	r23, Y+12	; 0x0c
     bc0:	8d 85       	ldd	r24, Y+13	; 0x0d
     bc2:	9e 85       	ldd	r25, Y+14	; 0x0e
     bc4:	20 e0       	ldi	r18, 0x00	; 0
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	4a e7       	ldi	r20, 0x7A	; 122
     bca:	53 e4       	ldi	r21, 0x43	; 67
     bcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bd0:	dc 01       	movw	r26, r24
     bd2:	cb 01       	movw	r24, r22
     bd4:	8f 83       	std	Y+7, r24	; 0x07
     bd6:	98 87       	std	Y+8, r25	; 0x08
     bd8:	a9 87       	std	Y+9, r26	; 0x09
     bda:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bdc:	6f 81       	ldd	r22, Y+7	; 0x07
     bde:	78 85       	ldd	r23, Y+8	; 0x08
     be0:	89 85       	ldd	r24, Y+9	; 0x09
     be2:	9a 85       	ldd	r25, Y+10	; 0x0a
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	40 e8       	ldi	r20, 0x80	; 128
     bea:	5f e3       	ldi	r21, 0x3F	; 63
     bec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bf0:	88 23       	and	r24, r24
     bf2:	2c f4       	brge	.+10     	; 0xbfe <SendToCONTROL+0xb8>
		__ticks = 1;
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	9e 83       	std	Y+6, r25	; 0x06
     bfa:	8d 83       	std	Y+5, r24	; 0x05
     bfc:	3f c0       	rjmp	.+126    	; 0xc7c <SendToCONTROL+0x136>
	else if (__tmp > 65535)
     bfe:	6f 81       	ldd	r22, Y+7	; 0x07
     c00:	78 85       	ldd	r23, Y+8	; 0x08
     c02:	89 85       	ldd	r24, Y+9	; 0x09
     c04:	9a 85       	ldd	r25, Y+10	; 0x0a
     c06:	20 e0       	ldi	r18, 0x00	; 0
     c08:	3f ef       	ldi	r19, 0xFF	; 255
     c0a:	4f e7       	ldi	r20, 0x7F	; 127
     c0c:	57 e4       	ldi	r21, 0x47	; 71
     c0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c12:	18 16       	cp	r1, r24
     c14:	4c f5       	brge	.+82     	; 0xc68 <SendToCONTROL+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c16:	6b 85       	ldd	r22, Y+11	; 0x0b
     c18:	7c 85       	ldd	r23, Y+12	; 0x0c
     c1a:	8d 85       	ldd	r24, Y+13	; 0x0d
     c1c:	9e 85       	ldd	r25, Y+14	; 0x0e
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	40 e2       	ldi	r20, 0x20	; 32
     c24:	51 e4       	ldi	r21, 0x41	; 65
     c26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c2a:	dc 01       	movw	r26, r24
     c2c:	cb 01       	movw	r24, r22
     c2e:	bc 01       	movw	r22, r24
     c30:	cd 01       	movw	r24, r26
     c32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c36:	dc 01       	movw	r26, r24
     c38:	cb 01       	movw	r24, r22
     c3a:	9e 83       	std	Y+6, r25	; 0x06
     c3c:	8d 83       	std	Y+5, r24	; 0x05
     c3e:	0f c0       	rjmp	.+30     	; 0xc5e <SendToCONTROL+0x118>
     c40:	89 e1       	ldi	r24, 0x19	; 25
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	9c 83       	std	Y+4, r25	; 0x04
     c46:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c48:	8b 81       	ldd	r24, Y+3	; 0x03
     c4a:	9c 81       	ldd	r25, Y+4	; 0x04
     c4c:	01 97       	sbiw	r24, 0x01	; 1
     c4e:	f1 f7       	brne	.-4      	; 0xc4c <SendToCONTROL+0x106>
     c50:	9c 83       	std	Y+4, r25	; 0x04
     c52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c54:	8d 81       	ldd	r24, Y+5	; 0x05
     c56:	9e 81       	ldd	r25, Y+6	; 0x06
     c58:	01 97       	sbiw	r24, 0x01	; 1
     c5a:	9e 83       	std	Y+6, r25	; 0x06
     c5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c5e:	8d 81       	ldd	r24, Y+5	; 0x05
     c60:	9e 81       	ldd	r25, Y+6	; 0x06
     c62:	00 97       	sbiw	r24, 0x00	; 0
     c64:	69 f7       	brne	.-38     	; 0xc40 <SendToCONTROL+0xfa>
     c66:	14 c0       	rjmp	.+40     	; 0xc90 <SendToCONTROL+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c68:	6f 81       	ldd	r22, Y+7	; 0x07
     c6a:	78 85       	ldd	r23, Y+8	; 0x08
     c6c:	89 85       	ldd	r24, Y+9	; 0x09
     c6e:	9a 85       	ldd	r25, Y+10	; 0x0a
     c70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c74:	dc 01       	movw	r26, r24
     c76:	cb 01       	movw	r24, r22
     c78:	9e 83       	std	Y+6, r25	; 0x06
     c7a:	8d 83       	std	Y+5, r24	; 0x05
     c7c:	8d 81       	ldd	r24, Y+5	; 0x05
     c7e:	9e 81       	ldd	r25, Y+6	; 0x06
     c80:	9a 83       	std	Y+2, r25	; 0x02
     c82:	89 83       	std	Y+1, r24	; 0x01
     c84:	89 81       	ldd	r24, Y+1	; 0x01
     c86:	9a 81       	ldd	r25, Y+2	; 0x02
     c88:	01 97       	sbiw	r24, 0x01	; 1
     c8a:	f1 f7       	brne	.-4      	; 0xc88 <SendToCONTROL+0x142>
     c8c:	9a 83       	std	Y+2, r25	; 0x02
     c8e:	89 83       	std	Y+1, r24	; 0x01
	}
	_delay_ms(2500);
}
     c90:	2f 96       	adiw	r28, 0x0f	; 15
     c92:	0f b6       	in	r0, 0x3f	; 63
     c94:	f8 94       	cli
     c96:	de bf       	out	0x3e, r29	; 62
     c98:	0f be       	out	0x3f, r0	; 63
     c9a:	cd bf       	out	0x3d, r28	; 61
     c9c:	cf 91       	pop	r28
     c9e:	df 91       	pop	r29
     ca0:	08 95       	ret

00000ca2 <ScreenChecker>:
void ScreenChecker()
{
     ca2:	df 93       	push	r29
     ca4:	cf 93       	push	r28
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
	if(STATE ==1)
     caa:	80 91 1e 01 	lds	r24, 0x011E
     cae:	81 30       	cpi	r24, 0x01	; 1
     cb0:	59 f4       	brne	.+22     	; 0xcc8 <ScreenChecker+0x26>
	{
		LCD_clearScreen();
     cb2:	0e 94 1f 19 	call	0x323e	; 0x323e <LCD_clearScreen>
		LCD_displayString("Enter NEW PW");
     cb6:	8f e6       	ldi	r24, 0x6F	; 111
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	0e 94 78 18 	call	0x30f0	; 0x30f0 <LCD_displayString>
		LCD_moveCursor(1, 0);
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	60 e0       	ldi	r22, 0x00	; 0
     cc2:	0e 94 a1 18 	call	0x3142	; 0x3142 <LCD_moveCursor>
     cc6:	3f c0       	rjmp	.+126    	; 0xd46 <ScreenChecker+0xa4>

	}
	else if(STATE == 2)
     cc8:	80 91 1e 01 	lds	r24, 0x011E
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	59 f4       	brne	.+22     	; 0xce6 <ScreenChecker+0x44>
	{
		LCD_clearScreen();
     cd0:	0e 94 1f 19 	call	0x323e	; 0x323e <LCD_clearScreen>
		LCD_displayString("Re-Enter NEW PW");
     cd4:	8c e7       	ldi	r24, 0x7C	; 124
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	0e 94 78 18 	call	0x30f0	; 0x30f0 <LCD_displayString>
		LCD_moveCursor(1, 0);
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	60 e0       	ldi	r22, 0x00	; 0
     ce0:	0e 94 a1 18 	call	0x3142	; 0x3142 <LCD_moveCursor>
     ce4:	30 c0       	rjmp	.+96     	; 0xd46 <ScreenChecker+0xa4>

	}
	else if(STATE == 3)
     ce6:	80 91 1e 01 	lds	r24, 0x011E
     cea:	83 30       	cpi	r24, 0x03	; 3
     cec:	79 f4       	brne	.+30     	; 0xd0c <ScreenChecker+0x6a>
	{
		LCD_clearScreen();
     cee:	0e 94 1f 19 	call	0x323e	; 0x323e <LCD_clearScreen>
		LCD_displayString("+ : Open Door");
     cf2:	8c e8       	ldi	r24, 0x8C	; 140
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	0e 94 78 18 	call	0x30f0	; 0x30f0 <LCD_displayString>
		LCD_moveCursor(1, 0);
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	60 e0       	ldi	r22, 0x00	; 0
     cfe:	0e 94 a1 18 	call	0x3142	; 0x3142 <LCD_moveCursor>
		LCD_displayString("- : Change Password");
     d02:	8a e9       	ldi	r24, 0x9A	; 154
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	0e 94 78 18 	call	0x30f0	; 0x30f0 <LCD_displayString>
     d0a:	1d c0       	rjmp	.+58     	; 0xd46 <ScreenChecker+0xa4>
	}
	else if(STATE == 4) //Open door
     d0c:	80 91 1e 01 	lds	r24, 0x011E
     d10:	84 30       	cpi	r24, 0x04	; 4
     d12:	59 f4       	brne	.+22     	; 0xd2a <ScreenChecker+0x88>
	{
		LCD_clearScreen();
     d14:	0e 94 1f 19 	call	0x323e	; 0x323e <LCD_clearScreen>
		LCD_displayString("Enter Your PW");
     d18:	8e ea       	ldi	r24, 0xAE	; 174
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	0e 94 78 18 	call	0x30f0	; 0x30f0 <LCD_displayString>
		LCD_moveCursor(1, 0);
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	60 e0       	ldi	r22, 0x00	; 0
     d24:	0e 94 a1 18 	call	0x3142	; 0x3142 <LCD_moveCursor>
     d28:	0e c0       	rjmp	.+28     	; 0xd46 <ScreenChecker+0xa4>
	}
	else if(STATE == 5) // Change Password
     d2a:	80 91 1e 01 	lds	r24, 0x011E
     d2e:	85 30       	cpi	r24, 0x05	; 5
     d30:	51 f4       	brne	.+20     	; 0xd46 <ScreenChecker+0xa4>
	{
		LCD_clearScreen();
     d32:	0e 94 1f 19 	call	0x323e	; 0x323e <LCD_clearScreen>
		LCD_displayString("Enter YOUR PW");
     d36:	8c eb       	ldi	r24, 0xBC	; 188
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	0e 94 78 18 	call	0x30f0	; 0x30f0 <LCD_displayString>
		LCD_moveCursor(1, 0);
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	60 e0       	ldi	r22, 0x00	; 0
     d42:	0e 94 a1 18 	call	0x3142	; 0x3142 <LCD_moveCursor>
	}
	check = FALSE;
     d46:	10 92 28 01 	sts	0x0128, r1
}
     d4a:	cf 91       	pop	r28
     d4c:	df 91       	pop	r29
     d4e:	08 95       	ret

00000d50 <CheckCases>:
void CheckCases(boolean check)
{
     d50:	0f 93       	push	r16
     d52:	1f 93       	push	r17
     d54:	df 93       	push	r29
     d56:	cf 93       	push	r28
     d58:	cd b7       	in	r28, 0x3d	; 61
     d5a:	de b7       	in	r29, 0x3e	; 62
     d5c:	c7 55       	subi	r28, 0x57	; 87
     d5e:	d0 40       	sbci	r29, 0x00	; 0
     d60:	0f b6       	in	r0, 0x3f	; 63
     d62:	f8 94       	cli
     d64:	de bf       	out	0x3e, r29	; 62
     d66:	0f be       	out	0x3f, r0	; 63
     d68:	cd bf       	out	0x3d, r28	; 61
     d6a:	fe 01       	movw	r30, r28
     d6c:	eb 5a       	subi	r30, 0xAB	; 171
     d6e:	ff 4f       	sbci	r31, 0xFF	; 255
     d70:	80 83       	st	Z, r24
	switch(STATE)
     d72:	80 91 1e 01 	lds	r24, 0x011E
     d76:	28 2f       	mov	r18, r24
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	68 96       	adiw	r28, 0x18	; 24
     d7c:	3f af       	std	Y+63, r19	; 0x3f
     d7e:	2e af       	std	Y+62, r18	; 0x3e
     d80:	68 97       	sbiw	r28, 0x18	; 24
     d82:	68 96       	adiw	r28, 0x18	; 24
     d84:	8e ad       	ldd	r24, Y+62	; 0x3e
     d86:	9f ad       	ldd	r25, Y+63	; 0x3f
     d88:	68 97       	sbiw	r28, 0x18	; 24
     d8a:	83 30       	cpi	r24, 0x03	; 3
     d8c:	91 05       	cpc	r25, r1
     d8e:	09 f4       	brne	.+2      	; 0xd92 <CheckCases+0x42>
     d90:	93 c1       	rjmp	.+806    	; 0x10b8 <CheckCases+0x368>
     d92:	68 96       	adiw	r28, 0x18	; 24
     d94:	ee ad       	ldd	r30, Y+62	; 0x3e
     d96:	ff ad       	ldd	r31, Y+63	; 0x3f
     d98:	68 97       	sbiw	r28, 0x18	; 24
     d9a:	e4 30       	cpi	r30, 0x04	; 4
     d9c:	f1 05       	cpc	r31, r1
     d9e:	7c f4       	brge	.+30     	; 0xdbe <CheckCases+0x6e>
     da0:	68 96       	adiw	r28, 0x18	; 24
     da2:	2e ad       	ldd	r18, Y+62	; 0x3e
     da4:	3f ad       	ldd	r19, Y+63	; 0x3f
     da6:	68 97       	sbiw	r28, 0x18	; 24
     da8:	21 30       	cpi	r18, 0x01	; 1
     daa:	31 05       	cpc	r19, r1
     dac:	c9 f0       	breq	.+50     	; 0xde0 <CheckCases+0x90>
     dae:	68 96       	adiw	r28, 0x18	; 24
     db0:	8e ad       	ldd	r24, Y+62	; 0x3e
     db2:	9f ad       	ldd	r25, Y+63	; 0x3f
     db4:	68 97       	sbiw	r28, 0x18	; 24
     db6:	82 30       	cpi	r24, 0x02	; 2
     db8:	91 05       	cpc	r25, r1
     dba:	01 f1       	breq	.+64     	; 0xdfc <CheckCases+0xac>
     dbc:	b1 c3       	rjmp	.+1890   	; 0x1520 <CheckCases+0x7d0>
     dbe:	68 96       	adiw	r28, 0x18	; 24
     dc0:	ee ad       	ldd	r30, Y+62	; 0x3e
     dc2:	ff ad       	ldd	r31, Y+63	; 0x3f
     dc4:	68 97       	sbiw	r28, 0x18	; 24
     dc6:	e4 30       	cpi	r30, 0x04	; 4
     dc8:	f1 05       	cpc	r31, r1
     dca:	09 f4       	brne	.+2      	; 0xdce <CheckCases+0x7e>
     dcc:	83 c1       	rjmp	.+774    	; 0x10d4 <CheckCases+0x384>
     dce:	68 96       	adiw	r28, 0x18	; 24
     dd0:	2e ad       	ldd	r18, Y+62	; 0x3e
     dd2:	3f ad       	ldd	r19, Y+63	; 0x3f
     dd4:	68 97       	sbiw	r28, 0x18	; 24
     dd6:	25 30       	cpi	r18, 0x05	; 5
     dd8:	31 05       	cpc	r19, r1
     dda:	09 f4       	brne	.+2      	; 0xdde <CheckCases+0x8e>
     ddc:	99 c2       	rjmp	.+1330   	; 0x1310 <CheckCases+0x5c0>
     dde:	a0 c3       	rjmp	.+1856   	; 0x1520 <CheckCases+0x7d0>
	{
	case 1:
		if(check == TRUE) // to know which state we are in
     de0:	fe 01       	movw	r30, r28
     de2:	eb 5a       	subi	r30, 0xAB	; 171
     de4:	ff 4f       	sbci	r31, 0xFF	; 255
     de6:	80 81       	ld	r24, Z
     de8:	81 30       	cpi	r24, 0x01	; 1
     dea:	09 f0       	breq	.+2      	; 0xdee <CheckCases+0x9e>
     dec:	99 c3       	rjmp	.+1842   	; 0x1520 <CheckCases+0x7d0>
		{
			STATE = UART_recieveByte();//current STATE FROM MC2
     dee:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <UART_recieveByte>
     df2:	80 93 1e 01 	sts	0x011E, r24
			ScreenChecker();//
     df6:	0e 94 51 06 	call	0xca2	; 0xca2 <ScreenChecker>
     dfa:	92 c3       	rjmp	.+1828   	; 0x1520 <CheckCases+0x7d0>
		}
		break;
	case 2:
		if(check == TRUE) // to know which state we are in
     dfc:	fe 01       	movw	r30, r28
     dfe:	eb 5a       	subi	r30, 0xAB	; 171
     e00:	ff 4f       	sbci	r31, 0xFF	; 255
     e02:	80 81       	ld	r24, Z
     e04:	81 30       	cpi	r24, 0x01	; 1
     e06:	09 f0       	breq	.+2      	; 0xe0a <CheckCases+0xba>
     e08:	8b c3       	rjmp	.+1814   	; 0x1520 <CheckCases+0x7d0>
		{
			STATE = UART_recieveByte();
     e0a:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <UART_recieveByte>
     e0e:	80 93 1e 01 	sts	0x011E, r24
			if(STATE == 1)
     e12:	80 91 1e 01 	lds	r24, 0x011E
     e16:	81 30       	cpi	r24, 0x01	; 1
     e18:	09 f0       	breq	.+2      	; 0xe1c <CheckCases+0xcc>
     e1a:	bb c0       	rjmp	.+374    	; 0xf92 <CheckCases+0x242>
			{
				LCD_clearScreen();
     e1c:	0e 94 1f 19 	call	0x323e	; 0x323e <LCD_clearScreen>
				LCD_displayString("WRONG PASSWORD");
     e20:	8a ec       	ldi	r24, 0xCA	; 202
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	0e 94 78 18 	call	0x30f0	; 0x30f0 <LCD_displayString>
     e28:	fe 01       	movw	r30, r28
     e2a:	ef 5a       	subi	r30, 0xAF	; 175
     e2c:	ff 4f       	sbci	r31, 0xFF	; 255
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	90 e4       	ldi	r25, 0x40	; 64
     e32:	ac e9       	ldi	r26, 0x9C	; 156
     e34:	b5 e4       	ldi	r27, 0x45	; 69
     e36:	80 83       	st	Z, r24
     e38:	91 83       	std	Z+1, r25	; 0x01
     e3a:	a2 83       	std	Z+2, r26	; 0x02
     e3c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e3e:	8e 01       	movw	r16, r28
     e40:	03 5b       	subi	r16, 0xB3	; 179
     e42:	1f 4f       	sbci	r17, 0xFF	; 255
     e44:	fe 01       	movw	r30, r28
     e46:	ef 5a       	subi	r30, 0xAF	; 175
     e48:	ff 4f       	sbci	r31, 0xFF	; 255
     e4a:	60 81       	ld	r22, Z
     e4c:	71 81       	ldd	r23, Z+1	; 0x01
     e4e:	82 81       	ldd	r24, Z+2	; 0x02
     e50:	93 81       	ldd	r25, Z+3	; 0x03
     e52:	20 e0       	ldi	r18, 0x00	; 0
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	4a e7       	ldi	r20, 0x7A	; 122
     e58:	53 e4       	ldi	r21, 0x43	; 67
     e5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e5e:	dc 01       	movw	r26, r24
     e60:	cb 01       	movw	r24, r22
     e62:	f8 01       	movw	r30, r16
     e64:	80 83       	st	Z, r24
     e66:	91 83       	std	Z+1, r25	; 0x01
     e68:	a2 83       	std	Z+2, r26	; 0x02
     e6a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e6c:	fe 01       	movw	r30, r28
     e6e:	e3 5b       	subi	r30, 0xB3	; 179
     e70:	ff 4f       	sbci	r31, 0xFF	; 255
     e72:	60 81       	ld	r22, Z
     e74:	71 81       	ldd	r23, Z+1	; 0x01
     e76:	82 81       	ldd	r24, Z+2	; 0x02
     e78:	93 81       	ldd	r25, Z+3	; 0x03
     e7a:	20 e0       	ldi	r18, 0x00	; 0
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	40 e8       	ldi	r20, 0x80	; 128
     e80:	5f e3       	ldi	r21, 0x3F	; 63
     e82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e86:	88 23       	and	r24, r24
     e88:	44 f4       	brge	.+16     	; 0xe9a <CheckCases+0x14a>
		__ticks = 1;
     e8a:	fe 01       	movw	r30, r28
     e8c:	e5 5b       	subi	r30, 0xB5	; 181
     e8e:	ff 4f       	sbci	r31, 0xFF	; 255
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	91 83       	std	Z+1, r25	; 0x01
     e96:	80 83       	st	Z, r24
     e98:	64 c0       	rjmp	.+200    	; 0xf62 <CheckCases+0x212>
	else if (__tmp > 65535)
     e9a:	fe 01       	movw	r30, r28
     e9c:	e3 5b       	subi	r30, 0xB3	; 179
     e9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ea0:	60 81       	ld	r22, Z
     ea2:	71 81       	ldd	r23, Z+1	; 0x01
     ea4:	82 81       	ldd	r24, Z+2	; 0x02
     ea6:	93 81       	ldd	r25, Z+3	; 0x03
     ea8:	20 e0       	ldi	r18, 0x00	; 0
     eaa:	3f ef       	ldi	r19, 0xFF	; 255
     eac:	4f e7       	ldi	r20, 0x7F	; 127
     eae:	57 e4       	ldi	r21, 0x47	; 71
     eb0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     eb4:	18 16       	cp	r1, r24
     eb6:	0c f0       	brlt	.+2      	; 0xeba <CheckCases+0x16a>
     eb8:	43 c0       	rjmp	.+134    	; 0xf40 <CheckCases+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eba:	fe 01       	movw	r30, r28
     ebc:	ef 5a       	subi	r30, 0xAF	; 175
     ebe:	ff 4f       	sbci	r31, 0xFF	; 255
     ec0:	60 81       	ld	r22, Z
     ec2:	71 81       	ldd	r23, Z+1	; 0x01
     ec4:	82 81       	ldd	r24, Z+2	; 0x02
     ec6:	93 81       	ldd	r25, Z+3	; 0x03
     ec8:	20 e0       	ldi	r18, 0x00	; 0
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	40 e2       	ldi	r20, 0x20	; 32
     ece:	51 e4       	ldi	r21, 0x41	; 65
     ed0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ed4:	dc 01       	movw	r26, r24
     ed6:	cb 01       	movw	r24, r22
     ed8:	8e 01       	movw	r16, r28
     eda:	05 5b       	subi	r16, 0xB5	; 181
     edc:	1f 4f       	sbci	r17, 0xFF	; 255
     ede:	bc 01       	movw	r22, r24
     ee0:	cd 01       	movw	r24, r26
     ee2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ee6:	dc 01       	movw	r26, r24
     ee8:	cb 01       	movw	r24, r22
     eea:	f8 01       	movw	r30, r16
     eec:	91 83       	std	Z+1, r25	; 0x01
     eee:	80 83       	st	Z, r24
     ef0:	1f c0       	rjmp	.+62     	; 0xf30 <CheckCases+0x1e0>
     ef2:	fe 01       	movw	r30, r28
     ef4:	e7 5b       	subi	r30, 0xB7	; 183
     ef6:	ff 4f       	sbci	r31, 0xFF	; 255
     ef8:	89 e1       	ldi	r24, 0x19	; 25
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	91 83       	std	Z+1, r25	; 0x01
     efe:	80 83       	st	Z, r24
     f00:	fe 01       	movw	r30, r28
     f02:	e7 5b       	subi	r30, 0xB7	; 183
     f04:	ff 4f       	sbci	r31, 0xFF	; 255
     f06:	80 81       	ld	r24, Z
     f08:	91 81       	ldd	r25, Z+1	; 0x01
     f0a:	01 97       	sbiw	r24, 0x01	; 1
     f0c:	f1 f7       	brne	.-4      	; 0xf0a <CheckCases+0x1ba>
     f0e:	fe 01       	movw	r30, r28
     f10:	e7 5b       	subi	r30, 0xB7	; 183
     f12:	ff 4f       	sbci	r31, 0xFF	; 255
     f14:	91 83       	std	Z+1, r25	; 0x01
     f16:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f18:	de 01       	movw	r26, r28
     f1a:	a5 5b       	subi	r26, 0xB5	; 181
     f1c:	bf 4f       	sbci	r27, 0xFF	; 255
     f1e:	fe 01       	movw	r30, r28
     f20:	e5 5b       	subi	r30, 0xB5	; 181
     f22:	ff 4f       	sbci	r31, 0xFF	; 255
     f24:	80 81       	ld	r24, Z
     f26:	91 81       	ldd	r25, Z+1	; 0x01
     f28:	01 97       	sbiw	r24, 0x01	; 1
     f2a:	11 96       	adiw	r26, 0x01	; 1
     f2c:	9c 93       	st	X, r25
     f2e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f30:	fe 01       	movw	r30, r28
     f32:	e5 5b       	subi	r30, 0xB5	; 181
     f34:	ff 4f       	sbci	r31, 0xFF	; 255
     f36:	80 81       	ld	r24, Z
     f38:	91 81       	ldd	r25, Z+1	; 0x01
     f3a:	00 97       	sbiw	r24, 0x00	; 0
     f3c:	d1 f6       	brne	.-76     	; 0xef2 <CheckCases+0x1a2>
     f3e:	b9 c0       	rjmp	.+370    	; 0x10b2 <CheckCases+0x362>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f40:	8e 01       	movw	r16, r28
     f42:	05 5b       	subi	r16, 0xB5	; 181
     f44:	1f 4f       	sbci	r17, 0xFF	; 255
     f46:	fe 01       	movw	r30, r28
     f48:	e3 5b       	subi	r30, 0xB3	; 179
     f4a:	ff 4f       	sbci	r31, 0xFF	; 255
     f4c:	60 81       	ld	r22, Z
     f4e:	71 81       	ldd	r23, Z+1	; 0x01
     f50:	82 81       	ldd	r24, Z+2	; 0x02
     f52:	93 81       	ldd	r25, Z+3	; 0x03
     f54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f58:	dc 01       	movw	r26, r24
     f5a:	cb 01       	movw	r24, r22
     f5c:	f8 01       	movw	r30, r16
     f5e:	91 83       	std	Z+1, r25	; 0x01
     f60:	80 83       	st	Z, r24
     f62:	de 01       	movw	r26, r28
     f64:	a9 5b       	subi	r26, 0xB9	; 185
     f66:	bf 4f       	sbci	r27, 0xFF	; 255
     f68:	fe 01       	movw	r30, r28
     f6a:	e5 5b       	subi	r30, 0xB5	; 181
     f6c:	ff 4f       	sbci	r31, 0xFF	; 255
     f6e:	80 81       	ld	r24, Z
     f70:	91 81       	ldd	r25, Z+1	; 0x01
     f72:	11 96       	adiw	r26, 0x01	; 1
     f74:	9c 93       	st	X, r25
     f76:	8e 93       	st	-X, r24
     f78:	fe 01       	movw	r30, r28
     f7a:	e9 5b       	subi	r30, 0xB9	; 185
     f7c:	ff 4f       	sbci	r31, 0xFF	; 255
     f7e:	80 81       	ld	r24, Z
     f80:	91 81       	ldd	r25, Z+1	; 0x01
     f82:	01 97       	sbiw	r24, 0x01	; 1
     f84:	f1 f7       	brne	.-4      	; 0xf82 <CheckCases+0x232>
     f86:	fe 01       	movw	r30, r28
     f88:	e9 5b       	subi	r30, 0xB9	; 185
     f8a:	ff 4f       	sbci	r31, 0xFF	; 255
     f8c:	91 83       	std	Z+1, r25	; 0x01
     f8e:	80 83       	st	Z, r24
     f90:	90 c0       	rjmp	.+288    	; 0x10b2 <CheckCases+0x362>
				_delay_ms(5000);
			}
			else if(STATE == 3)
     f92:	80 91 1e 01 	lds	r24, 0x011E
     f96:	83 30       	cpi	r24, 0x03	; 3
     f98:	09 f0       	breq	.+2      	; 0xf9c <CheckCases+0x24c>
     f9a:	8b c0       	rjmp	.+278    	; 0x10b2 <CheckCases+0x362>
			{
				LCD_clearScreen();
     f9c:	0e 94 1f 19 	call	0x323e	; 0x323e <LCD_clearScreen>
				LCD_displayString("ACCEPTED PASSWORD");
     fa0:	89 ed       	ldi	r24, 0xD9	; 217
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	0e 94 78 18 	call	0x30f0	; 0x30f0 <LCD_displayString>
     fa8:	fe 01       	movw	r30, r28
     faa:	ed 5b       	subi	r30, 0xBD	; 189
     fac:	ff 4f       	sbci	r31, 0xFF	; 255
     fae:	80 e0       	ldi	r24, 0x00	; 0
     fb0:	90 e4       	ldi	r25, 0x40	; 64
     fb2:	ac e9       	ldi	r26, 0x9C	; 156
     fb4:	b5 e4       	ldi	r27, 0x45	; 69
     fb6:	80 83       	st	Z, r24
     fb8:	91 83       	std	Z+1, r25	; 0x01
     fba:	a2 83       	std	Z+2, r26	; 0x02
     fbc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fbe:	8e 01       	movw	r16, r28
     fc0:	01 5c       	subi	r16, 0xC1	; 193
     fc2:	1f 4f       	sbci	r17, 0xFF	; 255
     fc4:	fe 01       	movw	r30, r28
     fc6:	ed 5b       	subi	r30, 0xBD	; 189
     fc8:	ff 4f       	sbci	r31, 0xFF	; 255
     fca:	60 81       	ld	r22, Z
     fcc:	71 81       	ldd	r23, Z+1	; 0x01
     fce:	82 81       	ldd	r24, Z+2	; 0x02
     fd0:	93 81       	ldd	r25, Z+3	; 0x03
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	4a e7       	ldi	r20, 0x7A	; 122
     fd8:	53 e4       	ldi	r21, 0x43	; 67
     fda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fde:	dc 01       	movw	r26, r24
     fe0:	cb 01       	movw	r24, r22
     fe2:	f8 01       	movw	r30, r16
     fe4:	80 83       	st	Z, r24
     fe6:	91 83       	std	Z+1, r25	; 0x01
     fe8:	a2 83       	std	Z+2, r26	; 0x02
     fea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     fec:	fe 01       	movw	r30, r28
     fee:	ff 96       	adiw	r30, 0x3f	; 63
     ff0:	60 81       	ld	r22, Z
     ff2:	71 81       	ldd	r23, Z+1	; 0x01
     ff4:	82 81       	ldd	r24, Z+2	; 0x02
     ff6:	93 81       	ldd	r25, Z+3	; 0x03
     ff8:	20 e0       	ldi	r18, 0x00	; 0
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	40 e8       	ldi	r20, 0x80	; 128
     ffe:	5f e3       	ldi	r21, 0x3F	; 63
    1000:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1004:	88 23       	and	r24, r24
    1006:	2c f4       	brge	.+10     	; 0x1012 <CheckCases+0x2c2>
		__ticks = 1;
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	9e af       	std	Y+62, r25	; 0x3e
    100e:	8d af       	std	Y+61, r24	; 0x3d
    1010:	46 c0       	rjmp	.+140    	; 0x109e <CheckCases+0x34e>
	else if (__tmp > 65535)
    1012:	fe 01       	movw	r30, r28
    1014:	ff 96       	adiw	r30, 0x3f	; 63
    1016:	60 81       	ld	r22, Z
    1018:	71 81       	ldd	r23, Z+1	; 0x01
    101a:	82 81       	ldd	r24, Z+2	; 0x02
    101c:	93 81       	ldd	r25, Z+3	; 0x03
    101e:	20 e0       	ldi	r18, 0x00	; 0
    1020:	3f ef       	ldi	r19, 0xFF	; 255
    1022:	4f e7       	ldi	r20, 0x7F	; 127
    1024:	57 e4       	ldi	r21, 0x47	; 71
    1026:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    102a:	18 16       	cp	r1, r24
    102c:	64 f5       	brge	.+88     	; 0x1086 <CheckCases+0x336>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    102e:	fe 01       	movw	r30, r28
    1030:	ed 5b       	subi	r30, 0xBD	; 189
    1032:	ff 4f       	sbci	r31, 0xFF	; 255
    1034:	60 81       	ld	r22, Z
    1036:	71 81       	ldd	r23, Z+1	; 0x01
    1038:	82 81       	ldd	r24, Z+2	; 0x02
    103a:	93 81       	ldd	r25, Z+3	; 0x03
    103c:	20 e0       	ldi	r18, 0x00	; 0
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	40 e2       	ldi	r20, 0x20	; 32
    1042:	51 e4       	ldi	r21, 0x41	; 65
    1044:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1048:	dc 01       	movw	r26, r24
    104a:	cb 01       	movw	r24, r22
    104c:	bc 01       	movw	r22, r24
    104e:	cd 01       	movw	r24, r26
    1050:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1054:	dc 01       	movw	r26, r24
    1056:	cb 01       	movw	r24, r22
    1058:	9e af       	std	Y+62, r25	; 0x3e
    105a:	8d af       	std	Y+61, r24	; 0x3d
    105c:	0f c0       	rjmp	.+30     	; 0x107c <CheckCases+0x32c>
    105e:	89 e1       	ldi	r24, 0x19	; 25
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	9c af       	std	Y+60, r25	; 0x3c
    1064:	8b af       	std	Y+59, r24	; 0x3b
    1066:	8b ad       	ldd	r24, Y+59	; 0x3b
    1068:	9c ad       	ldd	r25, Y+60	; 0x3c
    106a:	01 97       	sbiw	r24, 0x01	; 1
    106c:	f1 f7       	brne	.-4      	; 0x106a <CheckCases+0x31a>
    106e:	9c af       	std	Y+60, r25	; 0x3c
    1070:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1072:	8d ad       	ldd	r24, Y+61	; 0x3d
    1074:	9e ad       	ldd	r25, Y+62	; 0x3e
    1076:	01 97       	sbiw	r24, 0x01	; 1
    1078:	9e af       	std	Y+62, r25	; 0x3e
    107a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    107c:	8d ad       	ldd	r24, Y+61	; 0x3d
    107e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1080:	00 97       	sbiw	r24, 0x00	; 0
    1082:	69 f7       	brne	.-38     	; 0x105e <CheckCases+0x30e>
    1084:	16 c0       	rjmp	.+44     	; 0x10b2 <CheckCases+0x362>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1086:	fe 01       	movw	r30, r28
    1088:	ff 96       	adiw	r30, 0x3f	; 63
    108a:	60 81       	ld	r22, Z
    108c:	71 81       	ldd	r23, Z+1	; 0x01
    108e:	82 81       	ldd	r24, Z+2	; 0x02
    1090:	93 81       	ldd	r25, Z+3	; 0x03
    1092:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1096:	dc 01       	movw	r26, r24
    1098:	cb 01       	movw	r24, r22
    109a:	9e af       	std	Y+62, r25	; 0x3e
    109c:	8d af       	std	Y+61, r24	; 0x3d
    109e:	8d ad       	ldd	r24, Y+61	; 0x3d
    10a0:	9e ad       	ldd	r25, Y+62	; 0x3e
    10a2:	9a af       	std	Y+58, r25	; 0x3a
    10a4:	89 af       	std	Y+57, r24	; 0x39
    10a6:	89 ad       	ldd	r24, Y+57	; 0x39
    10a8:	9a ad       	ldd	r25, Y+58	; 0x3a
    10aa:	01 97       	sbiw	r24, 0x01	; 1
    10ac:	f1 f7       	brne	.-4      	; 0x10aa <CheckCases+0x35a>
    10ae:	9a af       	std	Y+58, r25	; 0x3a
    10b0:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(5000);
			}
			ScreenChecker();
    10b2:	0e 94 51 06 	call	0xca2	; 0xca2 <ScreenChecker>
    10b6:	34 c2       	rjmp	.+1128   	; 0x1520 <CheckCases+0x7d0>
		}
		break;
	case 3:
		if(check == TRUE) // to know which state we are in
    10b8:	fe 01       	movw	r30, r28
    10ba:	eb 5a       	subi	r30, 0xAB	; 171
    10bc:	ff 4f       	sbci	r31, 0xFF	; 255
    10be:	80 81       	ld	r24, Z
    10c0:	81 30       	cpi	r24, 0x01	; 1
    10c2:	09 f0       	breq	.+2      	; 0x10c6 <CheckCases+0x376>
    10c4:	2d c2       	rjmp	.+1114   	; 0x1520 <CheckCases+0x7d0>
		{
			STATE = UART_recieveByte();
    10c6:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <UART_recieveByte>
    10ca:	80 93 1e 01 	sts	0x011E, r24
			ScreenChecker();
    10ce:	0e 94 51 06 	call	0xca2	; 0xca2 <ScreenChecker>
    10d2:	26 c2       	rjmp	.+1100   	; 0x1520 <CheckCases+0x7d0>
		}
		break;
	case 4: //OPEN door
		if(check == TRUE) // to know which state we are in
    10d4:	fe 01       	movw	r30, r28
    10d6:	eb 5a       	subi	r30, 0xAB	; 171
    10d8:	ff 4f       	sbci	r31, 0xFF	; 255
    10da:	80 81       	ld	r24, Z
    10dc:	81 30       	cpi	r24, 0x01	; 1
    10de:	09 f0       	breq	.+2      	; 0x10e2 <CheckCases+0x392>
    10e0:	1f c2       	rjmp	.+1086   	; 0x1520 <CheckCases+0x7d0>
		{
			STATE = UART_recieveByte();
    10e2:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <UART_recieveByte>
    10e6:	80 93 1e 01 	sts	0x011E, r24
			if(STATE == 3)
    10ea:	80 91 1e 01 	lds	r24, 0x011E
    10ee:	83 30       	cpi	r24, 0x03	; 3
    10f0:	09 f0       	breq	.+2      	; 0x10f4 <CheckCases+0x3a4>
    10f2:	89 c0       	rjmp	.+274    	; 0x1206 <CheckCases+0x4b6>
			{
				LCD_clearScreen();
    10f4:	0e 94 1f 19 	call	0x323e	; 0x323e <LCD_clearScreen>
				LCD_displayString("ACCEPTED PASSWORD");
    10f8:	89 ed       	ldi	r24, 0xD9	; 217
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	0e 94 78 18 	call	0x30f0	; 0x30f0 <LCD_displayString>
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	90 e4       	ldi	r25, 0x40	; 64
    1104:	ac e9       	ldi	r26, 0x9C	; 156
    1106:	b5 e4       	ldi	r27, 0x45	; 69
    1108:	8d ab       	std	Y+53, r24	; 0x35
    110a:	9e ab       	std	Y+54, r25	; 0x36
    110c:	af ab       	std	Y+55, r26	; 0x37
    110e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1110:	6d a9       	ldd	r22, Y+53	; 0x35
    1112:	7e a9       	ldd	r23, Y+54	; 0x36
    1114:	8f a9       	ldd	r24, Y+55	; 0x37
    1116:	98 ad       	ldd	r25, Y+56	; 0x38
    1118:	20 e0       	ldi	r18, 0x00	; 0
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	4a e7       	ldi	r20, 0x7A	; 122
    111e:	53 e4       	ldi	r21, 0x43	; 67
    1120:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1124:	dc 01       	movw	r26, r24
    1126:	cb 01       	movw	r24, r22
    1128:	89 ab       	std	Y+49, r24	; 0x31
    112a:	9a ab       	std	Y+50, r25	; 0x32
    112c:	ab ab       	std	Y+51, r26	; 0x33
    112e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1130:	69 a9       	ldd	r22, Y+49	; 0x31
    1132:	7a a9       	ldd	r23, Y+50	; 0x32
    1134:	8b a9       	ldd	r24, Y+51	; 0x33
    1136:	9c a9       	ldd	r25, Y+52	; 0x34
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	40 e8       	ldi	r20, 0x80	; 128
    113e:	5f e3       	ldi	r21, 0x3F	; 63
    1140:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1144:	88 23       	and	r24, r24
    1146:	2c f4       	brge	.+10     	; 0x1152 <CheckCases+0x402>
		__ticks = 1;
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	98 ab       	std	Y+48, r25	; 0x30
    114e:	8f a7       	std	Y+47, r24	; 0x2f
    1150:	3f c0       	rjmp	.+126    	; 0x11d0 <CheckCases+0x480>
	else if (__tmp > 65535)
    1152:	69 a9       	ldd	r22, Y+49	; 0x31
    1154:	7a a9       	ldd	r23, Y+50	; 0x32
    1156:	8b a9       	ldd	r24, Y+51	; 0x33
    1158:	9c a9       	ldd	r25, Y+52	; 0x34
    115a:	20 e0       	ldi	r18, 0x00	; 0
    115c:	3f ef       	ldi	r19, 0xFF	; 255
    115e:	4f e7       	ldi	r20, 0x7F	; 127
    1160:	57 e4       	ldi	r21, 0x47	; 71
    1162:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1166:	18 16       	cp	r1, r24
    1168:	4c f5       	brge	.+82     	; 0x11bc <CheckCases+0x46c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    116a:	6d a9       	ldd	r22, Y+53	; 0x35
    116c:	7e a9       	ldd	r23, Y+54	; 0x36
    116e:	8f a9       	ldd	r24, Y+55	; 0x37
    1170:	98 ad       	ldd	r25, Y+56	; 0x38
    1172:	20 e0       	ldi	r18, 0x00	; 0
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	40 e2       	ldi	r20, 0x20	; 32
    1178:	51 e4       	ldi	r21, 0x41	; 65
    117a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    117e:	dc 01       	movw	r26, r24
    1180:	cb 01       	movw	r24, r22
    1182:	bc 01       	movw	r22, r24
    1184:	cd 01       	movw	r24, r26
    1186:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    118a:	dc 01       	movw	r26, r24
    118c:	cb 01       	movw	r24, r22
    118e:	98 ab       	std	Y+48, r25	; 0x30
    1190:	8f a7       	std	Y+47, r24	; 0x2f
    1192:	0f c0       	rjmp	.+30     	; 0x11b2 <CheckCases+0x462>
    1194:	89 e1       	ldi	r24, 0x19	; 25
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	9e a7       	std	Y+46, r25	; 0x2e
    119a:	8d a7       	std	Y+45, r24	; 0x2d
    119c:	8d a5       	ldd	r24, Y+45	; 0x2d
    119e:	9e a5       	ldd	r25, Y+46	; 0x2e
    11a0:	01 97       	sbiw	r24, 0x01	; 1
    11a2:	f1 f7       	brne	.-4      	; 0x11a0 <CheckCases+0x450>
    11a4:	9e a7       	std	Y+46, r25	; 0x2e
    11a6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    11aa:	98 a9       	ldd	r25, Y+48	; 0x30
    11ac:	01 97       	sbiw	r24, 0x01	; 1
    11ae:	98 ab       	std	Y+48, r25	; 0x30
    11b0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    11b4:	98 a9       	ldd	r25, Y+48	; 0x30
    11b6:	00 97       	sbiw	r24, 0x00	; 0
    11b8:	69 f7       	brne	.-38     	; 0x1194 <CheckCases+0x444>
    11ba:	14 c0       	rjmp	.+40     	; 0x11e4 <CheckCases+0x494>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11bc:	69 a9       	ldd	r22, Y+49	; 0x31
    11be:	7a a9       	ldd	r23, Y+50	; 0x32
    11c0:	8b a9       	ldd	r24, Y+51	; 0x33
    11c2:	9c a9       	ldd	r25, Y+52	; 0x34
    11c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11c8:	dc 01       	movw	r26, r24
    11ca:	cb 01       	movw	r24, r22
    11cc:	98 ab       	std	Y+48, r25	; 0x30
    11ce:	8f a7       	std	Y+47, r24	; 0x2f
    11d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    11d2:	98 a9       	ldd	r25, Y+48	; 0x30
    11d4:	9c a7       	std	Y+44, r25	; 0x2c
    11d6:	8b a7       	std	Y+43, r24	; 0x2b
    11d8:	8b a5       	ldd	r24, Y+43	; 0x2b
    11da:	9c a5       	ldd	r25, Y+44	; 0x2c
    11dc:	01 97       	sbiw	r24, 0x01	; 1
    11de:	f1 f7       	brne	.-4      	; 0x11dc <CheckCases+0x48c>
    11e0:	9c a7       	std	Y+44, r25	; 0x2c
    11e2:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(5000);

				LCD_clearScreen();
    11e4:	0e 94 1f 19 	call	0x323e	; 0x323e <LCD_clearScreen>
				LCD_displayString("DOOR Opening..");
    11e8:	8b ee       	ldi	r24, 0xEB	; 235
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	0e 94 78 18 	call	0x30f0	; 0x30f0 <LCD_displayString>
				UART_recieveByte();
    11f0:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <UART_recieveByte>

				LCD_clearScreen();
    11f4:	0e 94 1f 19 	call	0x323e	; 0x323e <LCD_clearScreen>
				LCD_displayString("DOOR Closing..");
    11f8:	8a ef       	ldi	r24, 0xFA	; 250
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	0e 94 78 18 	call	0x30f0	; 0x30f0 <LCD_displayString>
				UART_recieveByte();
    1200:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <UART_recieveByte>
    1204:	82 c0       	rjmp	.+260    	; 0x130a <CheckCases+0x5ba>

			}
			else if(STATE == 6)
    1206:	80 91 1e 01 	lds	r24, 0x011E
    120a:	86 30       	cpi	r24, 0x06	; 6
    120c:	09 f0       	breq	.+2      	; 0x1210 <CheckCases+0x4c0>
    120e:	7d c0       	rjmp	.+250    	; 0x130a <CheckCases+0x5ba>
			{
				LCD_clearScreen();
    1210:	0e 94 1f 19 	call	0x323e	; 0x323e <LCD_clearScreen>
				LCD_displayString("WRONG PASSWORD");
    1214:	8a ec       	ldi	r24, 0xCA	; 202
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	0e 94 78 18 	call	0x30f0	; 0x30f0 <LCD_displayString>
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	90 e4       	ldi	r25, 0x40	; 64
    1220:	ac e9       	ldi	r26, 0x9C	; 156
    1222:	b5 e4       	ldi	r27, 0x45	; 69
    1224:	8f a3       	std	Y+39, r24	; 0x27
    1226:	98 a7       	std	Y+40, r25	; 0x28
    1228:	a9 a7       	std	Y+41, r26	; 0x29
    122a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    122c:	6f a1       	ldd	r22, Y+39	; 0x27
    122e:	78 a5       	ldd	r23, Y+40	; 0x28
    1230:	89 a5       	ldd	r24, Y+41	; 0x29
    1232:	9a a5       	ldd	r25, Y+42	; 0x2a
    1234:	20 e0       	ldi	r18, 0x00	; 0
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	4a e7       	ldi	r20, 0x7A	; 122
    123a:	53 e4       	ldi	r21, 0x43	; 67
    123c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1240:	dc 01       	movw	r26, r24
    1242:	cb 01       	movw	r24, r22
    1244:	8b a3       	std	Y+35, r24	; 0x23
    1246:	9c a3       	std	Y+36, r25	; 0x24
    1248:	ad a3       	std	Y+37, r26	; 0x25
    124a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    124c:	6b a1       	ldd	r22, Y+35	; 0x23
    124e:	7c a1       	ldd	r23, Y+36	; 0x24
    1250:	8d a1       	ldd	r24, Y+37	; 0x25
    1252:	9e a1       	ldd	r25, Y+38	; 0x26
    1254:	20 e0       	ldi	r18, 0x00	; 0
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	40 e8       	ldi	r20, 0x80	; 128
    125a:	5f e3       	ldi	r21, 0x3F	; 63
    125c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1260:	88 23       	and	r24, r24
    1262:	2c f4       	brge	.+10     	; 0x126e <CheckCases+0x51e>
		__ticks = 1;
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	9a a3       	std	Y+34, r25	; 0x22
    126a:	89 a3       	std	Y+33, r24	; 0x21
    126c:	3f c0       	rjmp	.+126    	; 0x12ec <CheckCases+0x59c>
	else if (__tmp > 65535)
    126e:	6b a1       	ldd	r22, Y+35	; 0x23
    1270:	7c a1       	ldd	r23, Y+36	; 0x24
    1272:	8d a1       	ldd	r24, Y+37	; 0x25
    1274:	9e a1       	ldd	r25, Y+38	; 0x26
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	3f ef       	ldi	r19, 0xFF	; 255
    127a:	4f e7       	ldi	r20, 0x7F	; 127
    127c:	57 e4       	ldi	r21, 0x47	; 71
    127e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1282:	18 16       	cp	r1, r24
    1284:	4c f5       	brge	.+82     	; 0x12d8 <CheckCases+0x588>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1286:	6f a1       	ldd	r22, Y+39	; 0x27
    1288:	78 a5       	ldd	r23, Y+40	; 0x28
    128a:	89 a5       	ldd	r24, Y+41	; 0x29
    128c:	9a a5       	ldd	r25, Y+42	; 0x2a
    128e:	20 e0       	ldi	r18, 0x00	; 0
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	40 e2       	ldi	r20, 0x20	; 32
    1294:	51 e4       	ldi	r21, 0x41	; 65
    1296:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    129a:	dc 01       	movw	r26, r24
    129c:	cb 01       	movw	r24, r22
    129e:	bc 01       	movw	r22, r24
    12a0:	cd 01       	movw	r24, r26
    12a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12a6:	dc 01       	movw	r26, r24
    12a8:	cb 01       	movw	r24, r22
    12aa:	9a a3       	std	Y+34, r25	; 0x22
    12ac:	89 a3       	std	Y+33, r24	; 0x21
    12ae:	0f c0       	rjmp	.+30     	; 0x12ce <CheckCases+0x57e>
    12b0:	89 e1       	ldi	r24, 0x19	; 25
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	98 a3       	std	Y+32, r25	; 0x20
    12b6:	8f 8f       	std	Y+31, r24	; 0x1f
    12b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    12ba:	98 a1       	ldd	r25, Y+32	; 0x20
    12bc:	01 97       	sbiw	r24, 0x01	; 1
    12be:	f1 f7       	brne	.-4      	; 0x12bc <CheckCases+0x56c>
    12c0:	98 a3       	std	Y+32, r25	; 0x20
    12c2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12c4:	89 a1       	ldd	r24, Y+33	; 0x21
    12c6:	9a a1       	ldd	r25, Y+34	; 0x22
    12c8:	01 97       	sbiw	r24, 0x01	; 1
    12ca:	9a a3       	std	Y+34, r25	; 0x22
    12cc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ce:	89 a1       	ldd	r24, Y+33	; 0x21
    12d0:	9a a1       	ldd	r25, Y+34	; 0x22
    12d2:	00 97       	sbiw	r24, 0x00	; 0
    12d4:	69 f7       	brne	.-38     	; 0x12b0 <CheckCases+0x560>
    12d6:	14 c0       	rjmp	.+40     	; 0x1300 <CheckCases+0x5b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12d8:	6b a1       	ldd	r22, Y+35	; 0x23
    12da:	7c a1       	ldd	r23, Y+36	; 0x24
    12dc:	8d a1       	ldd	r24, Y+37	; 0x25
    12de:	9e a1       	ldd	r25, Y+38	; 0x26
    12e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e4:	dc 01       	movw	r26, r24
    12e6:	cb 01       	movw	r24, r22
    12e8:	9a a3       	std	Y+34, r25	; 0x22
    12ea:	89 a3       	std	Y+33, r24	; 0x21
    12ec:	89 a1       	ldd	r24, Y+33	; 0x21
    12ee:	9a a1       	ldd	r25, Y+34	; 0x22
    12f0:	9e 8f       	std	Y+30, r25	; 0x1e
    12f2:	8d 8f       	std	Y+29, r24	; 0x1d
    12f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12f6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12f8:	01 97       	sbiw	r24, 0x01	; 1
    12fa:	f1 f7       	brne	.-4      	; 0x12f8 <CheckCases+0x5a8>
    12fc:	9e 8f       	std	Y+30, r25	; 0x1e
    12fe:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(5000);
				LCD_clearScreen();
    1300:	0e 94 1f 19 	call	0x323e	; 0x323e <LCD_clearScreen>

				STATE = 3;
    1304:	83 e0       	ldi	r24, 0x03	; 3
    1306:	80 93 1e 01 	sts	0x011E, r24
			}
			ScreenChecker();
    130a:	0e 94 51 06 	call	0xca2	; 0xca2 <ScreenChecker>
    130e:	08 c1       	rjmp	.+528    	; 0x1520 <CheckCases+0x7d0>
		}
		break;

	case 5:
		if(check == TRUE) // to know which state we are in
    1310:	fe 01       	movw	r30, r28
    1312:	eb 5a       	subi	r30, 0xAB	; 171
    1314:	ff 4f       	sbci	r31, 0xFF	; 255
    1316:	80 81       	ld	r24, Z
    1318:	81 30       	cpi	r24, 0x01	; 1
    131a:	09 f0       	breq	.+2      	; 0x131e <CheckCases+0x5ce>
    131c:	01 c1       	rjmp	.+514    	; 0x1520 <CheckCases+0x7d0>
		{
			STATE = UART_recieveByte();
    131e:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <UART_recieveByte>
    1322:	80 93 1e 01 	sts	0x011E, r24
			if(STATE == 1)
    1326:	80 91 1e 01 	lds	r24, 0x011E
    132a:	81 30       	cpi	r24, 0x01	; 1
    132c:	09 f0       	breq	.+2      	; 0x1330 <CheckCases+0x5e0>
    132e:	79 c0       	rjmp	.+242    	; 0x1422 <CheckCases+0x6d2>
			{
				LCD_clearScreen();
    1330:	0e 94 1f 19 	call	0x323e	; 0x323e <LCD_clearScreen>
				LCD_displayString("ACCEPTED PASSWORD");
    1334:	89 ed       	ldi	r24, 0xD9	; 217
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	0e 94 78 18 	call	0x30f0	; 0x30f0 <LCD_displayString>
    133c:	80 e0       	ldi	r24, 0x00	; 0
    133e:	90 e4       	ldi	r25, 0x40	; 64
    1340:	ac e9       	ldi	r26, 0x9C	; 156
    1342:	b5 e4       	ldi	r27, 0x45	; 69
    1344:	89 8f       	std	Y+25, r24	; 0x19
    1346:	9a 8f       	std	Y+26, r25	; 0x1a
    1348:	ab 8f       	std	Y+27, r26	; 0x1b
    134a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    134c:	69 8d       	ldd	r22, Y+25	; 0x19
    134e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1350:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1352:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1354:	20 e0       	ldi	r18, 0x00	; 0
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	4a e7       	ldi	r20, 0x7A	; 122
    135a:	53 e4       	ldi	r21, 0x43	; 67
    135c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1360:	dc 01       	movw	r26, r24
    1362:	cb 01       	movw	r24, r22
    1364:	8d 8b       	std	Y+21, r24	; 0x15
    1366:	9e 8b       	std	Y+22, r25	; 0x16
    1368:	af 8b       	std	Y+23, r26	; 0x17
    136a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    136c:	6d 89       	ldd	r22, Y+21	; 0x15
    136e:	7e 89       	ldd	r23, Y+22	; 0x16
    1370:	8f 89       	ldd	r24, Y+23	; 0x17
    1372:	98 8d       	ldd	r25, Y+24	; 0x18
    1374:	20 e0       	ldi	r18, 0x00	; 0
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	40 e8       	ldi	r20, 0x80	; 128
    137a:	5f e3       	ldi	r21, 0x3F	; 63
    137c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1380:	88 23       	and	r24, r24
    1382:	2c f4       	brge	.+10     	; 0x138e <CheckCases+0x63e>
		__ticks = 1;
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	9c 8b       	std	Y+20, r25	; 0x14
    138a:	8b 8b       	std	Y+19, r24	; 0x13
    138c:	3f c0       	rjmp	.+126    	; 0x140c <CheckCases+0x6bc>
	else if (__tmp > 65535)
    138e:	6d 89       	ldd	r22, Y+21	; 0x15
    1390:	7e 89       	ldd	r23, Y+22	; 0x16
    1392:	8f 89       	ldd	r24, Y+23	; 0x17
    1394:	98 8d       	ldd	r25, Y+24	; 0x18
    1396:	20 e0       	ldi	r18, 0x00	; 0
    1398:	3f ef       	ldi	r19, 0xFF	; 255
    139a:	4f e7       	ldi	r20, 0x7F	; 127
    139c:	57 e4       	ldi	r21, 0x47	; 71
    139e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13a2:	18 16       	cp	r1, r24
    13a4:	4c f5       	brge	.+82     	; 0x13f8 <CheckCases+0x6a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13a6:	69 8d       	ldd	r22, Y+25	; 0x19
    13a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13ae:	20 e0       	ldi	r18, 0x00	; 0
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	40 e2       	ldi	r20, 0x20	; 32
    13b4:	51 e4       	ldi	r21, 0x41	; 65
    13b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ba:	dc 01       	movw	r26, r24
    13bc:	cb 01       	movw	r24, r22
    13be:	bc 01       	movw	r22, r24
    13c0:	cd 01       	movw	r24, r26
    13c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13c6:	dc 01       	movw	r26, r24
    13c8:	cb 01       	movw	r24, r22
    13ca:	9c 8b       	std	Y+20, r25	; 0x14
    13cc:	8b 8b       	std	Y+19, r24	; 0x13
    13ce:	0f c0       	rjmp	.+30     	; 0x13ee <CheckCases+0x69e>
    13d0:	89 e1       	ldi	r24, 0x19	; 25
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	9a 8b       	std	Y+18, r25	; 0x12
    13d6:	89 8b       	std	Y+17, r24	; 0x11
    13d8:	89 89       	ldd	r24, Y+17	; 0x11
    13da:	9a 89       	ldd	r25, Y+18	; 0x12
    13dc:	01 97       	sbiw	r24, 0x01	; 1
    13de:	f1 f7       	brne	.-4      	; 0x13dc <CheckCases+0x68c>
    13e0:	9a 8b       	std	Y+18, r25	; 0x12
    13e2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13e4:	8b 89       	ldd	r24, Y+19	; 0x13
    13e6:	9c 89       	ldd	r25, Y+20	; 0x14
    13e8:	01 97       	sbiw	r24, 0x01	; 1
    13ea:	9c 8b       	std	Y+20, r25	; 0x14
    13ec:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13ee:	8b 89       	ldd	r24, Y+19	; 0x13
    13f0:	9c 89       	ldd	r25, Y+20	; 0x14
    13f2:	00 97       	sbiw	r24, 0x00	; 0
    13f4:	69 f7       	brne	.-38     	; 0x13d0 <CheckCases+0x680>
    13f6:	92 c0       	rjmp	.+292    	; 0x151c <CheckCases+0x7cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13f8:	6d 89       	ldd	r22, Y+21	; 0x15
    13fa:	7e 89       	ldd	r23, Y+22	; 0x16
    13fc:	8f 89       	ldd	r24, Y+23	; 0x17
    13fe:	98 8d       	ldd	r25, Y+24	; 0x18
    1400:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1404:	dc 01       	movw	r26, r24
    1406:	cb 01       	movw	r24, r22
    1408:	9c 8b       	std	Y+20, r25	; 0x14
    140a:	8b 8b       	std	Y+19, r24	; 0x13
    140c:	8b 89       	ldd	r24, Y+19	; 0x13
    140e:	9c 89       	ldd	r25, Y+20	; 0x14
    1410:	98 8b       	std	Y+16, r25	; 0x10
    1412:	8f 87       	std	Y+15, r24	; 0x0f
    1414:	8f 85       	ldd	r24, Y+15	; 0x0f
    1416:	98 89       	ldd	r25, Y+16	; 0x10
    1418:	01 97       	sbiw	r24, 0x01	; 1
    141a:	f1 f7       	brne	.-4      	; 0x1418 <CheckCases+0x6c8>
    141c:	98 8b       	std	Y+16, r25	; 0x10
    141e:	8f 87       	std	Y+15, r24	; 0x0f
    1420:	7d c0       	rjmp	.+250    	; 0x151c <CheckCases+0x7cc>
				_delay_ms(5000);
			}
			else if(STATE == 3)
    1422:	80 91 1e 01 	lds	r24, 0x011E
    1426:	83 30       	cpi	r24, 0x03	; 3
    1428:	09 f0       	breq	.+2      	; 0x142c <CheckCases+0x6dc>
    142a:	78 c0       	rjmp	.+240    	; 0x151c <CheckCases+0x7cc>
			{
				LCD_clearScreen();
    142c:	0e 94 1f 19 	call	0x323e	; 0x323e <LCD_clearScreen>
				LCD_displayString("WRONG PASSWORD");
    1430:	8a ec       	ldi	r24, 0xCA	; 202
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	0e 94 78 18 	call	0x30f0	; 0x30f0 <LCD_displayString>
    1438:	80 e0       	ldi	r24, 0x00	; 0
    143a:	90 e4       	ldi	r25, 0x40	; 64
    143c:	ac e9       	ldi	r26, 0x9C	; 156
    143e:	b5 e4       	ldi	r27, 0x45	; 69
    1440:	8b 87       	std	Y+11, r24	; 0x0b
    1442:	9c 87       	std	Y+12, r25	; 0x0c
    1444:	ad 87       	std	Y+13, r26	; 0x0d
    1446:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1448:	6b 85       	ldd	r22, Y+11	; 0x0b
    144a:	7c 85       	ldd	r23, Y+12	; 0x0c
    144c:	8d 85       	ldd	r24, Y+13	; 0x0d
    144e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1450:	20 e0       	ldi	r18, 0x00	; 0
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	4a e7       	ldi	r20, 0x7A	; 122
    1456:	53 e4       	ldi	r21, 0x43	; 67
    1458:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    145c:	dc 01       	movw	r26, r24
    145e:	cb 01       	movw	r24, r22
    1460:	8f 83       	std	Y+7, r24	; 0x07
    1462:	98 87       	std	Y+8, r25	; 0x08
    1464:	a9 87       	std	Y+9, r26	; 0x09
    1466:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1468:	6f 81       	ldd	r22, Y+7	; 0x07
    146a:	78 85       	ldd	r23, Y+8	; 0x08
    146c:	89 85       	ldd	r24, Y+9	; 0x09
    146e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1470:	20 e0       	ldi	r18, 0x00	; 0
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	40 e8       	ldi	r20, 0x80	; 128
    1476:	5f e3       	ldi	r21, 0x3F	; 63
    1478:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    147c:	88 23       	and	r24, r24
    147e:	2c f4       	brge	.+10     	; 0x148a <CheckCases+0x73a>
		__ticks = 1;
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	9e 83       	std	Y+6, r25	; 0x06
    1486:	8d 83       	std	Y+5, r24	; 0x05
    1488:	3f c0       	rjmp	.+126    	; 0x1508 <CheckCases+0x7b8>
	else if (__tmp > 65535)
    148a:	6f 81       	ldd	r22, Y+7	; 0x07
    148c:	78 85       	ldd	r23, Y+8	; 0x08
    148e:	89 85       	ldd	r24, Y+9	; 0x09
    1490:	9a 85       	ldd	r25, Y+10	; 0x0a
    1492:	20 e0       	ldi	r18, 0x00	; 0
    1494:	3f ef       	ldi	r19, 0xFF	; 255
    1496:	4f e7       	ldi	r20, 0x7F	; 127
    1498:	57 e4       	ldi	r21, 0x47	; 71
    149a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    149e:	18 16       	cp	r1, r24
    14a0:	4c f5       	brge	.+82     	; 0x14f4 <CheckCases+0x7a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    14a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    14a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    14a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    14aa:	20 e0       	ldi	r18, 0x00	; 0
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	40 e2       	ldi	r20, 0x20	; 32
    14b0:	51 e4       	ldi	r21, 0x41	; 65
    14b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14b6:	dc 01       	movw	r26, r24
    14b8:	cb 01       	movw	r24, r22
    14ba:	bc 01       	movw	r22, r24
    14bc:	cd 01       	movw	r24, r26
    14be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c2:	dc 01       	movw	r26, r24
    14c4:	cb 01       	movw	r24, r22
    14c6:	9e 83       	std	Y+6, r25	; 0x06
    14c8:	8d 83       	std	Y+5, r24	; 0x05
    14ca:	0f c0       	rjmp	.+30     	; 0x14ea <CheckCases+0x79a>
    14cc:	89 e1       	ldi	r24, 0x19	; 25
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	9c 83       	std	Y+4, r25	; 0x04
    14d2:	8b 83       	std	Y+3, r24	; 0x03
    14d4:	8b 81       	ldd	r24, Y+3	; 0x03
    14d6:	9c 81       	ldd	r25, Y+4	; 0x04
    14d8:	01 97       	sbiw	r24, 0x01	; 1
    14da:	f1 f7       	brne	.-4      	; 0x14d8 <CheckCases+0x788>
    14dc:	9c 83       	std	Y+4, r25	; 0x04
    14de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14e0:	8d 81       	ldd	r24, Y+5	; 0x05
    14e2:	9e 81       	ldd	r25, Y+6	; 0x06
    14e4:	01 97       	sbiw	r24, 0x01	; 1
    14e6:	9e 83       	std	Y+6, r25	; 0x06
    14e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ea:	8d 81       	ldd	r24, Y+5	; 0x05
    14ec:	9e 81       	ldd	r25, Y+6	; 0x06
    14ee:	00 97       	sbiw	r24, 0x00	; 0
    14f0:	69 f7       	brne	.-38     	; 0x14cc <CheckCases+0x77c>
    14f2:	14 c0       	rjmp	.+40     	; 0x151c <CheckCases+0x7cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14f4:	6f 81       	ldd	r22, Y+7	; 0x07
    14f6:	78 85       	ldd	r23, Y+8	; 0x08
    14f8:	89 85       	ldd	r24, Y+9	; 0x09
    14fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    14fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1500:	dc 01       	movw	r26, r24
    1502:	cb 01       	movw	r24, r22
    1504:	9e 83       	std	Y+6, r25	; 0x06
    1506:	8d 83       	std	Y+5, r24	; 0x05
    1508:	8d 81       	ldd	r24, Y+5	; 0x05
    150a:	9e 81       	ldd	r25, Y+6	; 0x06
    150c:	9a 83       	std	Y+2, r25	; 0x02
    150e:	89 83       	std	Y+1, r24	; 0x01
    1510:	89 81       	ldd	r24, Y+1	; 0x01
    1512:	9a 81       	ldd	r25, Y+2	; 0x02
    1514:	01 97       	sbiw	r24, 0x01	; 1
    1516:	f1 f7       	brne	.-4      	; 0x1514 <CheckCases+0x7c4>
    1518:	9a 83       	std	Y+2, r25	; 0x02
    151a:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(5000);
			}
			ScreenChecker();
    151c:	0e 94 51 06 	call	0xca2	; 0xca2 <ScreenChecker>
		}
		break;
	}
}
    1520:	c9 5a       	subi	r28, 0xA9	; 169
    1522:	df 4f       	sbci	r29, 0xFF	; 255
    1524:	0f b6       	in	r0, 0x3f	; 63
    1526:	f8 94       	cli
    1528:	de bf       	out	0x3e, r29	; 62
    152a:	0f be       	out	0x3f, r0	; 63
    152c:	cd bf       	out	0x3d, r28	; 61
    152e:	cf 91       	pop	r28
    1530:	df 91       	pop	r29
    1532:	1f 91       	pop	r17
    1534:	0f 91       	pop	r16
    1536:	08 95       	ret

00001538 <main>:

int main()
{
    1538:	0f 93       	push	r16
    153a:	1f 93       	push	r17
    153c:	df 93       	push	r29
    153e:	cf 93       	push	r28
    1540:	cd b7       	in	r28, 0x3d	; 61
    1542:	de b7       	in	r29, 0x3e	; 62
    1544:	c2 57       	subi	r28, 0x72	; 114
    1546:	d0 40       	sbci	r29, 0x00	; 0
    1548:	0f b6       	in	r0, 0x3f	; 63
    154a:	f8 94       	cli
    154c:	de bf       	out	0x3e, r29	; 62
    154e:	0f be       	out	0x3f, r0	; 63
    1550:	cd bf       	out	0x3d, r28	; 61

	/************************************************************************************
	 *                                 KeyPad Settings
	 ************************************************************************************/
	uint8 key = 0;
    1552:	fe 01       	movw	r30, r28
    1554:	ec 59       	subi	r30, 0x9C	; 156
    1556:	ff 4f       	sbci	r31, 0xFF	; 255
    1558:	10 82       	st	Z, r1
	uint8 EnterPasswordCounter = 0;
    155a:	fe 01       	movw	r30, r28
    155c:	ed 59       	subi	r30, 0x9D	; 157
    155e:	ff 4f       	sbci	r31, 0xFF	; 255
    1560:	10 82       	st	Z, r1

	/************************************************************************************
	 *                                  LCD Settings
	 ************************************************************************************/
	LCD_init();
    1562:	0e 94 6d 14 	call	0x28da	; 0x28da <LCD_init>
	LCD_displayString("ENTER NEW PW");
    1566:	89 e0       	ldi	r24, 0x09	; 9
    1568:	91 e0       	ldi	r25, 0x01	; 1
    156a:	0e 94 78 18 	call	0x30f0	; 0x30f0 <LCD_displayString>
	LCD_moveCursor(1,0);
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	60 e0       	ldi	r22, 0x00	; 0
    1572:	0e 94 a1 18 	call	0x3142	; 0x3142 <LCD_moveCursor>
	/************************************************************************************
	 *                                  UART Settings
	 ************************************************************************************/
	uart_ConfigType UART_Config_2 = {baud_9600, EIGHT_BIT, Disabled, ONE_StopBit};
    1576:	ce 01       	movw	r24, r28
    1578:	8b 59       	subi	r24, 0x9B	; 155
    157a:	9f 4f       	sbci	r25, 0xFF	; 255
    157c:	e0 96       	adiw	r28, 0x30	; 48
    157e:	9f af       	std	Y+63, r25	; 0x3f
    1580:	8e af       	std	Y+62, r24	; 0x3e
    1582:	e0 97       	sbiw	r28, 0x30	; 48
    1584:	20 e2       	ldi	r18, 0x20	; 32
    1586:	31 e0       	ldi	r19, 0x01	; 1
    1588:	e2 96       	adiw	r28, 0x32	; 50
    158a:	3f af       	std	Y+63, r19	; 0x3f
    158c:	2e af       	std	Y+62, r18	; 0x3e
    158e:	e2 97       	sbiw	r28, 0x32	; 50
    1590:	37 e0       	ldi	r19, 0x07	; 7
    1592:	e3 96       	adiw	r28, 0x33	; 51
    1594:	3f af       	std	Y+63, r19	; 0x3f
    1596:	e3 97       	sbiw	r28, 0x33	; 51
    1598:	e2 96       	adiw	r28, 0x32	; 50
    159a:	ee ad       	ldd	r30, Y+62	; 0x3e
    159c:	ff ad       	ldd	r31, Y+63	; 0x3f
    159e:	e2 97       	sbiw	r28, 0x32	; 50
    15a0:	00 80       	ld	r0, Z
    15a2:	e2 96       	adiw	r28, 0x32	; 50
    15a4:	2e ad       	ldd	r18, Y+62	; 0x3e
    15a6:	3f ad       	ldd	r19, Y+63	; 0x3f
    15a8:	e2 97       	sbiw	r28, 0x32	; 50
    15aa:	2f 5f       	subi	r18, 0xFF	; 255
    15ac:	3f 4f       	sbci	r19, 0xFF	; 255
    15ae:	e2 96       	adiw	r28, 0x32	; 50
    15b0:	3f af       	std	Y+63, r19	; 0x3f
    15b2:	2e af       	std	Y+62, r18	; 0x3e
    15b4:	e2 97       	sbiw	r28, 0x32	; 50
    15b6:	e0 96       	adiw	r28, 0x30	; 48
    15b8:	ee ad       	ldd	r30, Y+62	; 0x3e
    15ba:	ff ad       	ldd	r31, Y+63	; 0x3f
    15bc:	e0 97       	sbiw	r28, 0x30	; 48
    15be:	00 82       	st	Z, r0
    15c0:	e0 96       	adiw	r28, 0x30	; 48
    15c2:	2e ad       	ldd	r18, Y+62	; 0x3e
    15c4:	3f ad       	ldd	r19, Y+63	; 0x3f
    15c6:	e0 97       	sbiw	r28, 0x30	; 48
    15c8:	2f 5f       	subi	r18, 0xFF	; 255
    15ca:	3f 4f       	sbci	r19, 0xFF	; 255
    15cc:	e0 96       	adiw	r28, 0x30	; 48
    15ce:	3f af       	std	Y+63, r19	; 0x3f
    15d0:	2e af       	std	Y+62, r18	; 0x3e
    15d2:	e0 97       	sbiw	r28, 0x30	; 48
    15d4:	e3 96       	adiw	r28, 0x33	; 51
    15d6:	3f ad       	ldd	r19, Y+63	; 0x3f
    15d8:	e3 97       	sbiw	r28, 0x33	; 51
    15da:	31 50       	subi	r19, 0x01	; 1
    15dc:	e3 96       	adiw	r28, 0x33	; 51
    15de:	3f af       	std	Y+63, r19	; 0x3f
    15e0:	e3 97       	sbiw	r28, 0x33	; 51
    15e2:	e3 96       	adiw	r28, 0x33	; 51
    15e4:	8f ad       	ldd	r24, Y+63	; 0x3f
    15e6:	e3 97       	sbiw	r28, 0x33	; 51
    15e8:	88 23       	and	r24, r24
    15ea:	b1 f6       	brne	.-84     	; 0x1598 <main+0x60>
	UART_init(&UART_Config_2);
    15ec:	ce 01       	movw	r24, r28
    15ee:	8b 59       	subi	r24, 0x9B	; 155
    15f0:	9f 4f       	sbci	r25, 0xFF	; 255
    15f2:	0e 94 29 19 	call	0x3252	; 0x3252 <UART_init>

	while(1)
	{
		key = KEYPAD_getPressedKey();
    15f6:	0e 94 75 13 	call	0x26ea	; 0x26ea <KEYPAD_getPressedKey>
    15fa:	fe 01       	movw	r30, r28
    15fc:	ec 59       	subi	r30, 0x9C	; 156
    15fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1600:	80 83       	st	Z, r24
		if(key == 13)
    1602:	fe 01       	movw	r30, r28
    1604:	ec 59       	subi	r30, 0x9C	; 156
    1606:	ff 4f       	sbci	r31, 0xFF	; 255
    1608:	80 81       	ld	r24, Z
    160a:	8d 30       	cpi	r24, 0x0D	; 13
    160c:	09 f0       	breq	.+2      	; 0x1610 <main+0xd8>
    160e:	c1 c0       	rjmp	.+386    	; 0x1792 <main+0x25a>
		{
			SendToCONTROL(key);
    1610:	fe 01       	movw	r30, r28
    1612:	ec 59       	subi	r30, 0x9C	; 156
    1614:	ff 4f       	sbci	r31, 0xFF	; 255
    1616:	80 81       	ld	r24, Z
    1618:	0e 94 a3 05 	call	0xb46	; 0xb46 <SendToCONTROL>
			check = UART_recieveByte();
    161c:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <UART_recieveByte>
    1620:	80 93 28 01 	sts	0x0128, r24
    1624:	fe 01       	movw	r30, r28
    1626:	e1 5a       	subi	r30, 0xA1	; 161
    1628:	ff 4f       	sbci	r31, 0xFF	; 255
    162a:	80 e0       	ldi	r24, 0x00	; 0
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	a0 e2       	ldi	r26, 0x20	; 32
    1630:	b1 e4       	ldi	r27, 0x41	; 65
    1632:	80 83       	st	Z, r24
    1634:	91 83       	std	Z+1, r25	; 0x01
    1636:	a2 83       	std	Z+2, r26	; 0x02
    1638:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    163a:	8e 01       	movw	r16, r28
    163c:	05 5a       	subi	r16, 0xA5	; 165
    163e:	1f 4f       	sbci	r17, 0xFF	; 255
    1640:	fe 01       	movw	r30, r28
    1642:	e1 5a       	subi	r30, 0xA1	; 161
    1644:	ff 4f       	sbci	r31, 0xFF	; 255
    1646:	60 81       	ld	r22, Z
    1648:	71 81       	ldd	r23, Z+1	; 0x01
    164a:	82 81       	ldd	r24, Z+2	; 0x02
    164c:	93 81       	ldd	r25, Z+3	; 0x03
    164e:	20 e0       	ldi	r18, 0x00	; 0
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	4a e7       	ldi	r20, 0x7A	; 122
    1654:	53 e4       	ldi	r21, 0x43	; 67
    1656:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    165a:	dc 01       	movw	r26, r24
    165c:	cb 01       	movw	r24, r22
    165e:	f8 01       	movw	r30, r16
    1660:	80 83       	st	Z, r24
    1662:	91 83       	std	Z+1, r25	; 0x01
    1664:	a2 83       	std	Z+2, r26	; 0x02
    1666:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1668:	fe 01       	movw	r30, r28
    166a:	e5 5a       	subi	r30, 0xA5	; 165
    166c:	ff 4f       	sbci	r31, 0xFF	; 255
    166e:	60 81       	ld	r22, Z
    1670:	71 81       	ldd	r23, Z+1	; 0x01
    1672:	82 81       	ldd	r24, Z+2	; 0x02
    1674:	93 81       	ldd	r25, Z+3	; 0x03
    1676:	20 e0       	ldi	r18, 0x00	; 0
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	40 e8       	ldi	r20, 0x80	; 128
    167c:	5f e3       	ldi	r21, 0x3F	; 63
    167e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1682:	88 23       	and	r24, r24
    1684:	44 f4       	brge	.+16     	; 0x1696 <main+0x15e>
		__ticks = 1;
    1686:	fe 01       	movw	r30, r28
    1688:	e7 5a       	subi	r30, 0xA7	; 167
    168a:	ff 4f       	sbci	r31, 0xFF	; 255
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	91 83       	std	Z+1, r25	; 0x01
    1692:	80 83       	st	Z, r24
    1694:	64 c0       	rjmp	.+200    	; 0x175e <main+0x226>
	else if (__tmp > 65535)
    1696:	fe 01       	movw	r30, r28
    1698:	e5 5a       	subi	r30, 0xA5	; 165
    169a:	ff 4f       	sbci	r31, 0xFF	; 255
    169c:	60 81       	ld	r22, Z
    169e:	71 81       	ldd	r23, Z+1	; 0x01
    16a0:	82 81       	ldd	r24, Z+2	; 0x02
    16a2:	93 81       	ldd	r25, Z+3	; 0x03
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	3f ef       	ldi	r19, 0xFF	; 255
    16a8:	4f e7       	ldi	r20, 0x7F	; 127
    16aa:	57 e4       	ldi	r21, 0x47	; 71
    16ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16b0:	18 16       	cp	r1, r24
    16b2:	0c f0       	brlt	.+2      	; 0x16b6 <main+0x17e>
    16b4:	43 c0       	rjmp	.+134    	; 0x173c <main+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16b6:	fe 01       	movw	r30, r28
    16b8:	e1 5a       	subi	r30, 0xA1	; 161
    16ba:	ff 4f       	sbci	r31, 0xFF	; 255
    16bc:	60 81       	ld	r22, Z
    16be:	71 81       	ldd	r23, Z+1	; 0x01
    16c0:	82 81       	ldd	r24, Z+2	; 0x02
    16c2:	93 81       	ldd	r25, Z+3	; 0x03
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	40 e2       	ldi	r20, 0x20	; 32
    16ca:	51 e4       	ldi	r21, 0x41	; 65
    16cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16d0:	dc 01       	movw	r26, r24
    16d2:	cb 01       	movw	r24, r22
    16d4:	8e 01       	movw	r16, r28
    16d6:	07 5a       	subi	r16, 0xA7	; 167
    16d8:	1f 4f       	sbci	r17, 0xFF	; 255
    16da:	bc 01       	movw	r22, r24
    16dc:	cd 01       	movw	r24, r26
    16de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16e2:	dc 01       	movw	r26, r24
    16e4:	cb 01       	movw	r24, r22
    16e6:	f8 01       	movw	r30, r16
    16e8:	91 83       	std	Z+1, r25	; 0x01
    16ea:	80 83       	st	Z, r24
    16ec:	1f c0       	rjmp	.+62     	; 0x172c <main+0x1f4>
    16ee:	fe 01       	movw	r30, r28
    16f0:	e9 5a       	subi	r30, 0xA9	; 169
    16f2:	ff 4f       	sbci	r31, 0xFF	; 255
    16f4:	89 e1       	ldi	r24, 0x19	; 25
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	91 83       	std	Z+1, r25	; 0x01
    16fa:	80 83       	st	Z, r24
    16fc:	fe 01       	movw	r30, r28
    16fe:	e9 5a       	subi	r30, 0xA9	; 169
    1700:	ff 4f       	sbci	r31, 0xFF	; 255
    1702:	80 81       	ld	r24, Z
    1704:	91 81       	ldd	r25, Z+1	; 0x01
    1706:	01 97       	sbiw	r24, 0x01	; 1
    1708:	f1 f7       	brne	.-4      	; 0x1706 <main+0x1ce>
    170a:	fe 01       	movw	r30, r28
    170c:	e9 5a       	subi	r30, 0xA9	; 169
    170e:	ff 4f       	sbci	r31, 0xFF	; 255
    1710:	91 83       	std	Z+1, r25	; 0x01
    1712:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1714:	de 01       	movw	r26, r28
    1716:	a7 5a       	subi	r26, 0xA7	; 167
    1718:	bf 4f       	sbci	r27, 0xFF	; 255
    171a:	fe 01       	movw	r30, r28
    171c:	e7 5a       	subi	r30, 0xA7	; 167
    171e:	ff 4f       	sbci	r31, 0xFF	; 255
    1720:	80 81       	ld	r24, Z
    1722:	91 81       	ldd	r25, Z+1	; 0x01
    1724:	01 97       	sbiw	r24, 0x01	; 1
    1726:	11 96       	adiw	r26, 0x01	; 1
    1728:	9c 93       	st	X, r25
    172a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    172c:	fe 01       	movw	r30, r28
    172e:	e7 5a       	subi	r30, 0xA7	; 167
    1730:	ff 4f       	sbci	r31, 0xFF	; 255
    1732:	80 81       	ld	r24, Z
    1734:	91 81       	ldd	r25, Z+1	; 0x01
    1736:	00 97       	sbiw	r24, 0x00	; 0
    1738:	d1 f6       	brne	.-76     	; 0x16ee <main+0x1b6>
    173a:	27 c0       	rjmp	.+78     	; 0x178a <main+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    173c:	8e 01       	movw	r16, r28
    173e:	07 5a       	subi	r16, 0xA7	; 167
    1740:	1f 4f       	sbci	r17, 0xFF	; 255
    1742:	fe 01       	movw	r30, r28
    1744:	e5 5a       	subi	r30, 0xA5	; 165
    1746:	ff 4f       	sbci	r31, 0xFF	; 255
    1748:	60 81       	ld	r22, Z
    174a:	71 81       	ldd	r23, Z+1	; 0x01
    174c:	82 81       	ldd	r24, Z+2	; 0x02
    174e:	93 81       	ldd	r25, Z+3	; 0x03
    1750:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1754:	dc 01       	movw	r26, r24
    1756:	cb 01       	movw	r24, r22
    1758:	f8 01       	movw	r30, r16
    175a:	91 83       	std	Z+1, r25	; 0x01
    175c:	80 83       	st	Z, r24
    175e:	de 01       	movw	r26, r28
    1760:	ab 5a       	subi	r26, 0xAB	; 171
    1762:	bf 4f       	sbci	r27, 0xFF	; 255
    1764:	fe 01       	movw	r30, r28
    1766:	e7 5a       	subi	r30, 0xA7	; 167
    1768:	ff 4f       	sbci	r31, 0xFF	; 255
    176a:	80 81       	ld	r24, Z
    176c:	91 81       	ldd	r25, Z+1	; 0x01
    176e:	8d 93       	st	X+, r24
    1770:	9c 93       	st	X, r25
    1772:	fe 01       	movw	r30, r28
    1774:	eb 5a       	subi	r30, 0xAB	; 171
    1776:	ff 4f       	sbci	r31, 0xFF	; 255
    1778:	80 81       	ld	r24, Z
    177a:	91 81       	ldd	r25, Z+1	; 0x01
    177c:	01 97       	sbiw	r24, 0x01	; 1
    177e:	f1 f7       	brne	.-4      	; 0x177c <main+0x244>
    1780:	fe 01       	movw	r30, r28
    1782:	eb 5a       	subi	r30, 0xAB	; 171
    1784:	ff 4f       	sbci	r31, 0xFF	; 255
    1786:	91 83       	std	Z+1, r25	; 0x01
    1788:	80 83       	st	Z, r24
			_delay_ms(10);
			CheckCases(check);
    178a:	80 91 28 01 	lds	r24, 0x0128
    178e:	0e 94 a8 06 	call	0xd50	; 0xd50 <CheckCases>
    1792:	fe 01       	movw	r30, r28
    1794:	ef 5a       	subi	r30, 0xAF	; 175
    1796:	ff 4f       	sbci	r31, 0xFF	; 255
    1798:	80 e0       	ldi	r24, 0x00	; 0
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	a0 e2       	ldi	r26, 0x20	; 32
    179e:	b1 e4       	ldi	r27, 0x41	; 65
    17a0:	80 83       	st	Z, r24
    17a2:	91 83       	std	Z+1, r25	; 0x01
    17a4:	a2 83       	std	Z+2, r26	; 0x02
    17a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17a8:	8e 01       	movw	r16, r28
    17aa:	03 5b       	subi	r16, 0xB3	; 179
    17ac:	1f 4f       	sbci	r17, 0xFF	; 255
    17ae:	fe 01       	movw	r30, r28
    17b0:	ef 5a       	subi	r30, 0xAF	; 175
    17b2:	ff 4f       	sbci	r31, 0xFF	; 255
    17b4:	60 81       	ld	r22, Z
    17b6:	71 81       	ldd	r23, Z+1	; 0x01
    17b8:	82 81       	ldd	r24, Z+2	; 0x02
    17ba:	93 81       	ldd	r25, Z+3	; 0x03
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	4a e7       	ldi	r20, 0x7A	; 122
    17c2:	53 e4       	ldi	r21, 0x43	; 67
    17c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17c8:	dc 01       	movw	r26, r24
    17ca:	cb 01       	movw	r24, r22
    17cc:	f8 01       	movw	r30, r16
    17ce:	80 83       	st	Z, r24
    17d0:	91 83       	std	Z+1, r25	; 0x01
    17d2:	a2 83       	std	Z+2, r26	; 0x02
    17d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17d6:	fe 01       	movw	r30, r28
    17d8:	e3 5b       	subi	r30, 0xB3	; 179
    17da:	ff 4f       	sbci	r31, 0xFF	; 255
    17dc:	60 81       	ld	r22, Z
    17de:	71 81       	ldd	r23, Z+1	; 0x01
    17e0:	82 81       	ldd	r24, Z+2	; 0x02
    17e2:	93 81       	ldd	r25, Z+3	; 0x03
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	40 e8       	ldi	r20, 0x80	; 128
    17ea:	5f e3       	ldi	r21, 0x3F	; 63
    17ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17f0:	88 23       	and	r24, r24
    17f2:	44 f4       	brge	.+16     	; 0x1804 <main+0x2cc>
		__ticks = 1;
    17f4:	fe 01       	movw	r30, r28
    17f6:	e5 5b       	subi	r30, 0xB5	; 181
    17f8:	ff 4f       	sbci	r31, 0xFF	; 255
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	91 83       	std	Z+1, r25	; 0x01
    1800:	80 83       	st	Z, r24
    1802:	64 c0       	rjmp	.+200    	; 0x18cc <main+0x394>
	else if (__tmp > 65535)
    1804:	fe 01       	movw	r30, r28
    1806:	e3 5b       	subi	r30, 0xB3	; 179
    1808:	ff 4f       	sbci	r31, 0xFF	; 255
    180a:	60 81       	ld	r22, Z
    180c:	71 81       	ldd	r23, Z+1	; 0x01
    180e:	82 81       	ldd	r24, Z+2	; 0x02
    1810:	93 81       	ldd	r25, Z+3	; 0x03
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	3f ef       	ldi	r19, 0xFF	; 255
    1816:	4f e7       	ldi	r20, 0x7F	; 127
    1818:	57 e4       	ldi	r21, 0x47	; 71
    181a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    181e:	18 16       	cp	r1, r24
    1820:	0c f0       	brlt	.+2      	; 0x1824 <main+0x2ec>
    1822:	43 c0       	rjmp	.+134    	; 0x18aa <main+0x372>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1824:	fe 01       	movw	r30, r28
    1826:	ef 5a       	subi	r30, 0xAF	; 175
    1828:	ff 4f       	sbci	r31, 0xFF	; 255
    182a:	60 81       	ld	r22, Z
    182c:	71 81       	ldd	r23, Z+1	; 0x01
    182e:	82 81       	ldd	r24, Z+2	; 0x02
    1830:	93 81       	ldd	r25, Z+3	; 0x03
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	40 e2       	ldi	r20, 0x20	; 32
    1838:	51 e4       	ldi	r21, 0x41	; 65
    183a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    183e:	dc 01       	movw	r26, r24
    1840:	cb 01       	movw	r24, r22
    1842:	8e 01       	movw	r16, r28
    1844:	05 5b       	subi	r16, 0xB5	; 181
    1846:	1f 4f       	sbci	r17, 0xFF	; 255
    1848:	bc 01       	movw	r22, r24
    184a:	cd 01       	movw	r24, r26
    184c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1850:	dc 01       	movw	r26, r24
    1852:	cb 01       	movw	r24, r22
    1854:	f8 01       	movw	r30, r16
    1856:	91 83       	std	Z+1, r25	; 0x01
    1858:	80 83       	st	Z, r24
    185a:	1f c0       	rjmp	.+62     	; 0x189a <main+0x362>
    185c:	fe 01       	movw	r30, r28
    185e:	e7 5b       	subi	r30, 0xB7	; 183
    1860:	ff 4f       	sbci	r31, 0xFF	; 255
    1862:	89 e1       	ldi	r24, 0x19	; 25
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	91 83       	std	Z+1, r25	; 0x01
    1868:	80 83       	st	Z, r24
    186a:	fe 01       	movw	r30, r28
    186c:	e7 5b       	subi	r30, 0xB7	; 183
    186e:	ff 4f       	sbci	r31, 0xFF	; 255
    1870:	80 81       	ld	r24, Z
    1872:	91 81       	ldd	r25, Z+1	; 0x01
    1874:	01 97       	sbiw	r24, 0x01	; 1
    1876:	f1 f7       	brne	.-4      	; 0x1874 <main+0x33c>
    1878:	fe 01       	movw	r30, r28
    187a:	e7 5b       	subi	r30, 0xB7	; 183
    187c:	ff 4f       	sbci	r31, 0xFF	; 255
    187e:	91 83       	std	Z+1, r25	; 0x01
    1880:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1882:	de 01       	movw	r26, r28
    1884:	a5 5b       	subi	r26, 0xB5	; 181
    1886:	bf 4f       	sbci	r27, 0xFF	; 255
    1888:	fe 01       	movw	r30, r28
    188a:	e5 5b       	subi	r30, 0xB5	; 181
    188c:	ff 4f       	sbci	r31, 0xFF	; 255
    188e:	80 81       	ld	r24, Z
    1890:	91 81       	ldd	r25, Z+1	; 0x01
    1892:	01 97       	sbiw	r24, 0x01	; 1
    1894:	11 96       	adiw	r26, 0x01	; 1
    1896:	9c 93       	st	X, r25
    1898:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    189a:	fe 01       	movw	r30, r28
    189c:	e5 5b       	subi	r30, 0xB5	; 181
    189e:	ff 4f       	sbci	r31, 0xFF	; 255
    18a0:	80 81       	ld	r24, Z
    18a2:	91 81       	ldd	r25, Z+1	; 0x01
    18a4:	00 97       	sbiw	r24, 0x00	; 0
    18a6:	d1 f6       	brne	.-76     	; 0x185c <main+0x324>
    18a8:	28 c0       	rjmp	.+80     	; 0x18fa <main+0x3c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18aa:	8e 01       	movw	r16, r28
    18ac:	05 5b       	subi	r16, 0xB5	; 181
    18ae:	1f 4f       	sbci	r17, 0xFF	; 255
    18b0:	fe 01       	movw	r30, r28
    18b2:	e3 5b       	subi	r30, 0xB3	; 179
    18b4:	ff 4f       	sbci	r31, 0xFF	; 255
    18b6:	60 81       	ld	r22, Z
    18b8:	71 81       	ldd	r23, Z+1	; 0x01
    18ba:	82 81       	ldd	r24, Z+2	; 0x02
    18bc:	93 81       	ldd	r25, Z+3	; 0x03
    18be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18c2:	dc 01       	movw	r26, r24
    18c4:	cb 01       	movw	r24, r22
    18c6:	f8 01       	movw	r30, r16
    18c8:	91 83       	std	Z+1, r25	; 0x01
    18ca:	80 83       	st	Z, r24
    18cc:	de 01       	movw	r26, r28
    18ce:	a9 5b       	subi	r26, 0xB9	; 185
    18d0:	bf 4f       	sbci	r27, 0xFF	; 255
    18d2:	fe 01       	movw	r30, r28
    18d4:	e5 5b       	subi	r30, 0xB5	; 181
    18d6:	ff 4f       	sbci	r31, 0xFF	; 255
    18d8:	80 81       	ld	r24, Z
    18da:	91 81       	ldd	r25, Z+1	; 0x01
    18dc:	11 96       	adiw	r26, 0x01	; 1
    18de:	9c 93       	st	X, r25
    18e0:	8e 93       	st	-X, r24
    18e2:	fe 01       	movw	r30, r28
    18e4:	e9 5b       	subi	r30, 0xB9	; 185
    18e6:	ff 4f       	sbci	r31, 0xFF	; 255
    18e8:	80 81       	ld	r24, Z
    18ea:	91 81       	ldd	r25, Z+1	; 0x01
    18ec:	01 97       	sbiw	r24, 0x01	; 1
    18ee:	f1 f7       	brne	.-4      	; 0x18ec <main+0x3b4>
    18f0:	fe 01       	movw	r30, r28
    18f2:	e9 5b       	subi	r30, 0xB9	; 185
    18f4:	ff 4f       	sbci	r31, 0xFF	; 255
    18f6:	91 83       	std	Z+1, r25	; 0x01
    18f8:	80 83       	st	Z, r24
		}
		_delay_ms(10);
		switch(STATE)
    18fa:	80 91 1e 01 	lds	r24, 0x011E
    18fe:	28 2f       	mov	r18, r24
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	ae 96       	adiw	r28, 0x2e	; 46
    1904:	3f af       	std	Y+63, r19	; 0x3f
    1906:	2e af       	std	Y+62, r18	; 0x3e
    1908:	ae 97       	sbiw	r28, 0x2e	; 46
    190a:	ae 96       	adiw	r28, 0x2e	; 46
    190c:	8e ad       	ldd	r24, Y+62	; 0x3e
    190e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1910:	ae 97       	sbiw	r28, 0x2e	; 46
    1912:	83 30       	cpi	r24, 0x03	; 3
    1914:	91 05       	cpc	r25, r1
    1916:	09 f4       	brne	.+2      	; 0x191a <main+0x3e2>
    1918:	3d c1       	rjmp	.+634    	; 0x1b94 <main+0x65c>
    191a:	ae 96       	adiw	r28, 0x2e	; 46
    191c:	ee ad       	ldd	r30, Y+62	; 0x3e
    191e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1920:	ae 97       	sbiw	r28, 0x2e	; 46
    1922:	e4 30       	cpi	r30, 0x04	; 4
    1924:	f1 05       	cpc	r31, r1
    1926:	84 f4       	brge	.+32     	; 0x1948 <main+0x410>
    1928:	ae 96       	adiw	r28, 0x2e	; 46
    192a:	2e ad       	ldd	r18, Y+62	; 0x3e
    192c:	3f ad       	ldd	r19, Y+63	; 0x3f
    192e:	ae 97       	sbiw	r28, 0x2e	; 46
    1930:	21 30       	cpi	r18, 0x01	; 1
    1932:	31 05       	cpc	r19, r1
    1934:	d1 f0       	breq	.+52     	; 0x196a <main+0x432>
    1936:	ae 96       	adiw	r28, 0x2e	; 46
    1938:	8e ad       	ldd	r24, Y+62	; 0x3e
    193a:	9f ad       	ldd	r25, Y+63	; 0x3f
    193c:	ae 97       	sbiw	r28, 0x2e	; 46
    193e:	82 30       	cpi	r24, 0x02	; 2
    1940:	91 05       	cpc	r25, r1
    1942:	09 f4       	brne	.+2      	; 0x1946 <main+0x40e>
    1944:	a6 c0       	rjmp	.+332    	; 0x1a92 <main+0x55a>
    1946:	57 ce       	rjmp	.-850    	; 0x15f6 <main+0xbe>
    1948:	ae 96       	adiw	r28, 0x2e	; 46
    194a:	ee ad       	ldd	r30, Y+62	; 0x3e
    194c:	ff ad       	ldd	r31, Y+63	; 0x3f
    194e:	ae 97       	sbiw	r28, 0x2e	; 46
    1950:	e4 30       	cpi	r30, 0x04	; 4
    1952:	f1 05       	cpc	r31, r1
    1954:	09 f4       	brne	.+2      	; 0x1958 <main+0x420>
    1956:	9f c1       	rjmp	.+830    	; 0x1c96 <main+0x75e>
    1958:	ae 96       	adiw	r28, 0x2e	; 46
    195a:	2e ad       	ldd	r18, Y+62	; 0x3e
    195c:	3f ad       	ldd	r19, Y+63	; 0x3f
    195e:	ae 97       	sbiw	r28, 0x2e	; 46
    1960:	25 30       	cpi	r18, 0x05	; 5
    1962:	31 05       	cpc	r19, r1
    1964:	09 f4       	brne	.+2      	; 0x1968 <main+0x430>
    1966:	18 c2       	rjmp	.+1072   	; 0x1d98 <main+0x860>
    1968:	46 ce       	rjmp	.-884    	; 0x15f6 <main+0xbe>
		{
		case 1:
			SendToCONTROL(key); //start sending the password byte by byte to the MC2
    196a:	fe 01       	movw	r30, r28
    196c:	ec 59       	subi	r30, 0x9C	; 156
    196e:	ff 4f       	sbci	r31, 0xFF	; 255
    1970:	80 81       	ld	r24, Z
    1972:	0e 94 a3 05 	call	0xb46	; 0xb46 <SendToCONTROL>
			check = UART_recieveByte(); // to know that user enter '='
    1976:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <UART_recieveByte>
    197a:	80 93 28 01 	sts	0x0128, r24
    197e:	fe 01       	movw	r30, r28
    1980:	ed 5b       	subi	r30, 0xBD	; 189
    1982:	ff 4f       	sbci	r31, 0xFF	; 255
    1984:	80 e0       	ldi	r24, 0x00	; 0
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	a0 e2       	ldi	r26, 0x20	; 32
    198a:	b1 e4       	ldi	r27, 0x41	; 65
    198c:	80 83       	st	Z, r24
    198e:	91 83       	std	Z+1, r25	; 0x01
    1990:	a2 83       	std	Z+2, r26	; 0x02
    1992:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1994:	8e 01       	movw	r16, r28
    1996:	01 5c       	subi	r16, 0xC1	; 193
    1998:	1f 4f       	sbci	r17, 0xFF	; 255
    199a:	fe 01       	movw	r30, r28
    199c:	ed 5b       	subi	r30, 0xBD	; 189
    199e:	ff 4f       	sbci	r31, 0xFF	; 255
    19a0:	60 81       	ld	r22, Z
    19a2:	71 81       	ldd	r23, Z+1	; 0x01
    19a4:	82 81       	ldd	r24, Z+2	; 0x02
    19a6:	93 81       	ldd	r25, Z+3	; 0x03
    19a8:	20 e0       	ldi	r18, 0x00	; 0
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	4a e7       	ldi	r20, 0x7A	; 122
    19ae:	53 e4       	ldi	r21, 0x43	; 67
    19b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19b4:	dc 01       	movw	r26, r24
    19b6:	cb 01       	movw	r24, r22
    19b8:	f8 01       	movw	r30, r16
    19ba:	80 83       	st	Z, r24
    19bc:	91 83       	std	Z+1, r25	; 0x01
    19be:	a2 83       	std	Z+2, r26	; 0x02
    19c0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19c2:	fe 01       	movw	r30, r28
    19c4:	ff 96       	adiw	r30, 0x3f	; 63
    19c6:	60 81       	ld	r22, Z
    19c8:	71 81       	ldd	r23, Z+1	; 0x01
    19ca:	82 81       	ldd	r24, Z+2	; 0x02
    19cc:	93 81       	ldd	r25, Z+3	; 0x03
    19ce:	20 e0       	ldi	r18, 0x00	; 0
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	40 e8       	ldi	r20, 0x80	; 128
    19d4:	5f e3       	ldi	r21, 0x3F	; 63
    19d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19da:	88 23       	and	r24, r24
    19dc:	2c f4       	brge	.+10     	; 0x19e8 <main+0x4b0>
		__ticks = 1;
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	9e af       	std	Y+62, r25	; 0x3e
    19e4:	8d af       	std	Y+61, r24	; 0x3d
    19e6:	46 c0       	rjmp	.+140    	; 0x1a74 <main+0x53c>
	else if (__tmp > 65535)
    19e8:	fe 01       	movw	r30, r28
    19ea:	ff 96       	adiw	r30, 0x3f	; 63
    19ec:	60 81       	ld	r22, Z
    19ee:	71 81       	ldd	r23, Z+1	; 0x01
    19f0:	82 81       	ldd	r24, Z+2	; 0x02
    19f2:	93 81       	ldd	r25, Z+3	; 0x03
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	3f ef       	ldi	r19, 0xFF	; 255
    19f8:	4f e7       	ldi	r20, 0x7F	; 127
    19fa:	57 e4       	ldi	r21, 0x47	; 71
    19fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a00:	18 16       	cp	r1, r24
    1a02:	64 f5       	brge	.+88     	; 0x1a5c <main+0x524>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a04:	fe 01       	movw	r30, r28
    1a06:	ed 5b       	subi	r30, 0xBD	; 189
    1a08:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0a:	60 81       	ld	r22, Z
    1a0c:	71 81       	ldd	r23, Z+1	; 0x01
    1a0e:	82 81       	ldd	r24, Z+2	; 0x02
    1a10:	93 81       	ldd	r25, Z+3	; 0x03
    1a12:	20 e0       	ldi	r18, 0x00	; 0
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	40 e2       	ldi	r20, 0x20	; 32
    1a18:	51 e4       	ldi	r21, 0x41	; 65
    1a1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a1e:	dc 01       	movw	r26, r24
    1a20:	cb 01       	movw	r24, r22
    1a22:	bc 01       	movw	r22, r24
    1a24:	cd 01       	movw	r24, r26
    1a26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a2a:	dc 01       	movw	r26, r24
    1a2c:	cb 01       	movw	r24, r22
    1a2e:	9e af       	std	Y+62, r25	; 0x3e
    1a30:	8d af       	std	Y+61, r24	; 0x3d
    1a32:	0f c0       	rjmp	.+30     	; 0x1a52 <main+0x51a>
    1a34:	89 e1       	ldi	r24, 0x19	; 25
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	9c af       	std	Y+60, r25	; 0x3c
    1a3a:	8b af       	std	Y+59, r24	; 0x3b
    1a3c:	8b ad       	ldd	r24, Y+59	; 0x3b
    1a3e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1a40:	01 97       	sbiw	r24, 0x01	; 1
    1a42:	f1 f7       	brne	.-4      	; 0x1a40 <main+0x508>
    1a44:	9c af       	std	Y+60, r25	; 0x3c
    1a46:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a48:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a4a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a4c:	01 97       	sbiw	r24, 0x01	; 1
    1a4e:	9e af       	std	Y+62, r25	; 0x3e
    1a50:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a52:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a54:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a56:	00 97       	sbiw	r24, 0x00	; 0
    1a58:	69 f7       	brne	.-38     	; 0x1a34 <main+0x4fc>
    1a5a:	16 c0       	rjmp	.+44     	; 0x1a88 <main+0x550>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a5c:	fe 01       	movw	r30, r28
    1a5e:	ff 96       	adiw	r30, 0x3f	; 63
    1a60:	60 81       	ld	r22, Z
    1a62:	71 81       	ldd	r23, Z+1	; 0x01
    1a64:	82 81       	ldd	r24, Z+2	; 0x02
    1a66:	93 81       	ldd	r25, Z+3	; 0x03
    1a68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a6c:	dc 01       	movw	r26, r24
    1a6e:	cb 01       	movw	r24, r22
    1a70:	9e af       	std	Y+62, r25	; 0x3e
    1a72:	8d af       	std	Y+61, r24	; 0x3d
    1a74:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a76:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a78:	9a af       	std	Y+58, r25	; 0x3a
    1a7a:	89 af       	std	Y+57, r24	; 0x39
    1a7c:	89 ad       	ldd	r24, Y+57	; 0x39
    1a7e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a80:	01 97       	sbiw	r24, 0x01	; 1
    1a82:	f1 f7       	brne	.-4      	; 0x1a80 <main+0x548>
    1a84:	9a af       	std	Y+58, r25	; 0x3a
    1a86:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(10);
			CheckCases(check);// to knw
    1a88:	80 91 28 01 	lds	r24, 0x0128
    1a8c:	0e 94 a8 06 	call	0xd50	; 0xd50 <CheckCases>
    1a90:	b2 cd       	rjmp	.-1180   	; 0x15f6 <main+0xbe>
			break;
		case 2:
			SendToCONTROL(key);
    1a92:	fe 01       	movw	r30, r28
    1a94:	ec 59       	subi	r30, 0x9C	; 156
    1a96:	ff 4f       	sbci	r31, 0xFF	; 255
    1a98:	80 81       	ld	r24, Z
    1a9a:	0e 94 a3 05 	call	0xb46	; 0xb46 <SendToCONTROL>
			check = UART_recieveByte();
    1a9e:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <UART_recieveByte>
    1aa2:	80 93 28 01 	sts	0x0128, r24
    1aa6:	80 e0       	ldi	r24, 0x00	; 0
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	a0 e2       	ldi	r26, 0x20	; 32
    1aac:	b1 e4       	ldi	r27, 0x41	; 65
    1aae:	8d ab       	std	Y+53, r24	; 0x35
    1ab0:	9e ab       	std	Y+54, r25	; 0x36
    1ab2:	af ab       	std	Y+55, r26	; 0x37
    1ab4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ab6:	6d a9       	ldd	r22, Y+53	; 0x35
    1ab8:	7e a9       	ldd	r23, Y+54	; 0x36
    1aba:	8f a9       	ldd	r24, Y+55	; 0x37
    1abc:	98 ad       	ldd	r25, Y+56	; 0x38
    1abe:	20 e0       	ldi	r18, 0x00	; 0
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	4a e7       	ldi	r20, 0x7A	; 122
    1ac4:	53 e4       	ldi	r21, 0x43	; 67
    1ac6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aca:	dc 01       	movw	r26, r24
    1acc:	cb 01       	movw	r24, r22
    1ace:	89 ab       	std	Y+49, r24	; 0x31
    1ad0:	9a ab       	std	Y+50, r25	; 0x32
    1ad2:	ab ab       	std	Y+51, r26	; 0x33
    1ad4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ad6:	69 a9       	ldd	r22, Y+49	; 0x31
    1ad8:	7a a9       	ldd	r23, Y+50	; 0x32
    1ada:	8b a9       	ldd	r24, Y+51	; 0x33
    1adc:	9c a9       	ldd	r25, Y+52	; 0x34
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	40 e8       	ldi	r20, 0x80	; 128
    1ae4:	5f e3       	ldi	r21, 0x3F	; 63
    1ae6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aea:	88 23       	and	r24, r24
    1aec:	2c f4       	brge	.+10     	; 0x1af8 <main+0x5c0>
		__ticks = 1;
    1aee:	81 e0       	ldi	r24, 0x01	; 1
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	98 ab       	std	Y+48, r25	; 0x30
    1af4:	8f a7       	std	Y+47, r24	; 0x2f
    1af6:	3f c0       	rjmp	.+126    	; 0x1b76 <main+0x63e>
	else if (__tmp > 65535)
    1af8:	69 a9       	ldd	r22, Y+49	; 0x31
    1afa:	7a a9       	ldd	r23, Y+50	; 0x32
    1afc:	8b a9       	ldd	r24, Y+51	; 0x33
    1afe:	9c a9       	ldd	r25, Y+52	; 0x34
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	3f ef       	ldi	r19, 0xFF	; 255
    1b04:	4f e7       	ldi	r20, 0x7F	; 127
    1b06:	57 e4       	ldi	r21, 0x47	; 71
    1b08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b0c:	18 16       	cp	r1, r24
    1b0e:	4c f5       	brge	.+82     	; 0x1b62 <main+0x62a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b10:	6d a9       	ldd	r22, Y+53	; 0x35
    1b12:	7e a9       	ldd	r23, Y+54	; 0x36
    1b14:	8f a9       	ldd	r24, Y+55	; 0x37
    1b16:	98 ad       	ldd	r25, Y+56	; 0x38
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	40 e2       	ldi	r20, 0x20	; 32
    1b1e:	51 e4       	ldi	r21, 0x41	; 65
    1b20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b24:	dc 01       	movw	r26, r24
    1b26:	cb 01       	movw	r24, r22
    1b28:	bc 01       	movw	r22, r24
    1b2a:	cd 01       	movw	r24, r26
    1b2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b30:	dc 01       	movw	r26, r24
    1b32:	cb 01       	movw	r24, r22
    1b34:	98 ab       	std	Y+48, r25	; 0x30
    1b36:	8f a7       	std	Y+47, r24	; 0x2f
    1b38:	0f c0       	rjmp	.+30     	; 0x1b58 <main+0x620>
    1b3a:	89 e1       	ldi	r24, 0x19	; 25
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	9e a7       	std	Y+46, r25	; 0x2e
    1b40:	8d a7       	std	Y+45, r24	; 0x2d
    1b42:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b44:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b46:	01 97       	sbiw	r24, 0x01	; 1
    1b48:	f1 f7       	brne	.-4      	; 0x1b46 <main+0x60e>
    1b4a:	9e a7       	std	Y+46, r25	; 0x2e
    1b4c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b4e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b50:	98 a9       	ldd	r25, Y+48	; 0x30
    1b52:	01 97       	sbiw	r24, 0x01	; 1
    1b54:	98 ab       	std	Y+48, r25	; 0x30
    1b56:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b58:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b5a:	98 a9       	ldd	r25, Y+48	; 0x30
    1b5c:	00 97       	sbiw	r24, 0x00	; 0
    1b5e:	69 f7       	brne	.-38     	; 0x1b3a <main+0x602>
    1b60:	14 c0       	rjmp	.+40     	; 0x1b8a <main+0x652>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b62:	69 a9       	ldd	r22, Y+49	; 0x31
    1b64:	7a a9       	ldd	r23, Y+50	; 0x32
    1b66:	8b a9       	ldd	r24, Y+51	; 0x33
    1b68:	9c a9       	ldd	r25, Y+52	; 0x34
    1b6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b6e:	dc 01       	movw	r26, r24
    1b70:	cb 01       	movw	r24, r22
    1b72:	98 ab       	std	Y+48, r25	; 0x30
    1b74:	8f a7       	std	Y+47, r24	; 0x2f
    1b76:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b78:	98 a9       	ldd	r25, Y+48	; 0x30
    1b7a:	9c a7       	std	Y+44, r25	; 0x2c
    1b7c:	8b a7       	std	Y+43, r24	; 0x2b
    1b7e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b80:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b82:	01 97       	sbiw	r24, 0x01	; 1
    1b84:	f1 f7       	brne	.-4      	; 0x1b82 <main+0x64a>
    1b86:	9c a7       	std	Y+44, r25	; 0x2c
    1b88:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(10);
			CheckCases(check);
    1b8a:	80 91 28 01 	lds	r24, 0x0128
    1b8e:	0e 94 a8 06 	call	0xd50	; 0xd50 <CheckCases>
    1b92:	31 cd       	rjmp	.-1438   	; 0x15f6 <main+0xbe>
			break;
		case 3:
			SendToCONTROL(key);
    1b94:	fe 01       	movw	r30, r28
    1b96:	ec 59       	subi	r30, 0x9C	; 156
    1b98:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9a:	80 81       	ld	r24, Z
    1b9c:	0e 94 a3 05 	call	0xb46	; 0xb46 <SendToCONTROL>
			check = UART_recieveByte();
    1ba0:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <UART_recieveByte>
    1ba4:	80 93 28 01 	sts	0x0128, r24
    1ba8:	80 e0       	ldi	r24, 0x00	; 0
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	a0 e2       	ldi	r26, 0x20	; 32
    1bae:	b1 e4       	ldi	r27, 0x41	; 65
    1bb0:	8f a3       	std	Y+39, r24	; 0x27
    1bb2:	98 a7       	std	Y+40, r25	; 0x28
    1bb4:	a9 a7       	std	Y+41, r26	; 0x29
    1bb6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bb8:	6f a1       	ldd	r22, Y+39	; 0x27
    1bba:	78 a5       	ldd	r23, Y+40	; 0x28
    1bbc:	89 a5       	ldd	r24, Y+41	; 0x29
    1bbe:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	4a e7       	ldi	r20, 0x7A	; 122
    1bc6:	53 e4       	ldi	r21, 0x43	; 67
    1bc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bcc:	dc 01       	movw	r26, r24
    1bce:	cb 01       	movw	r24, r22
    1bd0:	8b a3       	std	Y+35, r24	; 0x23
    1bd2:	9c a3       	std	Y+36, r25	; 0x24
    1bd4:	ad a3       	std	Y+37, r26	; 0x25
    1bd6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1bd8:	6b a1       	ldd	r22, Y+35	; 0x23
    1bda:	7c a1       	ldd	r23, Y+36	; 0x24
    1bdc:	8d a1       	ldd	r24, Y+37	; 0x25
    1bde:	9e a1       	ldd	r25, Y+38	; 0x26
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	40 e8       	ldi	r20, 0x80	; 128
    1be6:	5f e3       	ldi	r21, 0x3F	; 63
    1be8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bec:	88 23       	and	r24, r24
    1bee:	2c f4       	brge	.+10     	; 0x1bfa <main+0x6c2>
		__ticks = 1;
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	9a a3       	std	Y+34, r25	; 0x22
    1bf6:	89 a3       	std	Y+33, r24	; 0x21
    1bf8:	3f c0       	rjmp	.+126    	; 0x1c78 <main+0x740>
	else if (__tmp > 65535)
    1bfa:	6b a1       	ldd	r22, Y+35	; 0x23
    1bfc:	7c a1       	ldd	r23, Y+36	; 0x24
    1bfe:	8d a1       	ldd	r24, Y+37	; 0x25
    1c00:	9e a1       	ldd	r25, Y+38	; 0x26
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	3f ef       	ldi	r19, 0xFF	; 255
    1c06:	4f e7       	ldi	r20, 0x7F	; 127
    1c08:	57 e4       	ldi	r21, 0x47	; 71
    1c0a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c0e:	18 16       	cp	r1, r24
    1c10:	4c f5       	brge	.+82     	; 0x1c64 <main+0x72c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c12:	6f a1       	ldd	r22, Y+39	; 0x27
    1c14:	78 a5       	ldd	r23, Y+40	; 0x28
    1c16:	89 a5       	ldd	r24, Y+41	; 0x29
    1c18:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c1a:	20 e0       	ldi	r18, 0x00	; 0
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	40 e2       	ldi	r20, 0x20	; 32
    1c20:	51 e4       	ldi	r21, 0x41	; 65
    1c22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c26:	dc 01       	movw	r26, r24
    1c28:	cb 01       	movw	r24, r22
    1c2a:	bc 01       	movw	r22, r24
    1c2c:	cd 01       	movw	r24, r26
    1c2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c32:	dc 01       	movw	r26, r24
    1c34:	cb 01       	movw	r24, r22
    1c36:	9a a3       	std	Y+34, r25	; 0x22
    1c38:	89 a3       	std	Y+33, r24	; 0x21
    1c3a:	0f c0       	rjmp	.+30     	; 0x1c5a <main+0x722>
    1c3c:	89 e1       	ldi	r24, 0x19	; 25
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	98 a3       	std	Y+32, r25	; 0x20
    1c42:	8f 8f       	std	Y+31, r24	; 0x1f
    1c44:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c46:	98 a1       	ldd	r25, Y+32	; 0x20
    1c48:	01 97       	sbiw	r24, 0x01	; 1
    1c4a:	f1 f7       	brne	.-4      	; 0x1c48 <main+0x710>
    1c4c:	98 a3       	std	Y+32, r25	; 0x20
    1c4e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c50:	89 a1       	ldd	r24, Y+33	; 0x21
    1c52:	9a a1       	ldd	r25, Y+34	; 0x22
    1c54:	01 97       	sbiw	r24, 0x01	; 1
    1c56:	9a a3       	std	Y+34, r25	; 0x22
    1c58:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c5a:	89 a1       	ldd	r24, Y+33	; 0x21
    1c5c:	9a a1       	ldd	r25, Y+34	; 0x22
    1c5e:	00 97       	sbiw	r24, 0x00	; 0
    1c60:	69 f7       	brne	.-38     	; 0x1c3c <main+0x704>
    1c62:	14 c0       	rjmp	.+40     	; 0x1c8c <main+0x754>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c64:	6b a1       	ldd	r22, Y+35	; 0x23
    1c66:	7c a1       	ldd	r23, Y+36	; 0x24
    1c68:	8d a1       	ldd	r24, Y+37	; 0x25
    1c6a:	9e a1       	ldd	r25, Y+38	; 0x26
    1c6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c70:	dc 01       	movw	r26, r24
    1c72:	cb 01       	movw	r24, r22
    1c74:	9a a3       	std	Y+34, r25	; 0x22
    1c76:	89 a3       	std	Y+33, r24	; 0x21
    1c78:	89 a1       	ldd	r24, Y+33	; 0x21
    1c7a:	9a a1       	ldd	r25, Y+34	; 0x22
    1c7c:	9e 8f       	std	Y+30, r25	; 0x1e
    1c7e:	8d 8f       	std	Y+29, r24	; 0x1d
    1c80:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c82:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c84:	01 97       	sbiw	r24, 0x01	; 1
    1c86:	f1 f7       	brne	.-4      	; 0x1c84 <main+0x74c>
    1c88:	9e 8f       	std	Y+30, r25	; 0x1e
    1c8a:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(10);
			CheckCases(check);
    1c8c:	80 91 28 01 	lds	r24, 0x0128
    1c90:	0e 94 a8 06 	call	0xd50	; 0xd50 <CheckCases>
    1c94:	b0 cc       	rjmp	.-1696   	; 0x15f6 <main+0xbe>
			break;
		case 4:
			SendToCONTROL(key);
    1c96:	fe 01       	movw	r30, r28
    1c98:	ec 59       	subi	r30, 0x9C	; 156
    1c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9c:	80 81       	ld	r24, Z
    1c9e:	0e 94 a3 05 	call	0xb46	; 0xb46 <SendToCONTROL>
			check = UART_recieveByte();
    1ca2:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <UART_recieveByte>
    1ca6:	80 93 28 01 	sts	0x0128, r24
    1caa:	80 e0       	ldi	r24, 0x00	; 0
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	a0 e2       	ldi	r26, 0x20	; 32
    1cb0:	b1 e4       	ldi	r27, 0x41	; 65
    1cb2:	89 8f       	std	Y+25, r24	; 0x19
    1cb4:	9a 8f       	std	Y+26, r25	; 0x1a
    1cb6:	ab 8f       	std	Y+27, r26	; 0x1b
    1cb8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cba:	69 8d       	ldd	r22, Y+25	; 0x19
    1cbc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cbe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cc0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	4a e7       	ldi	r20, 0x7A	; 122
    1cc8:	53 e4       	ldi	r21, 0x43	; 67
    1cca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cce:	dc 01       	movw	r26, r24
    1cd0:	cb 01       	movw	r24, r22
    1cd2:	8d 8b       	std	Y+21, r24	; 0x15
    1cd4:	9e 8b       	std	Y+22, r25	; 0x16
    1cd6:	af 8b       	std	Y+23, r26	; 0x17
    1cd8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cda:	6d 89       	ldd	r22, Y+21	; 0x15
    1cdc:	7e 89       	ldd	r23, Y+22	; 0x16
    1cde:	8f 89       	ldd	r24, Y+23	; 0x17
    1ce0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ce2:	20 e0       	ldi	r18, 0x00	; 0
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	40 e8       	ldi	r20, 0x80	; 128
    1ce8:	5f e3       	ldi	r21, 0x3F	; 63
    1cea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cee:	88 23       	and	r24, r24
    1cf0:	2c f4       	brge	.+10     	; 0x1cfc <main+0x7c4>
		__ticks = 1;
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	9c 8b       	std	Y+20, r25	; 0x14
    1cf8:	8b 8b       	std	Y+19, r24	; 0x13
    1cfa:	3f c0       	rjmp	.+126    	; 0x1d7a <main+0x842>
	else if (__tmp > 65535)
    1cfc:	6d 89       	ldd	r22, Y+21	; 0x15
    1cfe:	7e 89       	ldd	r23, Y+22	; 0x16
    1d00:	8f 89       	ldd	r24, Y+23	; 0x17
    1d02:	98 8d       	ldd	r25, Y+24	; 0x18
    1d04:	20 e0       	ldi	r18, 0x00	; 0
    1d06:	3f ef       	ldi	r19, 0xFF	; 255
    1d08:	4f e7       	ldi	r20, 0x7F	; 127
    1d0a:	57 e4       	ldi	r21, 0x47	; 71
    1d0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d10:	18 16       	cp	r1, r24
    1d12:	4c f5       	brge	.+82     	; 0x1d66 <main+0x82e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d14:	69 8d       	ldd	r22, Y+25	; 0x19
    1d16:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d18:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d1a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	40 e2       	ldi	r20, 0x20	; 32
    1d22:	51 e4       	ldi	r21, 0x41	; 65
    1d24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d28:	dc 01       	movw	r26, r24
    1d2a:	cb 01       	movw	r24, r22
    1d2c:	bc 01       	movw	r22, r24
    1d2e:	cd 01       	movw	r24, r26
    1d30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d34:	dc 01       	movw	r26, r24
    1d36:	cb 01       	movw	r24, r22
    1d38:	9c 8b       	std	Y+20, r25	; 0x14
    1d3a:	8b 8b       	std	Y+19, r24	; 0x13
    1d3c:	0f c0       	rjmp	.+30     	; 0x1d5c <main+0x824>
    1d3e:	89 e1       	ldi	r24, 0x19	; 25
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	9a 8b       	std	Y+18, r25	; 0x12
    1d44:	89 8b       	std	Y+17, r24	; 0x11
    1d46:	89 89       	ldd	r24, Y+17	; 0x11
    1d48:	9a 89       	ldd	r25, Y+18	; 0x12
    1d4a:	01 97       	sbiw	r24, 0x01	; 1
    1d4c:	f1 f7       	brne	.-4      	; 0x1d4a <main+0x812>
    1d4e:	9a 8b       	std	Y+18, r25	; 0x12
    1d50:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d52:	8b 89       	ldd	r24, Y+19	; 0x13
    1d54:	9c 89       	ldd	r25, Y+20	; 0x14
    1d56:	01 97       	sbiw	r24, 0x01	; 1
    1d58:	9c 8b       	std	Y+20, r25	; 0x14
    1d5a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d5c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d5e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d60:	00 97       	sbiw	r24, 0x00	; 0
    1d62:	69 f7       	brne	.-38     	; 0x1d3e <main+0x806>
    1d64:	14 c0       	rjmp	.+40     	; 0x1d8e <main+0x856>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d66:	6d 89       	ldd	r22, Y+21	; 0x15
    1d68:	7e 89       	ldd	r23, Y+22	; 0x16
    1d6a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d6c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d72:	dc 01       	movw	r26, r24
    1d74:	cb 01       	movw	r24, r22
    1d76:	9c 8b       	std	Y+20, r25	; 0x14
    1d78:	8b 8b       	std	Y+19, r24	; 0x13
    1d7a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d7c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d7e:	98 8b       	std	Y+16, r25	; 0x10
    1d80:	8f 87       	std	Y+15, r24	; 0x0f
    1d82:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d84:	98 89       	ldd	r25, Y+16	; 0x10
    1d86:	01 97       	sbiw	r24, 0x01	; 1
    1d88:	f1 f7       	brne	.-4      	; 0x1d86 <main+0x84e>
    1d8a:	98 8b       	std	Y+16, r25	; 0x10
    1d8c:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(10);
			CheckCases(check);
    1d8e:	80 91 28 01 	lds	r24, 0x0128
    1d92:	0e 94 a8 06 	call	0xd50	; 0xd50 <CheckCases>
    1d96:	2f cc       	rjmp	.-1954   	; 0x15f6 <main+0xbe>
			break;

		case 5:
			SendToCONTROL(key);
    1d98:	fe 01       	movw	r30, r28
    1d9a:	ec 59       	subi	r30, 0x9C	; 156
    1d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9e:	80 81       	ld	r24, Z
    1da0:	0e 94 a3 05 	call	0xb46	; 0xb46 <SendToCONTROL>
			check = UART_recieveByte();
    1da4:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <UART_recieveByte>
    1da8:	80 93 28 01 	sts	0x0128, r24
    1dac:	80 e0       	ldi	r24, 0x00	; 0
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	a0 e2       	ldi	r26, 0x20	; 32
    1db2:	b1 e4       	ldi	r27, 0x41	; 65
    1db4:	8b 87       	std	Y+11, r24	; 0x0b
    1db6:	9c 87       	std	Y+12, r25	; 0x0c
    1db8:	ad 87       	std	Y+13, r26	; 0x0d
    1dba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	4a e7       	ldi	r20, 0x7A	; 122
    1dca:	53 e4       	ldi	r21, 0x43	; 67
    1dcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd0:	dc 01       	movw	r26, r24
    1dd2:	cb 01       	movw	r24, r22
    1dd4:	8f 83       	std	Y+7, r24	; 0x07
    1dd6:	98 87       	std	Y+8, r25	; 0x08
    1dd8:	a9 87       	std	Y+9, r26	; 0x09
    1dda:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ddc:	6f 81       	ldd	r22, Y+7	; 0x07
    1dde:	78 85       	ldd	r23, Y+8	; 0x08
    1de0:	89 85       	ldd	r24, Y+9	; 0x09
    1de2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de4:	20 e0       	ldi	r18, 0x00	; 0
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	40 e8       	ldi	r20, 0x80	; 128
    1dea:	5f e3       	ldi	r21, 0x3F	; 63
    1dec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1df0:	88 23       	and	r24, r24
    1df2:	2c f4       	brge	.+10     	; 0x1dfe <main+0x8c6>
		__ticks = 1;
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	9e 83       	std	Y+6, r25	; 0x06
    1dfa:	8d 83       	std	Y+5, r24	; 0x05
    1dfc:	3f c0       	rjmp	.+126    	; 0x1e7c <main+0x944>
	else if (__tmp > 65535)
    1dfe:	6f 81       	ldd	r22, Y+7	; 0x07
    1e00:	78 85       	ldd	r23, Y+8	; 0x08
    1e02:	89 85       	ldd	r24, Y+9	; 0x09
    1e04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e06:	20 e0       	ldi	r18, 0x00	; 0
    1e08:	3f ef       	ldi	r19, 0xFF	; 255
    1e0a:	4f e7       	ldi	r20, 0x7F	; 127
    1e0c:	57 e4       	ldi	r21, 0x47	; 71
    1e0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e12:	18 16       	cp	r1, r24
    1e14:	4c f5       	brge	.+82     	; 0x1e68 <main+0x930>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e16:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e18:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e1e:	20 e0       	ldi	r18, 0x00	; 0
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	40 e2       	ldi	r20, 0x20	; 32
    1e24:	51 e4       	ldi	r21, 0x41	; 65
    1e26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	bc 01       	movw	r22, r24
    1e30:	cd 01       	movw	r24, r26
    1e32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e36:	dc 01       	movw	r26, r24
    1e38:	cb 01       	movw	r24, r22
    1e3a:	9e 83       	std	Y+6, r25	; 0x06
    1e3c:	8d 83       	std	Y+5, r24	; 0x05
    1e3e:	0f c0       	rjmp	.+30     	; 0x1e5e <main+0x926>
    1e40:	89 e1       	ldi	r24, 0x19	; 25
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	9c 83       	std	Y+4, r25	; 0x04
    1e46:	8b 83       	std	Y+3, r24	; 0x03
    1e48:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e4c:	01 97       	sbiw	r24, 0x01	; 1
    1e4e:	f1 f7       	brne	.-4      	; 0x1e4c <main+0x914>
    1e50:	9c 83       	std	Y+4, r25	; 0x04
    1e52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e54:	8d 81       	ldd	r24, Y+5	; 0x05
    1e56:	9e 81       	ldd	r25, Y+6	; 0x06
    1e58:	01 97       	sbiw	r24, 0x01	; 1
    1e5a:	9e 83       	std	Y+6, r25	; 0x06
    1e5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e60:	9e 81       	ldd	r25, Y+6	; 0x06
    1e62:	00 97       	sbiw	r24, 0x00	; 0
    1e64:	69 f7       	brne	.-38     	; 0x1e40 <main+0x908>
    1e66:	14 c0       	rjmp	.+40     	; 0x1e90 <main+0x958>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e68:	6f 81       	ldd	r22, Y+7	; 0x07
    1e6a:	78 85       	ldd	r23, Y+8	; 0x08
    1e6c:	89 85       	ldd	r24, Y+9	; 0x09
    1e6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e74:	dc 01       	movw	r26, r24
    1e76:	cb 01       	movw	r24, r22
    1e78:	9e 83       	std	Y+6, r25	; 0x06
    1e7a:	8d 83       	std	Y+5, r24	; 0x05
    1e7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e80:	9a 83       	std	Y+2, r25	; 0x02
    1e82:	89 83       	std	Y+1, r24	; 0x01
    1e84:	89 81       	ldd	r24, Y+1	; 0x01
    1e86:	9a 81       	ldd	r25, Y+2	; 0x02
    1e88:	01 97       	sbiw	r24, 0x01	; 1
    1e8a:	f1 f7       	brne	.-4      	; 0x1e88 <main+0x950>
    1e8c:	9a 83       	std	Y+2, r25	; 0x02
    1e8e:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(10);
			CheckCases(check);
    1e90:	80 91 28 01 	lds	r24, 0x0128
    1e94:	0e 94 a8 06 	call	0xd50	; 0xd50 <CheckCases>
    1e98:	ae cb       	rjmp	.-2212   	; 0x15f6 <main+0xbe>

00001e9a <__vector_19>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_COMP_vect)
{
    1e9a:	1f 92       	push	r1
    1e9c:	0f 92       	push	r0
    1e9e:	0f b6       	in	r0, 0x3f	; 63
    1ea0:	0f 92       	push	r0
    1ea2:	11 24       	eor	r1, r1
    1ea4:	2f 93       	push	r18
    1ea6:	3f 93       	push	r19
    1ea8:	4f 93       	push	r20
    1eaa:	5f 93       	push	r21
    1eac:	6f 93       	push	r22
    1eae:	7f 93       	push	r23
    1eb0:	8f 93       	push	r24
    1eb2:	9f 93       	push	r25
    1eb4:	af 93       	push	r26
    1eb6:	bf 93       	push	r27
    1eb8:	ef 93       	push	r30
    1eba:	ff 93       	push	r31
    1ebc:	df 93       	push	r29
    1ebe:	cf 93       	push	r28
    1ec0:	cd b7       	in	r28, 0x3d	; 61
    1ec2:	de b7       	in	r29, 0x3e	; 62

	if(g_callBackPtr != NULL_PTR)
    1ec4:	80 91 29 01 	lds	r24, 0x0129
    1ec8:	90 91 2a 01 	lds	r25, 0x012A
    1ecc:	00 97       	sbiw	r24, 0x00	; 0
    1ece:	29 f0       	breq	.+10     	; 0x1eda <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1ed0:	e0 91 29 01 	lds	r30, 0x0129
    1ed4:	f0 91 2a 01 	lds	r31, 0x012A
    1ed8:	09 95       	icall
	}
}
    1eda:	cf 91       	pop	r28
    1edc:	df 91       	pop	r29
    1ede:	ff 91       	pop	r31
    1ee0:	ef 91       	pop	r30
    1ee2:	bf 91       	pop	r27
    1ee4:	af 91       	pop	r26
    1ee6:	9f 91       	pop	r25
    1ee8:	8f 91       	pop	r24
    1eea:	7f 91       	pop	r23
    1eec:	6f 91       	pop	r22
    1eee:	5f 91       	pop	r21
    1ef0:	4f 91       	pop	r20
    1ef2:	3f 91       	pop	r19
    1ef4:	2f 91       	pop	r18
    1ef6:	0f 90       	pop	r0
    1ef8:	0f be       	out	0x3f, r0	; 63
    1efa:	0f 90       	pop	r0
    1efc:	1f 90       	pop	r1
    1efe:	18 95       	reti

00001f00 <__vector_9>:
ISR(TIMER0_OVF_vect)
{
    1f00:	1f 92       	push	r1
    1f02:	0f 92       	push	r0
    1f04:	0f b6       	in	r0, 0x3f	; 63
    1f06:	0f 92       	push	r0
    1f08:	11 24       	eor	r1, r1
    1f0a:	2f 93       	push	r18
    1f0c:	3f 93       	push	r19
    1f0e:	4f 93       	push	r20
    1f10:	5f 93       	push	r21
    1f12:	6f 93       	push	r22
    1f14:	7f 93       	push	r23
    1f16:	8f 93       	push	r24
    1f18:	9f 93       	push	r25
    1f1a:	af 93       	push	r26
    1f1c:	bf 93       	push	r27
    1f1e:	ef 93       	push	r30
    1f20:	ff 93       	push	r31
    1f22:	df 93       	push	r29
    1f24:	cf 93       	push	r28
    1f26:	cd b7       	in	r28, 0x3d	; 61
    1f28:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1f2a:	80 91 29 01 	lds	r24, 0x0129
    1f2e:	90 91 2a 01 	lds	r25, 0x012A
    1f32:	00 97       	sbiw	r24, 0x00	; 0
    1f34:	29 f0       	breq	.+10     	; 0x1f40 <__vector_9+0x40>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1f36:	e0 91 29 01 	lds	r30, 0x0129
    1f3a:	f0 91 2a 01 	lds	r31, 0x012A
    1f3e:	09 95       	icall
		}
}
    1f40:	cf 91       	pop	r28
    1f42:	df 91       	pop	r29
    1f44:	ff 91       	pop	r31
    1f46:	ef 91       	pop	r30
    1f48:	bf 91       	pop	r27
    1f4a:	af 91       	pop	r26
    1f4c:	9f 91       	pop	r25
    1f4e:	8f 91       	pop	r24
    1f50:	7f 91       	pop	r23
    1f52:	6f 91       	pop	r22
    1f54:	5f 91       	pop	r21
    1f56:	4f 91       	pop	r20
    1f58:	3f 91       	pop	r19
    1f5a:	2f 91       	pop	r18
    1f5c:	0f 90       	pop	r0
    1f5e:	0f be       	out	0x3f, r0	; 63
    1f60:	0f 90       	pop	r0
    1f62:	1f 90       	pop	r1
    1f64:	18 95       	reti

00001f66 <Timer_init>:
/*******************************************************************************
 *                       Timer Functions                                       *
 *******************************************************************************/

void Timer_init(const Timers *Config_PTR)
{
    1f66:	df 93       	push	r29
    1f68:	cf 93       	push	r28
    1f6a:	00 d0       	rcall	.+0      	; 0x1f6c <Timer_init+0x6>
    1f6c:	cd b7       	in	r28, 0x3d	; 61
    1f6e:	de b7       	in	r29, 0x3e	; 62
    1f70:	9a 83       	std	Y+2, r25	; 0x02
    1f72:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = Config_PTR->InitValueTimer;    // Set Timer initial value to 0
    1f74:	a2 e5       	ldi	r26, 0x52	; 82
    1f76:	b0 e0       	ldi	r27, 0x00	; 0
    1f78:	e9 81       	ldd	r30, Y+1	; 0x01
    1f7a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f7c:	80 81       	ld	r24, Z
    1f7e:	8c 93       	st	X, r24


	if(Config_PTR->TimerMode == Compare && Config_PTR->TimerID == Timer0) //CompareMode
    1f80:	e9 81       	ldd	r30, Y+1	; 0x01
    1f82:	fa 81       	ldd	r31, Y+2	; 0x02
    1f84:	82 81       	ldd	r24, Z+2	; 0x02
    1f86:	81 30       	cpi	r24, 0x01	; 1
    1f88:	99 f4       	brne	.+38     	; 0x1fb0 <Timer_init+0x4a>
    1f8a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f8c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f8e:	84 81       	ldd	r24, Z+4	; 0x04
    1f90:	88 23       	and	r24, r24
    1f92:	71 f4       	brne	.+28     	; 0x1fb0 <Timer_init+0x4a>
	{
		OCR0  = Config_PTR->CompareValueTimer; // Set Compare Value
    1f94:	ac e5       	ldi	r26, 0x5C	; 92
    1f96:	b0 e0       	ldi	r27, 0x00	; 0
    1f98:	e9 81       	ldd	r30, Y+1	; 0x01
    1f9a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f9c:	81 81       	ldd	r24, Z+1	; 0x01
    1f9e:	8c 93       	st	X, r24
		TIMSK |= (1<<OCIE0); // Enable Timer0 Compare Interrupt
    1fa0:	a9 e5       	ldi	r26, 0x59	; 89
    1fa2:	b0 e0       	ldi	r27, 0x00	; 0
    1fa4:	e9 e5       	ldi	r30, 0x59	; 89
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	80 81       	ld	r24, Z
    1faa:	82 60       	ori	r24, 0x02	; 2
    1fac:	8c 93       	st	X, r24
    1fae:	11 c0       	rjmp	.+34     	; 0x1fd2 <Timer_init+0x6c>

	}

	else if(Config_PTR->TimerMode == Normal && Config_PTR->TimerID == Timer0)//NormalMode
    1fb0:	e9 81       	ldd	r30, Y+1	; 0x01
    1fb2:	fa 81       	ldd	r31, Y+2	; 0x02
    1fb4:	82 81       	ldd	r24, Z+2	; 0x02
    1fb6:	88 23       	and	r24, r24
    1fb8:	61 f4       	brne	.+24     	; 0x1fd2 <Timer_init+0x6c>
    1fba:	e9 81       	ldd	r30, Y+1	; 0x01
    1fbc:	fa 81       	ldd	r31, Y+2	; 0x02
    1fbe:	84 81       	ldd	r24, Z+4	; 0x04
    1fc0:	88 23       	and	r24, r24
    1fc2:	39 f4       	brne	.+14     	; 0x1fd2 <Timer_init+0x6c>
	{


		TIMSK |= (1<<TOIE0);
    1fc4:	a9 e5       	ldi	r26, 0x59	; 89
    1fc6:	b0 e0       	ldi	r27, 0x00	; 0
    1fc8:	e9 e5       	ldi	r30, 0x59	; 89
    1fca:	f0 e0       	ldi	r31, 0x00	; 0
    1fcc:	80 81       	ld	r24, Z
    1fce:	81 60       	ori	r24, 0x01	; 1
    1fd0:	8c 93       	st	X, r24
	 * 3. Config_PTR->TimerMode = 1 : CompareMode WGM01=1 & WGM00=0
	 * 4. No need for OC0 in this example so COM00=0 & COM01=0
	 * 5. Set PreScaleValue CS02,CS01,CS00
	 */
	//TCCR0 = (1<<FOC0) | (1<<WGM01) | (1<<CS02) | (1<<CS00);
	TCCR0 = (1<<FOC0) | ((Config_PTR->TimerMode & (0x01)) << WGM01) | (Config_PTR->TimerPreScaler << CS00);
    1fd2:	a3 e5       	ldi	r26, 0x53	; 83
    1fd4:	b0 e0       	ldi	r27, 0x00	; 0
    1fd6:	e9 81       	ldd	r30, Y+1	; 0x01
    1fd8:	fa 81       	ldd	r31, Y+2	; 0x02
    1fda:	82 81       	ldd	r24, Z+2	; 0x02
    1fdc:	88 2f       	mov	r24, r24
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	81 70       	andi	r24, 0x01	; 1
    1fe2:	90 70       	andi	r25, 0x00	; 0
    1fe4:	88 0f       	add	r24, r24
    1fe6:	99 1f       	adc	r25, r25
    1fe8:	88 0f       	add	r24, r24
    1fea:	99 1f       	adc	r25, r25
    1fec:	88 0f       	add	r24, r24
    1fee:	99 1f       	adc	r25, r25
    1ff0:	98 2f       	mov	r25, r24
    1ff2:	90 68       	ori	r25, 0x80	; 128
    1ff4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ff6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ff8:	83 81       	ldd	r24, Z+3	; 0x03
    1ffa:	89 2b       	or	r24, r25
    1ffc:	8c 93       	st	X, r24

}
    1ffe:	0f 90       	pop	r0
    2000:	0f 90       	pop	r0
    2002:	cf 91       	pop	r28
    2004:	df 91       	pop	r29
    2006:	08 95       	ret

00002008 <Timer_setCallBack>:

void Timer_setCallBack(void(*a_ptr)(void))
{
    2008:	df 93       	push	r29
    200a:	cf 93       	push	r28
    200c:	00 d0       	rcall	.+0      	; 0x200e <Timer_setCallBack+0x6>
    200e:	cd b7       	in	r28, 0x3d	; 61
    2010:	de b7       	in	r29, 0x3e	; 62
    2012:	9a 83       	std	Y+2, r25	; 0x02
    2014:	89 83       	std	Y+1, r24	; 0x01

	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    2016:	89 81       	ldd	r24, Y+1	; 0x01
    2018:	9a 81       	ldd	r25, Y+2	; 0x02
    201a:	90 93 2a 01 	sts	0x012A, r25
    201e:	80 93 29 01 	sts	0x0129, r24
}
    2022:	0f 90       	pop	r0
    2024:	0f 90       	pop	r0
    2026:	cf 91       	pop	r28
    2028:	df 91       	pop	r29
    202a:	08 95       	ret

0000202c <Timer_DeInit>:


void Timer_DeInit(const Timers *Config_PTR)
{
    202c:	df 93       	push	r29
    202e:	cf 93       	push	r28
    2030:	00 d0       	rcall	.+0      	; 0x2032 <Timer_DeInit+0x6>
    2032:	cd b7       	in	r28, 0x3d	; 61
    2034:	de b7       	in	r29, 0x3e	; 62
    2036:	9a 83       	std	Y+2, r25	; 0x02
    2038:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0;
    203a:	e2 e5       	ldi	r30, 0x52	; 82
    203c:	f0 e0       	ldi	r31, 0x00	; 0
    203e:	10 82       	st	Z, r1
	OCR0  = 0;
    2040:	ec e5       	ldi	r30, 0x5C	; 92
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	10 82       	st	Z, r1
	if(Config_PTR->TimerID == Timer0)
    2046:	e9 81       	ldd	r30, Y+1	; 0x01
    2048:	fa 81       	ldd	r31, Y+2	; 0x02
    204a:	84 81       	ldd	r24, Z+4	; 0x04
    204c:	88 23       	and	r24, r24
    204e:	39 f4       	brne	.+14     	; 0x205e <Timer_DeInit+0x32>
	{
		TIMSK &= 0xFC; //DeInit Compare/OverFlow Modes in Timer0 OCIE0,TOIE0
    2050:	a9 e5       	ldi	r26, 0x59	; 89
    2052:	b0 e0       	ldi	r27, 0x00	; 0
    2054:	e9 e5       	ldi	r30, 0x59	; 89
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	80 81       	ld	r24, Z
    205a:	8c 7f       	andi	r24, 0xFC	; 252
    205c:	8c 93       	st	X, r24
	}
	TCCR0 = 0 ;
    205e:	e3 e5       	ldi	r30, 0x53	; 83
    2060:	f0 e0       	ldi	r31, 0x00	; 0
    2062:	10 82       	st	Z, r1

}
    2064:	0f 90       	pop	r0
    2066:	0f 90       	pop	r0
    2068:	cf 91       	pop	r28
    206a:	df 91       	pop	r29
    206c:	08 95       	ret

0000206e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    206e:	df 93       	push	r29
    2070:	cf 93       	push	r28
    2072:	00 d0       	rcall	.+0      	; 0x2074 <GPIO_setupPinDirection+0x6>
    2074:	00 d0       	rcall	.+0      	; 0x2076 <GPIO_setupPinDirection+0x8>
    2076:	0f 92       	push	r0
    2078:	cd b7       	in	r28, 0x3d	; 61
    207a:	de b7       	in	r29, 0x3e	; 62
    207c:	89 83       	std	Y+1, r24	; 0x01
    207e:	6a 83       	std	Y+2, r22	; 0x02
    2080:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2082:	8a 81       	ldd	r24, Y+2	; 0x02
    2084:	88 30       	cpi	r24, 0x08	; 8
    2086:	08 f0       	brcs	.+2      	; 0x208a <GPIO_setupPinDirection+0x1c>
    2088:	d5 c0       	rjmp	.+426    	; 0x2234 <GPIO_setupPinDirection+0x1c6>
    208a:	89 81       	ldd	r24, Y+1	; 0x01
    208c:	84 30       	cpi	r24, 0x04	; 4
    208e:	08 f0       	brcs	.+2      	; 0x2092 <GPIO_setupPinDirection+0x24>
    2090:	d1 c0       	rjmp	.+418    	; 0x2234 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    2092:	89 81       	ldd	r24, Y+1	; 0x01
    2094:	28 2f       	mov	r18, r24
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	3d 83       	std	Y+5, r19	; 0x05
    209a:	2c 83       	std	Y+4, r18	; 0x04
    209c:	8c 81       	ldd	r24, Y+4	; 0x04
    209e:	9d 81       	ldd	r25, Y+5	; 0x05
    20a0:	81 30       	cpi	r24, 0x01	; 1
    20a2:	91 05       	cpc	r25, r1
    20a4:	09 f4       	brne	.+2      	; 0x20a8 <GPIO_setupPinDirection+0x3a>
    20a6:	43 c0       	rjmp	.+134    	; 0x212e <GPIO_setupPinDirection+0xc0>
    20a8:	2c 81       	ldd	r18, Y+4	; 0x04
    20aa:	3d 81       	ldd	r19, Y+5	; 0x05
    20ac:	22 30       	cpi	r18, 0x02	; 2
    20ae:	31 05       	cpc	r19, r1
    20b0:	2c f4       	brge	.+10     	; 0x20bc <GPIO_setupPinDirection+0x4e>
    20b2:	8c 81       	ldd	r24, Y+4	; 0x04
    20b4:	9d 81       	ldd	r25, Y+5	; 0x05
    20b6:	00 97       	sbiw	r24, 0x00	; 0
    20b8:	71 f0       	breq	.+28     	; 0x20d6 <GPIO_setupPinDirection+0x68>
    20ba:	bc c0       	rjmp	.+376    	; 0x2234 <GPIO_setupPinDirection+0x1c6>
    20bc:	2c 81       	ldd	r18, Y+4	; 0x04
    20be:	3d 81       	ldd	r19, Y+5	; 0x05
    20c0:	22 30       	cpi	r18, 0x02	; 2
    20c2:	31 05       	cpc	r19, r1
    20c4:	09 f4       	brne	.+2      	; 0x20c8 <GPIO_setupPinDirection+0x5a>
    20c6:	5f c0       	rjmp	.+190    	; 0x2186 <GPIO_setupPinDirection+0x118>
    20c8:	8c 81       	ldd	r24, Y+4	; 0x04
    20ca:	9d 81       	ldd	r25, Y+5	; 0x05
    20cc:	83 30       	cpi	r24, 0x03	; 3
    20ce:	91 05       	cpc	r25, r1
    20d0:	09 f4       	brne	.+2      	; 0x20d4 <GPIO_setupPinDirection+0x66>
    20d2:	85 c0       	rjmp	.+266    	; 0x21de <GPIO_setupPinDirection+0x170>
    20d4:	af c0       	rjmp	.+350    	; 0x2234 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    20d6:	8b 81       	ldd	r24, Y+3	; 0x03
    20d8:	81 30       	cpi	r24, 0x01	; 1
    20da:	a1 f4       	brne	.+40     	; 0x2104 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    20dc:	aa e3       	ldi	r26, 0x3A	; 58
    20de:	b0 e0       	ldi	r27, 0x00	; 0
    20e0:	ea e3       	ldi	r30, 0x3A	; 58
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	80 81       	ld	r24, Z
    20e6:	48 2f       	mov	r20, r24
    20e8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ea:	28 2f       	mov	r18, r24
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	81 e0       	ldi	r24, 0x01	; 1
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	02 2e       	mov	r0, r18
    20f4:	02 c0       	rjmp	.+4      	; 0x20fa <GPIO_setupPinDirection+0x8c>
    20f6:	88 0f       	add	r24, r24
    20f8:	99 1f       	adc	r25, r25
    20fa:	0a 94       	dec	r0
    20fc:	e2 f7       	brpl	.-8      	; 0x20f6 <GPIO_setupPinDirection+0x88>
    20fe:	84 2b       	or	r24, r20
    2100:	8c 93       	st	X, r24
    2102:	98 c0       	rjmp	.+304    	; 0x2234 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    2104:	aa e3       	ldi	r26, 0x3A	; 58
    2106:	b0 e0       	ldi	r27, 0x00	; 0
    2108:	ea e3       	ldi	r30, 0x3A	; 58
    210a:	f0 e0       	ldi	r31, 0x00	; 0
    210c:	80 81       	ld	r24, Z
    210e:	48 2f       	mov	r20, r24
    2110:	8a 81       	ldd	r24, Y+2	; 0x02
    2112:	28 2f       	mov	r18, r24
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	81 e0       	ldi	r24, 0x01	; 1
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	02 2e       	mov	r0, r18
    211c:	02 c0       	rjmp	.+4      	; 0x2122 <GPIO_setupPinDirection+0xb4>
    211e:	88 0f       	add	r24, r24
    2120:	99 1f       	adc	r25, r25
    2122:	0a 94       	dec	r0
    2124:	e2 f7       	brpl	.-8      	; 0x211e <GPIO_setupPinDirection+0xb0>
    2126:	80 95       	com	r24
    2128:	84 23       	and	r24, r20
    212a:	8c 93       	st	X, r24
    212c:	83 c0       	rjmp	.+262    	; 0x2234 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    212e:	8b 81       	ldd	r24, Y+3	; 0x03
    2130:	81 30       	cpi	r24, 0x01	; 1
    2132:	a1 f4       	brne	.+40     	; 0x215c <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    2134:	a7 e3       	ldi	r26, 0x37	; 55
    2136:	b0 e0       	ldi	r27, 0x00	; 0
    2138:	e7 e3       	ldi	r30, 0x37	; 55
    213a:	f0 e0       	ldi	r31, 0x00	; 0
    213c:	80 81       	ld	r24, Z
    213e:	48 2f       	mov	r20, r24
    2140:	8a 81       	ldd	r24, Y+2	; 0x02
    2142:	28 2f       	mov	r18, r24
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	02 2e       	mov	r0, r18
    214c:	02 c0       	rjmp	.+4      	; 0x2152 <GPIO_setupPinDirection+0xe4>
    214e:	88 0f       	add	r24, r24
    2150:	99 1f       	adc	r25, r25
    2152:	0a 94       	dec	r0
    2154:	e2 f7       	brpl	.-8      	; 0x214e <GPIO_setupPinDirection+0xe0>
    2156:	84 2b       	or	r24, r20
    2158:	8c 93       	st	X, r24
    215a:	6c c0       	rjmp	.+216    	; 0x2234 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    215c:	a7 e3       	ldi	r26, 0x37	; 55
    215e:	b0 e0       	ldi	r27, 0x00	; 0
    2160:	e7 e3       	ldi	r30, 0x37	; 55
    2162:	f0 e0       	ldi	r31, 0x00	; 0
    2164:	80 81       	ld	r24, Z
    2166:	48 2f       	mov	r20, r24
    2168:	8a 81       	ldd	r24, Y+2	; 0x02
    216a:	28 2f       	mov	r18, r24
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	02 2e       	mov	r0, r18
    2174:	02 c0       	rjmp	.+4      	; 0x217a <GPIO_setupPinDirection+0x10c>
    2176:	88 0f       	add	r24, r24
    2178:	99 1f       	adc	r25, r25
    217a:	0a 94       	dec	r0
    217c:	e2 f7       	brpl	.-8      	; 0x2176 <GPIO_setupPinDirection+0x108>
    217e:	80 95       	com	r24
    2180:	84 23       	and	r24, r20
    2182:	8c 93       	st	X, r24
    2184:	57 c0       	rjmp	.+174    	; 0x2234 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    2186:	8b 81       	ldd	r24, Y+3	; 0x03
    2188:	81 30       	cpi	r24, 0x01	; 1
    218a:	a1 f4       	brne	.+40     	; 0x21b4 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    218c:	a4 e3       	ldi	r26, 0x34	; 52
    218e:	b0 e0       	ldi	r27, 0x00	; 0
    2190:	e4 e3       	ldi	r30, 0x34	; 52
    2192:	f0 e0       	ldi	r31, 0x00	; 0
    2194:	80 81       	ld	r24, Z
    2196:	48 2f       	mov	r20, r24
    2198:	8a 81       	ldd	r24, Y+2	; 0x02
    219a:	28 2f       	mov	r18, r24
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	81 e0       	ldi	r24, 0x01	; 1
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	02 2e       	mov	r0, r18
    21a4:	02 c0       	rjmp	.+4      	; 0x21aa <GPIO_setupPinDirection+0x13c>
    21a6:	88 0f       	add	r24, r24
    21a8:	99 1f       	adc	r25, r25
    21aa:	0a 94       	dec	r0
    21ac:	e2 f7       	brpl	.-8      	; 0x21a6 <GPIO_setupPinDirection+0x138>
    21ae:	84 2b       	or	r24, r20
    21b0:	8c 93       	st	X, r24
    21b2:	40 c0       	rjmp	.+128    	; 0x2234 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    21b4:	a4 e3       	ldi	r26, 0x34	; 52
    21b6:	b0 e0       	ldi	r27, 0x00	; 0
    21b8:	e4 e3       	ldi	r30, 0x34	; 52
    21ba:	f0 e0       	ldi	r31, 0x00	; 0
    21bc:	80 81       	ld	r24, Z
    21be:	48 2f       	mov	r20, r24
    21c0:	8a 81       	ldd	r24, Y+2	; 0x02
    21c2:	28 2f       	mov	r18, r24
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	81 e0       	ldi	r24, 0x01	; 1
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	02 2e       	mov	r0, r18
    21cc:	02 c0       	rjmp	.+4      	; 0x21d2 <GPIO_setupPinDirection+0x164>
    21ce:	88 0f       	add	r24, r24
    21d0:	99 1f       	adc	r25, r25
    21d2:	0a 94       	dec	r0
    21d4:	e2 f7       	brpl	.-8      	; 0x21ce <GPIO_setupPinDirection+0x160>
    21d6:	80 95       	com	r24
    21d8:	84 23       	and	r24, r20
    21da:	8c 93       	st	X, r24
    21dc:	2b c0       	rjmp	.+86     	; 0x2234 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    21de:	8b 81       	ldd	r24, Y+3	; 0x03
    21e0:	81 30       	cpi	r24, 0x01	; 1
    21e2:	a1 f4       	brne	.+40     	; 0x220c <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    21e4:	a1 e3       	ldi	r26, 0x31	; 49
    21e6:	b0 e0       	ldi	r27, 0x00	; 0
    21e8:	e1 e3       	ldi	r30, 0x31	; 49
    21ea:	f0 e0       	ldi	r31, 0x00	; 0
    21ec:	80 81       	ld	r24, Z
    21ee:	48 2f       	mov	r20, r24
    21f0:	8a 81       	ldd	r24, Y+2	; 0x02
    21f2:	28 2f       	mov	r18, r24
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	81 e0       	ldi	r24, 0x01	; 1
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	02 2e       	mov	r0, r18
    21fc:	02 c0       	rjmp	.+4      	; 0x2202 <GPIO_setupPinDirection+0x194>
    21fe:	88 0f       	add	r24, r24
    2200:	99 1f       	adc	r25, r25
    2202:	0a 94       	dec	r0
    2204:	e2 f7       	brpl	.-8      	; 0x21fe <GPIO_setupPinDirection+0x190>
    2206:	84 2b       	or	r24, r20
    2208:	8c 93       	st	X, r24
    220a:	14 c0       	rjmp	.+40     	; 0x2234 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    220c:	a1 e3       	ldi	r26, 0x31	; 49
    220e:	b0 e0       	ldi	r27, 0x00	; 0
    2210:	e1 e3       	ldi	r30, 0x31	; 49
    2212:	f0 e0       	ldi	r31, 0x00	; 0
    2214:	80 81       	ld	r24, Z
    2216:	48 2f       	mov	r20, r24
    2218:	8a 81       	ldd	r24, Y+2	; 0x02
    221a:	28 2f       	mov	r18, r24
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	02 2e       	mov	r0, r18
    2224:	02 c0       	rjmp	.+4      	; 0x222a <GPIO_setupPinDirection+0x1bc>
    2226:	88 0f       	add	r24, r24
    2228:	99 1f       	adc	r25, r25
    222a:	0a 94       	dec	r0
    222c:	e2 f7       	brpl	.-8      	; 0x2226 <GPIO_setupPinDirection+0x1b8>
    222e:	80 95       	com	r24
    2230:	84 23       	and	r24, r20
    2232:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2234:	0f 90       	pop	r0
    2236:	0f 90       	pop	r0
    2238:	0f 90       	pop	r0
    223a:	0f 90       	pop	r0
    223c:	0f 90       	pop	r0
    223e:	cf 91       	pop	r28
    2240:	df 91       	pop	r29
    2242:	08 95       	ret

00002244 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    2244:	df 93       	push	r29
    2246:	cf 93       	push	r28
    2248:	00 d0       	rcall	.+0      	; 0x224a <GPIO_writePin+0x6>
    224a:	00 d0       	rcall	.+0      	; 0x224c <GPIO_writePin+0x8>
    224c:	0f 92       	push	r0
    224e:	cd b7       	in	r28, 0x3d	; 61
    2250:	de b7       	in	r29, 0x3e	; 62
    2252:	89 83       	std	Y+1, r24	; 0x01
    2254:	6a 83       	std	Y+2, r22	; 0x02
    2256:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2258:	8a 81       	ldd	r24, Y+2	; 0x02
    225a:	88 30       	cpi	r24, 0x08	; 8
    225c:	08 f0       	brcs	.+2      	; 0x2260 <GPIO_writePin+0x1c>
    225e:	d5 c0       	rjmp	.+426    	; 0x240a <GPIO_writePin+0x1c6>
    2260:	89 81       	ldd	r24, Y+1	; 0x01
    2262:	84 30       	cpi	r24, 0x04	; 4
    2264:	08 f0       	brcs	.+2      	; 0x2268 <GPIO_writePin+0x24>
    2266:	d1 c0       	rjmp	.+418    	; 0x240a <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    2268:	89 81       	ldd	r24, Y+1	; 0x01
    226a:	28 2f       	mov	r18, r24
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	3d 83       	std	Y+5, r19	; 0x05
    2270:	2c 83       	std	Y+4, r18	; 0x04
    2272:	8c 81       	ldd	r24, Y+4	; 0x04
    2274:	9d 81       	ldd	r25, Y+5	; 0x05
    2276:	81 30       	cpi	r24, 0x01	; 1
    2278:	91 05       	cpc	r25, r1
    227a:	09 f4       	brne	.+2      	; 0x227e <GPIO_writePin+0x3a>
    227c:	43 c0       	rjmp	.+134    	; 0x2304 <GPIO_writePin+0xc0>
    227e:	2c 81       	ldd	r18, Y+4	; 0x04
    2280:	3d 81       	ldd	r19, Y+5	; 0x05
    2282:	22 30       	cpi	r18, 0x02	; 2
    2284:	31 05       	cpc	r19, r1
    2286:	2c f4       	brge	.+10     	; 0x2292 <GPIO_writePin+0x4e>
    2288:	8c 81       	ldd	r24, Y+4	; 0x04
    228a:	9d 81       	ldd	r25, Y+5	; 0x05
    228c:	00 97       	sbiw	r24, 0x00	; 0
    228e:	71 f0       	breq	.+28     	; 0x22ac <GPIO_writePin+0x68>
    2290:	bc c0       	rjmp	.+376    	; 0x240a <GPIO_writePin+0x1c6>
    2292:	2c 81       	ldd	r18, Y+4	; 0x04
    2294:	3d 81       	ldd	r19, Y+5	; 0x05
    2296:	22 30       	cpi	r18, 0x02	; 2
    2298:	31 05       	cpc	r19, r1
    229a:	09 f4       	brne	.+2      	; 0x229e <GPIO_writePin+0x5a>
    229c:	5f c0       	rjmp	.+190    	; 0x235c <GPIO_writePin+0x118>
    229e:	8c 81       	ldd	r24, Y+4	; 0x04
    22a0:	9d 81       	ldd	r25, Y+5	; 0x05
    22a2:	83 30       	cpi	r24, 0x03	; 3
    22a4:	91 05       	cpc	r25, r1
    22a6:	09 f4       	brne	.+2      	; 0x22aa <GPIO_writePin+0x66>
    22a8:	85 c0       	rjmp	.+266    	; 0x23b4 <GPIO_writePin+0x170>
    22aa:	af c0       	rjmp	.+350    	; 0x240a <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    22ac:	8b 81       	ldd	r24, Y+3	; 0x03
    22ae:	81 30       	cpi	r24, 0x01	; 1
    22b0:	a1 f4       	brne	.+40     	; 0x22da <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    22b2:	ab e3       	ldi	r26, 0x3B	; 59
    22b4:	b0 e0       	ldi	r27, 0x00	; 0
    22b6:	eb e3       	ldi	r30, 0x3B	; 59
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	80 81       	ld	r24, Z
    22bc:	48 2f       	mov	r20, r24
    22be:	8a 81       	ldd	r24, Y+2	; 0x02
    22c0:	28 2f       	mov	r18, r24
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	81 e0       	ldi	r24, 0x01	; 1
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	02 2e       	mov	r0, r18
    22ca:	02 c0       	rjmp	.+4      	; 0x22d0 <GPIO_writePin+0x8c>
    22cc:	88 0f       	add	r24, r24
    22ce:	99 1f       	adc	r25, r25
    22d0:	0a 94       	dec	r0
    22d2:	e2 f7       	brpl	.-8      	; 0x22cc <GPIO_writePin+0x88>
    22d4:	84 2b       	or	r24, r20
    22d6:	8c 93       	st	X, r24
    22d8:	98 c0       	rjmp	.+304    	; 0x240a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    22da:	ab e3       	ldi	r26, 0x3B	; 59
    22dc:	b0 e0       	ldi	r27, 0x00	; 0
    22de:	eb e3       	ldi	r30, 0x3B	; 59
    22e0:	f0 e0       	ldi	r31, 0x00	; 0
    22e2:	80 81       	ld	r24, Z
    22e4:	48 2f       	mov	r20, r24
    22e6:	8a 81       	ldd	r24, Y+2	; 0x02
    22e8:	28 2f       	mov	r18, r24
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	81 e0       	ldi	r24, 0x01	; 1
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	02 2e       	mov	r0, r18
    22f2:	02 c0       	rjmp	.+4      	; 0x22f8 <GPIO_writePin+0xb4>
    22f4:	88 0f       	add	r24, r24
    22f6:	99 1f       	adc	r25, r25
    22f8:	0a 94       	dec	r0
    22fa:	e2 f7       	brpl	.-8      	; 0x22f4 <GPIO_writePin+0xb0>
    22fc:	80 95       	com	r24
    22fe:	84 23       	and	r24, r20
    2300:	8c 93       	st	X, r24
    2302:	83 c0       	rjmp	.+262    	; 0x240a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    2304:	8b 81       	ldd	r24, Y+3	; 0x03
    2306:	81 30       	cpi	r24, 0x01	; 1
    2308:	a1 f4       	brne	.+40     	; 0x2332 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    230a:	a8 e3       	ldi	r26, 0x38	; 56
    230c:	b0 e0       	ldi	r27, 0x00	; 0
    230e:	e8 e3       	ldi	r30, 0x38	; 56
    2310:	f0 e0       	ldi	r31, 0x00	; 0
    2312:	80 81       	ld	r24, Z
    2314:	48 2f       	mov	r20, r24
    2316:	8a 81       	ldd	r24, Y+2	; 0x02
    2318:	28 2f       	mov	r18, r24
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	81 e0       	ldi	r24, 0x01	; 1
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	02 2e       	mov	r0, r18
    2322:	02 c0       	rjmp	.+4      	; 0x2328 <GPIO_writePin+0xe4>
    2324:	88 0f       	add	r24, r24
    2326:	99 1f       	adc	r25, r25
    2328:	0a 94       	dec	r0
    232a:	e2 f7       	brpl	.-8      	; 0x2324 <GPIO_writePin+0xe0>
    232c:	84 2b       	or	r24, r20
    232e:	8c 93       	st	X, r24
    2330:	6c c0       	rjmp	.+216    	; 0x240a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    2332:	a8 e3       	ldi	r26, 0x38	; 56
    2334:	b0 e0       	ldi	r27, 0x00	; 0
    2336:	e8 e3       	ldi	r30, 0x38	; 56
    2338:	f0 e0       	ldi	r31, 0x00	; 0
    233a:	80 81       	ld	r24, Z
    233c:	48 2f       	mov	r20, r24
    233e:	8a 81       	ldd	r24, Y+2	; 0x02
    2340:	28 2f       	mov	r18, r24
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	02 2e       	mov	r0, r18
    234a:	02 c0       	rjmp	.+4      	; 0x2350 <GPIO_writePin+0x10c>
    234c:	88 0f       	add	r24, r24
    234e:	99 1f       	adc	r25, r25
    2350:	0a 94       	dec	r0
    2352:	e2 f7       	brpl	.-8      	; 0x234c <GPIO_writePin+0x108>
    2354:	80 95       	com	r24
    2356:	84 23       	and	r24, r20
    2358:	8c 93       	st	X, r24
    235a:	57 c0       	rjmp	.+174    	; 0x240a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    235c:	8b 81       	ldd	r24, Y+3	; 0x03
    235e:	81 30       	cpi	r24, 0x01	; 1
    2360:	a1 f4       	brne	.+40     	; 0x238a <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    2362:	a5 e3       	ldi	r26, 0x35	; 53
    2364:	b0 e0       	ldi	r27, 0x00	; 0
    2366:	e5 e3       	ldi	r30, 0x35	; 53
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	80 81       	ld	r24, Z
    236c:	48 2f       	mov	r20, r24
    236e:	8a 81       	ldd	r24, Y+2	; 0x02
    2370:	28 2f       	mov	r18, r24
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	81 e0       	ldi	r24, 0x01	; 1
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	02 2e       	mov	r0, r18
    237a:	02 c0       	rjmp	.+4      	; 0x2380 <GPIO_writePin+0x13c>
    237c:	88 0f       	add	r24, r24
    237e:	99 1f       	adc	r25, r25
    2380:	0a 94       	dec	r0
    2382:	e2 f7       	brpl	.-8      	; 0x237c <GPIO_writePin+0x138>
    2384:	84 2b       	or	r24, r20
    2386:	8c 93       	st	X, r24
    2388:	40 c0       	rjmp	.+128    	; 0x240a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    238a:	a5 e3       	ldi	r26, 0x35	; 53
    238c:	b0 e0       	ldi	r27, 0x00	; 0
    238e:	e5 e3       	ldi	r30, 0x35	; 53
    2390:	f0 e0       	ldi	r31, 0x00	; 0
    2392:	80 81       	ld	r24, Z
    2394:	48 2f       	mov	r20, r24
    2396:	8a 81       	ldd	r24, Y+2	; 0x02
    2398:	28 2f       	mov	r18, r24
    239a:	30 e0       	ldi	r19, 0x00	; 0
    239c:	81 e0       	ldi	r24, 0x01	; 1
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	02 2e       	mov	r0, r18
    23a2:	02 c0       	rjmp	.+4      	; 0x23a8 <GPIO_writePin+0x164>
    23a4:	88 0f       	add	r24, r24
    23a6:	99 1f       	adc	r25, r25
    23a8:	0a 94       	dec	r0
    23aa:	e2 f7       	brpl	.-8      	; 0x23a4 <GPIO_writePin+0x160>
    23ac:	80 95       	com	r24
    23ae:	84 23       	and	r24, r20
    23b0:	8c 93       	st	X, r24
    23b2:	2b c0       	rjmp	.+86     	; 0x240a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    23b4:	8b 81       	ldd	r24, Y+3	; 0x03
    23b6:	81 30       	cpi	r24, 0x01	; 1
    23b8:	a1 f4       	brne	.+40     	; 0x23e2 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    23ba:	a2 e3       	ldi	r26, 0x32	; 50
    23bc:	b0 e0       	ldi	r27, 0x00	; 0
    23be:	e2 e3       	ldi	r30, 0x32	; 50
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	80 81       	ld	r24, Z
    23c4:	48 2f       	mov	r20, r24
    23c6:	8a 81       	ldd	r24, Y+2	; 0x02
    23c8:	28 2f       	mov	r18, r24
    23ca:	30 e0       	ldi	r19, 0x00	; 0
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	02 2e       	mov	r0, r18
    23d2:	02 c0       	rjmp	.+4      	; 0x23d8 <GPIO_writePin+0x194>
    23d4:	88 0f       	add	r24, r24
    23d6:	99 1f       	adc	r25, r25
    23d8:	0a 94       	dec	r0
    23da:	e2 f7       	brpl	.-8      	; 0x23d4 <GPIO_writePin+0x190>
    23dc:	84 2b       	or	r24, r20
    23de:	8c 93       	st	X, r24
    23e0:	14 c0       	rjmp	.+40     	; 0x240a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    23e2:	a2 e3       	ldi	r26, 0x32	; 50
    23e4:	b0 e0       	ldi	r27, 0x00	; 0
    23e6:	e2 e3       	ldi	r30, 0x32	; 50
    23e8:	f0 e0       	ldi	r31, 0x00	; 0
    23ea:	80 81       	ld	r24, Z
    23ec:	48 2f       	mov	r20, r24
    23ee:	8a 81       	ldd	r24, Y+2	; 0x02
    23f0:	28 2f       	mov	r18, r24
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	81 e0       	ldi	r24, 0x01	; 1
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	02 2e       	mov	r0, r18
    23fa:	02 c0       	rjmp	.+4      	; 0x2400 <GPIO_writePin+0x1bc>
    23fc:	88 0f       	add	r24, r24
    23fe:	99 1f       	adc	r25, r25
    2400:	0a 94       	dec	r0
    2402:	e2 f7       	brpl	.-8      	; 0x23fc <GPIO_writePin+0x1b8>
    2404:	80 95       	com	r24
    2406:	84 23       	and	r24, r20
    2408:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    240a:	0f 90       	pop	r0
    240c:	0f 90       	pop	r0
    240e:	0f 90       	pop	r0
    2410:	0f 90       	pop	r0
    2412:	0f 90       	pop	r0
    2414:	cf 91       	pop	r28
    2416:	df 91       	pop	r29
    2418:	08 95       	ret

0000241a <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    241a:	df 93       	push	r29
    241c:	cf 93       	push	r28
    241e:	00 d0       	rcall	.+0      	; 0x2420 <GPIO_readPin+0x6>
    2420:	00 d0       	rcall	.+0      	; 0x2422 <GPIO_readPin+0x8>
    2422:	0f 92       	push	r0
    2424:	cd b7       	in	r28, 0x3d	; 61
    2426:	de b7       	in	r29, 0x3e	; 62
    2428:	8a 83       	std	Y+2, r24	; 0x02
    242a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    242c:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    242e:	8b 81       	ldd	r24, Y+3	; 0x03
    2430:	88 30       	cpi	r24, 0x08	; 8
    2432:	08 f0       	brcs	.+2      	; 0x2436 <GPIO_readPin+0x1c>
    2434:	84 c0       	rjmp	.+264    	; 0x253e <GPIO_readPin+0x124>
    2436:	8a 81       	ldd	r24, Y+2	; 0x02
    2438:	84 30       	cpi	r24, 0x04	; 4
    243a:	08 f0       	brcs	.+2      	; 0x243e <GPIO_readPin+0x24>
    243c:	80 c0       	rjmp	.+256    	; 0x253e <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    243e:	8a 81       	ldd	r24, Y+2	; 0x02
    2440:	28 2f       	mov	r18, r24
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	3d 83       	std	Y+5, r19	; 0x05
    2446:	2c 83       	std	Y+4, r18	; 0x04
    2448:	4c 81       	ldd	r20, Y+4	; 0x04
    244a:	5d 81       	ldd	r21, Y+5	; 0x05
    244c:	41 30       	cpi	r20, 0x01	; 1
    244e:	51 05       	cpc	r21, r1
    2450:	79 f1       	breq	.+94     	; 0x24b0 <GPIO_readPin+0x96>
    2452:	8c 81       	ldd	r24, Y+4	; 0x04
    2454:	9d 81       	ldd	r25, Y+5	; 0x05
    2456:	82 30       	cpi	r24, 0x02	; 2
    2458:	91 05       	cpc	r25, r1
    245a:	34 f4       	brge	.+12     	; 0x2468 <GPIO_readPin+0x4e>
    245c:	2c 81       	ldd	r18, Y+4	; 0x04
    245e:	3d 81       	ldd	r19, Y+5	; 0x05
    2460:	21 15       	cp	r18, r1
    2462:	31 05       	cpc	r19, r1
    2464:	69 f0       	breq	.+26     	; 0x2480 <GPIO_readPin+0x66>
    2466:	6b c0       	rjmp	.+214    	; 0x253e <GPIO_readPin+0x124>
    2468:	4c 81       	ldd	r20, Y+4	; 0x04
    246a:	5d 81       	ldd	r21, Y+5	; 0x05
    246c:	42 30       	cpi	r20, 0x02	; 2
    246e:	51 05       	cpc	r21, r1
    2470:	b9 f1       	breq	.+110    	; 0x24e0 <GPIO_readPin+0xc6>
    2472:	8c 81       	ldd	r24, Y+4	; 0x04
    2474:	9d 81       	ldd	r25, Y+5	; 0x05
    2476:	83 30       	cpi	r24, 0x03	; 3
    2478:	91 05       	cpc	r25, r1
    247a:	09 f4       	brne	.+2      	; 0x247e <GPIO_readPin+0x64>
    247c:	49 c0       	rjmp	.+146    	; 0x2510 <GPIO_readPin+0xf6>
    247e:	5f c0       	rjmp	.+190    	; 0x253e <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    2480:	e9 e3       	ldi	r30, 0x39	; 57
    2482:	f0 e0       	ldi	r31, 0x00	; 0
    2484:	80 81       	ld	r24, Z
    2486:	28 2f       	mov	r18, r24
    2488:	30 e0       	ldi	r19, 0x00	; 0
    248a:	8b 81       	ldd	r24, Y+3	; 0x03
    248c:	88 2f       	mov	r24, r24
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	a9 01       	movw	r20, r18
    2492:	02 c0       	rjmp	.+4      	; 0x2498 <GPIO_readPin+0x7e>
    2494:	55 95       	asr	r21
    2496:	47 95       	ror	r20
    2498:	8a 95       	dec	r24
    249a:	e2 f7       	brpl	.-8      	; 0x2494 <GPIO_readPin+0x7a>
    249c:	ca 01       	movw	r24, r20
    249e:	81 70       	andi	r24, 0x01	; 1
    24a0:	90 70       	andi	r25, 0x00	; 0
    24a2:	88 23       	and	r24, r24
    24a4:	19 f0       	breq	.+6      	; 0x24ac <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	89 83       	std	Y+1, r24	; 0x01
    24aa:	49 c0       	rjmp	.+146    	; 0x253e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    24ac:	19 82       	std	Y+1, r1	; 0x01
    24ae:	47 c0       	rjmp	.+142    	; 0x253e <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    24b0:	e6 e3       	ldi	r30, 0x36	; 54
    24b2:	f0 e0       	ldi	r31, 0x00	; 0
    24b4:	80 81       	ld	r24, Z
    24b6:	28 2f       	mov	r18, r24
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	8b 81       	ldd	r24, Y+3	; 0x03
    24bc:	88 2f       	mov	r24, r24
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	a9 01       	movw	r20, r18
    24c2:	02 c0       	rjmp	.+4      	; 0x24c8 <GPIO_readPin+0xae>
    24c4:	55 95       	asr	r21
    24c6:	47 95       	ror	r20
    24c8:	8a 95       	dec	r24
    24ca:	e2 f7       	brpl	.-8      	; 0x24c4 <GPIO_readPin+0xaa>
    24cc:	ca 01       	movw	r24, r20
    24ce:	81 70       	andi	r24, 0x01	; 1
    24d0:	90 70       	andi	r25, 0x00	; 0
    24d2:	88 23       	and	r24, r24
    24d4:	19 f0       	breq	.+6      	; 0x24dc <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	89 83       	std	Y+1, r24	; 0x01
    24da:	31 c0       	rjmp	.+98     	; 0x253e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    24dc:	19 82       	std	Y+1, r1	; 0x01
    24de:	2f c0       	rjmp	.+94     	; 0x253e <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    24e0:	e3 e3       	ldi	r30, 0x33	; 51
    24e2:	f0 e0       	ldi	r31, 0x00	; 0
    24e4:	80 81       	ld	r24, Z
    24e6:	28 2f       	mov	r18, r24
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	8b 81       	ldd	r24, Y+3	; 0x03
    24ec:	88 2f       	mov	r24, r24
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	a9 01       	movw	r20, r18
    24f2:	02 c0       	rjmp	.+4      	; 0x24f8 <GPIO_readPin+0xde>
    24f4:	55 95       	asr	r21
    24f6:	47 95       	ror	r20
    24f8:	8a 95       	dec	r24
    24fa:	e2 f7       	brpl	.-8      	; 0x24f4 <GPIO_readPin+0xda>
    24fc:	ca 01       	movw	r24, r20
    24fe:	81 70       	andi	r24, 0x01	; 1
    2500:	90 70       	andi	r25, 0x00	; 0
    2502:	88 23       	and	r24, r24
    2504:	19 f0       	breq	.+6      	; 0x250c <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    2506:	81 e0       	ldi	r24, 0x01	; 1
    2508:	89 83       	std	Y+1, r24	; 0x01
    250a:	19 c0       	rjmp	.+50     	; 0x253e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    250c:	19 82       	std	Y+1, r1	; 0x01
    250e:	17 c0       	rjmp	.+46     	; 0x253e <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    2510:	e0 e3       	ldi	r30, 0x30	; 48
    2512:	f0 e0       	ldi	r31, 0x00	; 0
    2514:	80 81       	ld	r24, Z
    2516:	28 2f       	mov	r18, r24
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	8b 81       	ldd	r24, Y+3	; 0x03
    251c:	88 2f       	mov	r24, r24
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	a9 01       	movw	r20, r18
    2522:	02 c0       	rjmp	.+4      	; 0x2528 <GPIO_readPin+0x10e>
    2524:	55 95       	asr	r21
    2526:	47 95       	ror	r20
    2528:	8a 95       	dec	r24
    252a:	e2 f7       	brpl	.-8      	; 0x2524 <GPIO_readPin+0x10a>
    252c:	ca 01       	movw	r24, r20
    252e:	81 70       	andi	r24, 0x01	; 1
    2530:	90 70       	andi	r25, 0x00	; 0
    2532:	88 23       	and	r24, r24
    2534:	19 f0       	breq	.+6      	; 0x253c <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    2536:	81 e0       	ldi	r24, 0x01	; 1
    2538:	89 83       	std	Y+1, r24	; 0x01
    253a:	01 c0       	rjmp	.+2      	; 0x253e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    253c:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    253e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2540:	0f 90       	pop	r0
    2542:	0f 90       	pop	r0
    2544:	0f 90       	pop	r0
    2546:	0f 90       	pop	r0
    2548:	0f 90       	pop	r0
    254a:	cf 91       	pop	r28
    254c:	df 91       	pop	r29
    254e:	08 95       	ret

00002550 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2550:	df 93       	push	r29
    2552:	cf 93       	push	r28
    2554:	00 d0       	rcall	.+0      	; 0x2556 <GPIO_setupPortDirection+0x6>
    2556:	00 d0       	rcall	.+0      	; 0x2558 <GPIO_setupPortDirection+0x8>
    2558:	cd b7       	in	r28, 0x3d	; 61
    255a:	de b7       	in	r29, 0x3e	; 62
    255c:	89 83       	std	Y+1, r24	; 0x01
    255e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2560:	89 81       	ldd	r24, Y+1	; 0x01
    2562:	84 30       	cpi	r24, 0x04	; 4
    2564:	90 f5       	brcc	.+100    	; 0x25ca <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2566:	89 81       	ldd	r24, Y+1	; 0x01
    2568:	28 2f       	mov	r18, r24
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	3c 83       	std	Y+4, r19	; 0x04
    256e:	2b 83       	std	Y+3, r18	; 0x03
    2570:	8b 81       	ldd	r24, Y+3	; 0x03
    2572:	9c 81       	ldd	r25, Y+4	; 0x04
    2574:	81 30       	cpi	r24, 0x01	; 1
    2576:	91 05       	cpc	r25, r1
    2578:	d1 f0       	breq	.+52     	; 0x25ae <GPIO_setupPortDirection+0x5e>
    257a:	2b 81       	ldd	r18, Y+3	; 0x03
    257c:	3c 81       	ldd	r19, Y+4	; 0x04
    257e:	22 30       	cpi	r18, 0x02	; 2
    2580:	31 05       	cpc	r19, r1
    2582:	2c f4       	brge	.+10     	; 0x258e <GPIO_setupPortDirection+0x3e>
    2584:	8b 81       	ldd	r24, Y+3	; 0x03
    2586:	9c 81       	ldd	r25, Y+4	; 0x04
    2588:	00 97       	sbiw	r24, 0x00	; 0
    258a:	61 f0       	breq	.+24     	; 0x25a4 <GPIO_setupPortDirection+0x54>
    258c:	1e c0       	rjmp	.+60     	; 0x25ca <GPIO_setupPortDirection+0x7a>
    258e:	2b 81       	ldd	r18, Y+3	; 0x03
    2590:	3c 81       	ldd	r19, Y+4	; 0x04
    2592:	22 30       	cpi	r18, 0x02	; 2
    2594:	31 05       	cpc	r19, r1
    2596:	81 f0       	breq	.+32     	; 0x25b8 <GPIO_setupPortDirection+0x68>
    2598:	8b 81       	ldd	r24, Y+3	; 0x03
    259a:	9c 81       	ldd	r25, Y+4	; 0x04
    259c:	83 30       	cpi	r24, 0x03	; 3
    259e:	91 05       	cpc	r25, r1
    25a0:	81 f0       	breq	.+32     	; 0x25c2 <GPIO_setupPortDirection+0x72>
    25a2:	13 c0       	rjmp	.+38     	; 0x25ca <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    25a4:	ea e3       	ldi	r30, 0x3A	; 58
    25a6:	f0 e0       	ldi	r31, 0x00	; 0
    25a8:	8a 81       	ldd	r24, Y+2	; 0x02
    25aa:	80 83       	st	Z, r24
    25ac:	0e c0       	rjmp	.+28     	; 0x25ca <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    25ae:	e7 e3       	ldi	r30, 0x37	; 55
    25b0:	f0 e0       	ldi	r31, 0x00	; 0
    25b2:	8a 81       	ldd	r24, Y+2	; 0x02
    25b4:	80 83       	st	Z, r24
    25b6:	09 c0       	rjmp	.+18     	; 0x25ca <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    25b8:	e4 e3       	ldi	r30, 0x34	; 52
    25ba:	f0 e0       	ldi	r31, 0x00	; 0
    25bc:	8a 81       	ldd	r24, Y+2	; 0x02
    25be:	80 83       	st	Z, r24
    25c0:	04 c0       	rjmp	.+8      	; 0x25ca <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    25c2:	e1 e3       	ldi	r30, 0x31	; 49
    25c4:	f0 e0       	ldi	r31, 0x00	; 0
    25c6:	8a 81       	ldd	r24, Y+2	; 0x02
    25c8:	80 83       	st	Z, r24
			break;
		}
	}
}
    25ca:	0f 90       	pop	r0
    25cc:	0f 90       	pop	r0
    25ce:	0f 90       	pop	r0
    25d0:	0f 90       	pop	r0
    25d2:	cf 91       	pop	r28
    25d4:	df 91       	pop	r29
    25d6:	08 95       	ret

000025d8 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    25d8:	df 93       	push	r29
    25da:	cf 93       	push	r28
    25dc:	00 d0       	rcall	.+0      	; 0x25de <GPIO_writePort+0x6>
    25de:	00 d0       	rcall	.+0      	; 0x25e0 <GPIO_writePort+0x8>
    25e0:	cd b7       	in	r28, 0x3d	; 61
    25e2:	de b7       	in	r29, 0x3e	; 62
    25e4:	89 83       	std	Y+1, r24	; 0x01
    25e6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    25e8:	89 81       	ldd	r24, Y+1	; 0x01
    25ea:	84 30       	cpi	r24, 0x04	; 4
    25ec:	90 f5       	brcc	.+100    	; 0x2652 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    25ee:	89 81       	ldd	r24, Y+1	; 0x01
    25f0:	28 2f       	mov	r18, r24
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	3c 83       	std	Y+4, r19	; 0x04
    25f6:	2b 83       	std	Y+3, r18	; 0x03
    25f8:	8b 81       	ldd	r24, Y+3	; 0x03
    25fa:	9c 81       	ldd	r25, Y+4	; 0x04
    25fc:	81 30       	cpi	r24, 0x01	; 1
    25fe:	91 05       	cpc	r25, r1
    2600:	d1 f0       	breq	.+52     	; 0x2636 <GPIO_writePort+0x5e>
    2602:	2b 81       	ldd	r18, Y+3	; 0x03
    2604:	3c 81       	ldd	r19, Y+4	; 0x04
    2606:	22 30       	cpi	r18, 0x02	; 2
    2608:	31 05       	cpc	r19, r1
    260a:	2c f4       	brge	.+10     	; 0x2616 <GPIO_writePort+0x3e>
    260c:	8b 81       	ldd	r24, Y+3	; 0x03
    260e:	9c 81       	ldd	r25, Y+4	; 0x04
    2610:	00 97       	sbiw	r24, 0x00	; 0
    2612:	61 f0       	breq	.+24     	; 0x262c <GPIO_writePort+0x54>
    2614:	1e c0       	rjmp	.+60     	; 0x2652 <GPIO_writePort+0x7a>
    2616:	2b 81       	ldd	r18, Y+3	; 0x03
    2618:	3c 81       	ldd	r19, Y+4	; 0x04
    261a:	22 30       	cpi	r18, 0x02	; 2
    261c:	31 05       	cpc	r19, r1
    261e:	81 f0       	breq	.+32     	; 0x2640 <GPIO_writePort+0x68>
    2620:	8b 81       	ldd	r24, Y+3	; 0x03
    2622:	9c 81       	ldd	r25, Y+4	; 0x04
    2624:	83 30       	cpi	r24, 0x03	; 3
    2626:	91 05       	cpc	r25, r1
    2628:	81 f0       	breq	.+32     	; 0x264a <GPIO_writePort+0x72>
    262a:	13 c0       	rjmp	.+38     	; 0x2652 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    262c:	eb e3       	ldi	r30, 0x3B	; 59
    262e:	f0 e0       	ldi	r31, 0x00	; 0
    2630:	8a 81       	ldd	r24, Y+2	; 0x02
    2632:	80 83       	st	Z, r24
    2634:	0e c0       	rjmp	.+28     	; 0x2652 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2636:	e8 e3       	ldi	r30, 0x38	; 56
    2638:	f0 e0       	ldi	r31, 0x00	; 0
    263a:	8a 81       	ldd	r24, Y+2	; 0x02
    263c:	80 83       	st	Z, r24
    263e:	09 c0       	rjmp	.+18     	; 0x2652 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2640:	e5 e3       	ldi	r30, 0x35	; 53
    2642:	f0 e0       	ldi	r31, 0x00	; 0
    2644:	8a 81       	ldd	r24, Y+2	; 0x02
    2646:	80 83       	st	Z, r24
    2648:	04 c0       	rjmp	.+8      	; 0x2652 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    264a:	e2 e3       	ldi	r30, 0x32	; 50
    264c:	f0 e0       	ldi	r31, 0x00	; 0
    264e:	8a 81       	ldd	r24, Y+2	; 0x02
    2650:	80 83       	st	Z, r24
			break;
		}
	}
}
    2652:	0f 90       	pop	r0
    2654:	0f 90       	pop	r0
    2656:	0f 90       	pop	r0
    2658:	0f 90       	pop	r0
    265a:	cf 91       	pop	r28
    265c:	df 91       	pop	r29
    265e:	08 95       	ret

00002660 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2660:	df 93       	push	r29
    2662:	cf 93       	push	r28
    2664:	00 d0       	rcall	.+0      	; 0x2666 <GPIO_readPort+0x6>
    2666:	00 d0       	rcall	.+0      	; 0x2668 <GPIO_readPort+0x8>
    2668:	cd b7       	in	r28, 0x3d	; 61
    266a:	de b7       	in	r29, 0x3e	; 62
    266c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    266e:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2670:	8a 81       	ldd	r24, Y+2	; 0x02
    2672:	84 30       	cpi	r24, 0x04	; 4
    2674:	90 f5       	brcc	.+100    	; 0x26da <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2676:	8a 81       	ldd	r24, Y+2	; 0x02
    2678:	28 2f       	mov	r18, r24
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	3c 83       	std	Y+4, r19	; 0x04
    267e:	2b 83       	std	Y+3, r18	; 0x03
    2680:	8b 81       	ldd	r24, Y+3	; 0x03
    2682:	9c 81       	ldd	r25, Y+4	; 0x04
    2684:	81 30       	cpi	r24, 0x01	; 1
    2686:	91 05       	cpc	r25, r1
    2688:	d1 f0       	breq	.+52     	; 0x26be <GPIO_readPort+0x5e>
    268a:	2b 81       	ldd	r18, Y+3	; 0x03
    268c:	3c 81       	ldd	r19, Y+4	; 0x04
    268e:	22 30       	cpi	r18, 0x02	; 2
    2690:	31 05       	cpc	r19, r1
    2692:	2c f4       	brge	.+10     	; 0x269e <GPIO_readPort+0x3e>
    2694:	8b 81       	ldd	r24, Y+3	; 0x03
    2696:	9c 81       	ldd	r25, Y+4	; 0x04
    2698:	00 97       	sbiw	r24, 0x00	; 0
    269a:	61 f0       	breq	.+24     	; 0x26b4 <GPIO_readPort+0x54>
    269c:	1e c0       	rjmp	.+60     	; 0x26da <GPIO_readPort+0x7a>
    269e:	2b 81       	ldd	r18, Y+3	; 0x03
    26a0:	3c 81       	ldd	r19, Y+4	; 0x04
    26a2:	22 30       	cpi	r18, 0x02	; 2
    26a4:	31 05       	cpc	r19, r1
    26a6:	81 f0       	breq	.+32     	; 0x26c8 <GPIO_readPort+0x68>
    26a8:	8b 81       	ldd	r24, Y+3	; 0x03
    26aa:	9c 81       	ldd	r25, Y+4	; 0x04
    26ac:	83 30       	cpi	r24, 0x03	; 3
    26ae:	91 05       	cpc	r25, r1
    26b0:	81 f0       	breq	.+32     	; 0x26d2 <GPIO_readPort+0x72>
    26b2:	13 c0       	rjmp	.+38     	; 0x26da <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    26b4:	e9 e3       	ldi	r30, 0x39	; 57
    26b6:	f0 e0       	ldi	r31, 0x00	; 0
    26b8:	80 81       	ld	r24, Z
    26ba:	89 83       	std	Y+1, r24	; 0x01
    26bc:	0e c0       	rjmp	.+28     	; 0x26da <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    26be:	e6 e3       	ldi	r30, 0x36	; 54
    26c0:	f0 e0       	ldi	r31, 0x00	; 0
    26c2:	80 81       	ld	r24, Z
    26c4:	89 83       	std	Y+1, r24	; 0x01
    26c6:	09 c0       	rjmp	.+18     	; 0x26da <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    26c8:	e3 e3       	ldi	r30, 0x33	; 51
    26ca:	f0 e0       	ldi	r31, 0x00	; 0
    26cc:	80 81       	ld	r24, Z
    26ce:	89 83       	std	Y+1, r24	; 0x01
    26d0:	04 c0       	rjmp	.+8      	; 0x26da <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    26d2:	e0 e3       	ldi	r30, 0x30	; 48
    26d4:	f0 e0       	ldi	r31, 0x00	; 0
    26d6:	80 81       	ld	r24, Z
    26d8:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    26da:	89 81       	ldd	r24, Y+1	; 0x01
}
    26dc:	0f 90       	pop	r0
    26de:	0f 90       	pop	r0
    26e0:	0f 90       	pop	r0
    26e2:	0f 90       	pop	r0
    26e4:	cf 91       	pop	r28
    26e6:	df 91       	pop	r29
    26e8:	08 95       	ret

000026ea <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    26ea:	df 93       	push	r29
    26ec:	cf 93       	push	r28
    26ee:	00 d0       	rcall	.+0      	; 0x26f0 <KEYPAD_getPressedKey+0x6>
    26f0:	0f 92       	push	r0
    26f2:	cd b7       	in	r28, 0x3d	; 61
    26f4:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    26f6:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    26f8:	1b 82       	std	Y+3, r1	; 0x03
    26fa:	43 c0       	rjmp	.+134    	; 0x2782 <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    26fc:	80 e0       	ldi	r24, 0x00	; 0
    26fe:	60 e0       	ldi	r22, 0x00	; 0
    2700:	0e 94 a8 12 	call	0x2550	; 0x2550 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    2704:	8b 81       	ldd	r24, Y+3	; 0x03
    2706:	98 2f       	mov	r25, r24
    2708:	9c 5f       	subi	r25, 0xFC	; 252
    270a:	80 e0       	ldi	r24, 0x00	; 0
    270c:	69 2f       	mov	r22, r25
    270e:	41 e0       	ldi	r20, 0x01	; 1
    2710:	0e 94 37 10 	call	0x206e	; 0x206e <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    2714:	8b 81       	ldd	r24, Y+3	; 0x03
    2716:	88 2f       	mov	r24, r24
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	9c 01       	movw	r18, r24
    271c:	2c 5f       	subi	r18, 0xFC	; 252
    271e:	3f 4f       	sbci	r19, 0xFF	; 255
    2720:	81 e0       	ldi	r24, 0x01	; 1
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	02 c0       	rjmp	.+4      	; 0x272a <KEYPAD_getPressedKey+0x40>
    2726:	88 0f       	add	r24, r24
    2728:	99 1f       	adc	r25, r25
    272a:	2a 95       	dec	r18
    272c:	e2 f7       	brpl	.-8      	; 0x2726 <KEYPAD_getPressedKey+0x3c>
    272e:	80 95       	com	r24
    2730:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    2732:	80 e0       	ldi	r24, 0x00	; 0
    2734:	69 81       	ldd	r22, Y+1	; 0x01
    2736:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    273a:	1a 82       	std	Y+2, r1	; 0x02
    273c:	1c c0       	rjmp	.+56     	; 0x2776 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    273e:	80 e0       	ldi	r24, 0x00	; 0
    2740:	6a 81       	ldd	r22, Y+2	; 0x02
    2742:	0e 94 0d 12 	call	0x241a	; 0x241a <GPIO_readPin>
    2746:	88 23       	and	r24, r24
    2748:	99 f4       	brne	.+38     	; 0x2770 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    274a:	8a 81       	ldd	r24, Y+2	; 0x02
    274c:	88 2f       	mov	r24, r24
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	88 0f       	add	r24, r24
    2752:	99 1f       	adc	r25, r25
    2754:	88 0f       	add	r24, r24
    2756:	99 1f       	adc	r25, r25
    2758:	98 2f       	mov	r25, r24
    275a:	8b 81       	ldd	r24, Y+3	; 0x03
    275c:	89 0f       	add	r24, r25
    275e:	8f 5f       	subi	r24, 0xFF	; 255
    2760:	0e 94 c6 13 	call	0x278c	; 0x278c <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    2764:	0f 90       	pop	r0
    2766:	0f 90       	pop	r0
    2768:	0f 90       	pop	r0
    276a:	cf 91       	pop	r28
    276c:	df 91       	pop	r29
    276e:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    2770:	8a 81       	ldd	r24, Y+2	; 0x02
    2772:	8f 5f       	subi	r24, 0xFF	; 255
    2774:	8a 83       	std	Y+2, r24	; 0x02
    2776:	8a 81       	ldd	r24, Y+2	; 0x02
    2778:	84 30       	cpi	r24, 0x04	; 4
    277a:	08 f3       	brcs	.-62     	; 0x273e <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    277c:	8b 81       	ldd	r24, Y+3	; 0x03
    277e:	8f 5f       	subi	r24, 0xFF	; 255
    2780:	8b 83       	std	Y+3, r24	; 0x03
    2782:	8b 81       	ldd	r24, Y+3	; 0x03
    2784:	84 30       	cpi	r24, 0x04	; 4
    2786:	08 f4       	brcc	.+2      	; 0x278a <KEYPAD_getPressedKey+0xa0>
    2788:	b9 cf       	rjmp	.-142    	; 0x26fc <KEYPAD_getPressedKey+0x12>
    278a:	b6 cf       	rjmp	.-148    	; 0x26f8 <KEYPAD_getPressedKey+0xe>

0000278c <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    278c:	df 93       	push	r29
    278e:	cf 93       	push	r28
    2790:	00 d0       	rcall	.+0      	; 0x2792 <KEYPAD_4x4_adjustKeyNumber+0x6>
    2792:	00 d0       	rcall	.+0      	; 0x2794 <KEYPAD_4x4_adjustKeyNumber+0x8>
    2794:	cd b7       	in	r28, 0x3d	; 61
    2796:	de b7       	in	r29, 0x3e	; 62
    2798:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    279a:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    279c:	8a 81       	ldd	r24, Y+2	; 0x02
    279e:	28 2f       	mov	r18, r24
    27a0:	30 e0       	ldi	r19, 0x00	; 0
    27a2:	3c 83       	std	Y+4, r19	; 0x04
    27a4:	2b 83       	std	Y+3, r18	; 0x03
    27a6:	8b 81       	ldd	r24, Y+3	; 0x03
    27a8:	9c 81       	ldd	r25, Y+4	; 0x04
    27aa:	88 30       	cpi	r24, 0x08	; 8
    27ac:	91 05       	cpc	r25, r1
    27ae:	09 f4       	brne	.+2      	; 0x27b2 <KEYPAD_4x4_adjustKeyNumber+0x26>
    27b0:	70 c0       	rjmp	.+224    	; 0x2892 <KEYPAD_4x4_adjustKeyNumber+0x106>
    27b2:	2b 81       	ldd	r18, Y+3	; 0x03
    27b4:	3c 81       	ldd	r19, Y+4	; 0x04
    27b6:	29 30       	cpi	r18, 0x09	; 9
    27b8:	31 05       	cpc	r19, r1
    27ba:	5c f5       	brge	.+86     	; 0x2812 <KEYPAD_4x4_adjustKeyNumber+0x86>
    27bc:	8b 81       	ldd	r24, Y+3	; 0x03
    27be:	9c 81       	ldd	r25, Y+4	; 0x04
    27c0:	84 30       	cpi	r24, 0x04	; 4
    27c2:	91 05       	cpc	r25, r1
    27c4:	09 f4       	brne	.+2      	; 0x27c8 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    27c6:	59 c0       	rjmp	.+178    	; 0x287a <KEYPAD_4x4_adjustKeyNumber+0xee>
    27c8:	2b 81       	ldd	r18, Y+3	; 0x03
    27ca:	3c 81       	ldd	r19, Y+4	; 0x04
    27cc:	25 30       	cpi	r18, 0x05	; 5
    27ce:	31 05       	cpc	r19, r1
    27d0:	9c f4       	brge	.+38     	; 0x27f8 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    27d2:	8b 81       	ldd	r24, Y+3	; 0x03
    27d4:	9c 81       	ldd	r25, Y+4	; 0x04
    27d6:	82 30       	cpi	r24, 0x02	; 2
    27d8:	91 05       	cpc	r25, r1
    27da:	09 f4       	brne	.+2      	; 0x27de <KEYPAD_4x4_adjustKeyNumber+0x52>
    27dc:	48 c0       	rjmp	.+144    	; 0x286e <KEYPAD_4x4_adjustKeyNumber+0xe2>
    27de:	2b 81       	ldd	r18, Y+3	; 0x03
    27e0:	3c 81       	ldd	r19, Y+4	; 0x04
    27e2:	23 30       	cpi	r18, 0x03	; 3
    27e4:	31 05       	cpc	r19, r1
    27e6:	0c f0       	brlt	.+2      	; 0x27ea <KEYPAD_4x4_adjustKeyNumber+0x5e>
    27e8:	45 c0       	rjmp	.+138    	; 0x2874 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    27ea:	8b 81       	ldd	r24, Y+3	; 0x03
    27ec:	9c 81       	ldd	r25, Y+4	; 0x04
    27ee:	81 30       	cpi	r24, 0x01	; 1
    27f0:	91 05       	cpc	r25, r1
    27f2:	09 f4       	brne	.+2      	; 0x27f6 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    27f4:	39 c0       	rjmp	.+114    	; 0x2868 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    27f6:	67 c0       	rjmp	.+206    	; 0x28c6 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    27f8:	2b 81       	ldd	r18, Y+3	; 0x03
    27fa:	3c 81       	ldd	r19, Y+4	; 0x04
    27fc:	26 30       	cpi	r18, 0x06	; 6
    27fe:	31 05       	cpc	r19, r1
    2800:	09 f4       	brne	.+2      	; 0x2804 <KEYPAD_4x4_adjustKeyNumber+0x78>
    2802:	41 c0       	rjmp	.+130    	; 0x2886 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2804:	8b 81       	ldd	r24, Y+3	; 0x03
    2806:	9c 81       	ldd	r25, Y+4	; 0x04
    2808:	87 30       	cpi	r24, 0x07	; 7
    280a:	91 05       	cpc	r25, r1
    280c:	0c f0       	brlt	.+2      	; 0x2810 <KEYPAD_4x4_adjustKeyNumber+0x84>
    280e:	3e c0       	rjmp	.+124    	; 0x288c <KEYPAD_4x4_adjustKeyNumber+0x100>
    2810:	37 c0       	rjmp	.+110    	; 0x2880 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2812:	2b 81       	ldd	r18, Y+3	; 0x03
    2814:	3c 81       	ldd	r19, Y+4	; 0x04
    2816:	2c 30       	cpi	r18, 0x0C	; 12
    2818:	31 05       	cpc	r19, r1
    281a:	09 f4       	brne	.+2      	; 0x281e <KEYPAD_4x4_adjustKeyNumber+0x92>
    281c:	46 c0       	rjmp	.+140    	; 0x28aa <KEYPAD_4x4_adjustKeyNumber+0x11e>
    281e:	8b 81       	ldd	r24, Y+3	; 0x03
    2820:	9c 81       	ldd	r25, Y+4	; 0x04
    2822:	8d 30       	cpi	r24, 0x0D	; 13
    2824:	91 05       	cpc	r25, r1
    2826:	5c f4       	brge	.+22     	; 0x283e <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2828:	2b 81       	ldd	r18, Y+3	; 0x03
    282a:	3c 81       	ldd	r19, Y+4	; 0x04
    282c:	2a 30       	cpi	r18, 0x0A	; 10
    282e:	31 05       	cpc	r19, r1
    2830:	b1 f1       	breq	.+108    	; 0x289e <KEYPAD_4x4_adjustKeyNumber+0x112>
    2832:	8b 81       	ldd	r24, Y+3	; 0x03
    2834:	9c 81       	ldd	r25, Y+4	; 0x04
    2836:	8b 30       	cpi	r24, 0x0B	; 11
    2838:	91 05       	cpc	r25, r1
    283a:	a4 f5       	brge	.+104    	; 0x28a4 <KEYPAD_4x4_adjustKeyNumber+0x118>
    283c:	2d c0       	rjmp	.+90     	; 0x2898 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    283e:	2b 81       	ldd	r18, Y+3	; 0x03
    2840:	3c 81       	ldd	r19, Y+4	; 0x04
    2842:	2e 30       	cpi	r18, 0x0E	; 14
    2844:	31 05       	cpc	r19, r1
    2846:	b9 f1       	breq	.+110    	; 0x28b6 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2848:	8b 81       	ldd	r24, Y+3	; 0x03
    284a:	9c 81       	ldd	r25, Y+4	; 0x04
    284c:	8e 30       	cpi	r24, 0x0E	; 14
    284e:	91 05       	cpc	r25, r1
    2850:	7c f1       	brlt	.+94     	; 0x28b0 <KEYPAD_4x4_adjustKeyNumber+0x124>
    2852:	2b 81       	ldd	r18, Y+3	; 0x03
    2854:	3c 81       	ldd	r19, Y+4	; 0x04
    2856:	2f 30       	cpi	r18, 0x0F	; 15
    2858:	31 05       	cpc	r19, r1
    285a:	79 f1       	breq	.+94     	; 0x28ba <KEYPAD_4x4_adjustKeyNumber+0x12e>
    285c:	8b 81       	ldd	r24, Y+3	; 0x03
    285e:	9c 81       	ldd	r25, Y+4	; 0x04
    2860:	80 31       	cpi	r24, 0x10	; 16
    2862:	91 05       	cpc	r25, r1
    2864:	69 f1       	breq	.+90     	; 0x28c0 <KEYPAD_4x4_adjustKeyNumber+0x134>
    2866:	2f c0       	rjmp	.+94     	; 0x28c6 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    2868:	87 e0       	ldi	r24, 0x07	; 7
    286a:	89 83       	std	Y+1, r24	; 0x01
    286c:	2e c0       	rjmp	.+92     	; 0x28ca <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    286e:	88 e0       	ldi	r24, 0x08	; 8
    2870:	89 83       	std	Y+1, r24	; 0x01
    2872:	2b c0       	rjmp	.+86     	; 0x28ca <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    2874:	89 e0       	ldi	r24, 0x09	; 9
    2876:	89 83       	std	Y+1, r24	; 0x01
    2878:	28 c0       	rjmp	.+80     	; 0x28ca <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    287a:	85 e2       	ldi	r24, 0x25	; 37
    287c:	89 83       	std	Y+1, r24	; 0x01
    287e:	25 c0       	rjmp	.+74     	; 0x28ca <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    2880:	84 e0       	ldi	r24, 0x04	; 4
    2882:	89 83       	std	Y+1, r24	; 0x01
    2884:	22 c0       	rjmp	.+68     	; 0x28ca <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    2886:	85 e0       	ldi	r24, 0x05	; 5
    2888:	89 83       	std	Y+1, r24	; 0x01
    288a:	1f c0       	rjmp	.+62     	; 0x28ca <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    288c:	86 e0       	ldi	r24, 0x06	; 6
    288e:	89 83       	std	Y+1, r24	; 0x01
    2890:	1c c0       	rjmp	.+56     	; 0x28ca <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2892:	8a e2       	ldi	r24, 0x2A	; 42
    2894:	89 83       	std	Y+1, r24	; 0x01
    2896:	19 c0       	rjmp	.+50     	; 0x28ca <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    2898:	81 e0       	ldi	r24, 0x01	; 1
    289a:	89 83       	std	Y+1, r24	; 0x01
    289c:	16 c0       	rjmp	.+44     	; 0x28ca <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    289e:	82 e0       	ldi	r24, 0x02	; 2
    28a0:	89 83       	std	Y+1, r24	; 0x01
    28a2:	13 c0       	rjmp	.+38     	; 0x28ca <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    28a4:	83 e0       	ldi	r24, 0x03	; 3
    28a6:	89 83       	std	Y+1, r24	; 0x01
    28a8:	10 c0       	rjmp	.+32     	; 0x28ca <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    28aa:	8d e2       	ldi	r24, 0x2D	; 45
    28ac:	89 83       	std	Y+1, r24	; 0x01
    28ae:	0d c0       	rjmp	.+26     	; 0x28ca <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    28b0:	8d e0       	ldi	r24, 0x0D	; 13
    28b2:	89 83       	std	Y+1, r24	; 0x01
    28b4:	0a c0       	rjmp	.+20     	; 0x28ca <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    28b6:	19 82       	std	Y+1, r1	; 0x01
    28b8:	08 c0       	rjmp	.+16     	; 0x28ca <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    28ba:	8d e3       	ldi	r24, 0x3D	; 61
    28bc:	89 83       	std	Y+1, r24	; 0x01
    28be:	05 c0       	rjmp	.+10     	; 0x28ca <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    28c0:	8b e2       	ldi	r24, 0x2B	; 43
    28c2:	89 83       	std	Y+1, r24	; 0x01
    28c4:	02 c0       	rjmp	.+4      	; 0x28ca <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    28c6:	8a 81       	ldd	r24, Y+2	; 0x02
    28c8:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    28ca:	89 81       	ldd	r24, Y+1	; 0x01
} 
    28cc:	0f 90       	pop	r0
    28ce:	0f 90       	pop	r0
    28d0:	0f 90       	pop	r0
    28d2:	0f 90       	pop	r0
    28d4:	cf 91       	pop	r28
    28d6:	df 91       	pop	r29
    28d8:	08 95       	ret

000028da <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    28da:	df 93       	push	r29
    28dc:	cf 93       	push	r28
    28de:	cd b7       	in	r28, 0x3d	; 61
    28e0:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    28e2:	82 e0       	ldi	r24, 0x02	; 2
    28e4:	60 e0       	ldi	r22, 0x00	; 0
    28e6:	41 e0       	ldi	r20, 0x01	; 1
    28e8:	0e 94 37 10 	call	0x206e	; 0x206e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    28ec:	82 e0       	ldi	r24, 0x02	; 2
    28ee:	61 e0       	ldi	r22, 0x01	; 1
    28f0:	41 e0       	ldi	r20, 0x01	; 1
    28f2:	0e 94 37 10 	call	0x206e	; 0x206e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    28f6:	82 e0       	ldi	r24, 0x02	; 2
    28f8:	62 e0       	ldi	r22, 0x02	; 2
    28fa:	41 e0       	ldi	r20, 0x01	; 1
    28fc:	0e 94 37 10 	call	0x206e	; 0x206e <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    2900:	81 e0       	ldi	r24, 0x01	; 1
    2902:	6f ef       	ldi	r22, 0xFF	; 255
    2904:	0e 94 a8 12 	call	0x2550	; 0x2550 <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    2908:	88 e3       	ldi	r24, 0x38	; 56
    290a:	0e 94 90 14 	call	0x2920	; 0x2920 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    290e:	8c e0       	ldi	r24, 0x0C	; 12
    2910:	0e 94 90 14 	call	0x2920	; 0x2920 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2914:	81 e0       	ldi	r24, 0x01	; 1
    2916:	0e 94 90 14 	call	0x2920	; 0x2920 <LCD_sendCommand>
}
    291a:	cf 91       	pop	r28
    291c:	df 91       	pop	r29
    291e:	08 95       	ret

00002920 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2920:	df 93       	push	r29
    2922:	cf 93       	push	r28
    2924:	cd b7       	in	r28, 0x3d	; 61
    2926:	de b7       	in	r29, 0x3e	; 62
    2928:	e9 97       	sbiw	r28, 0x39	; 57
    292a:	0f b6       	in	r0, 0x3f	; 63
    292c:	f8 94       	cli
    292e:	de bf       	out	0x3e, r29	; 62
    2930:	0f be       	out	0x3f, r0	; 63
    2932:	cd bf       	out	0x3d, r28	; 61
    2934:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2936:	82 e0       	ldi	r24, 0x02	; 2
    2938:	60 e0       	ldi	r22, 0x00	; 0
    293a:	40 e0       	ldi	r20, 0x00	; 0
    293c:	0e 94 22 11 	call	0x2244	; 0x2244 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    2940:	82 e0       	ldi	r24, 0x02	; 2
    2942:	61 e0       	ldi	r22, 0x01	; 1
    2944:	40 e0       	ldi	r20, 0x00	; 0
    2946:	0e 94 22 11 	call	0x2244	; 0x2244 <GPIO_writePin>
    294a:	80 e0       	ldi	r24, 0x00	; 0
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	a0 e8       	ldi	r26, 0x80	; 128
    2950:	bf e3       	ldi	r27, 0x3F	; 63
    2952:	8d ab       	std	Y+53, r24	; 0x35
    2954:	9e ab       	std	Y+54, r25	; 0x36
    2956:	af ab       	std	Y+55, r26	; 0x37
    2958:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    295a:	6d a9       	ldd	r22, Y+53	; 0x35
    295c:	7e a9       	ldd	r23, Y+54	; 0x36
    295e:	8f a9       	ldd	r24, Y+55	; 0x37
    2960:	98 ad       	ldd	r25, Y+56	; 0x38
    2962:	20 e0       	ldi	r18, 0x00	; 0
    2964:	30 e0       	ldi	r19, 0x00	; 0
    2966:	4a e7       	ldi	r20, 0x7A	; 122
    2968:	53 e4       	ldi	r21, 0x43	; 67
    296a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    296e:	dc 01       	movw	r26, r24
    2970:	cb 01       	movw	r24, r22
    2972:	89 ab       	std	Y+49, r24	; 0x31
    2974:	9a ab       	std	Y+50, r25	; 0x32
    2976:	ab ab       	std	Y+51, r26	; 0x33
    2978:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    297a:	69 a9       	ldd	r22, Y+49	; 0x31
    297c:	7a a9       	ldd	r23, Y+50	; 0x32
    297e:	8b a9       	ldd	r24, Y+51	; 0x33
    2980:	9c a9       	ldd	r25, Y+52	; 0x34
    2982:	20 e0       	ldi	r18, 0x00	; 0
    2984:	30 e0       	ldi	r19, 0x00	; 0
    2986:	40 e8       	ldi	r20, 0x80	; 128
    2988:	5f e3       	ldi	r21, 0x3F	; 63
    298a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    298e:	88 23       	and	r24, r24
    2990:	2c f4       	brge	.+10     	; 0x299c <LCD_sendCommand+0x7c>
		__ticks = 1;
    2992:	81 e0       	ldi	r24, 0x01	; 1
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	98 ab       	std	Y+48, r25	; 0x30
    2998:	8f a7       	std	Y+47, r24	; 0x2f
    299a:	3f c0       	rjmp	.+126    	; 0x2a1a <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    299c:	69 a9       	ldd	r22, Y+49	; 0x31
    299e:	7a a9       	ldd	r23, Y+50	; 0x32
    29a0:	8b a9       	ldd	r24, Y+51	; 0x33
    29a2:	9c a9       	ldd	r25, Y+52	; 0x34
    29a4:	20 e0       	ldi	r18, 0x00	; 0
    29a6:	3f ef       	ldi	r19, 0xFF	; 255
    29a8:	4f e7       	ldi	r20, 0x7F	; 127
    29aa:	57 e4       	ldi	r21, 0x47	; 71
    29ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29b0:	18 16       	cp	r1, r24
    29b2:	4c f5       	brge	.+82     	; 0x2a06 <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29b4:	6d a9       	ldd	r22, Y+53	; 0x35
    29b6:	7e a9       	ldd	r23, Y+54	; 0x36
    29b8:	8f a9       	ldd	r24, Y+55	; 0x37
    29ba:	98 ad       	ldd	r25, Y+56	; 0x38
    29bc:	20 e0       	ldi	r18, 0x00	; 0
    29be:	30 e0       	ldi	r19, 0x00	; 0
    29c0:	40 e2       	ldi	r20, 0x20	; 32
    29c2:	51 e4       	ldi	r21, 0x41	; 65
    29c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c8:	dc 01       	movw	r26, r24
    29ca:	cb 01       	movw	r24, r22
    29cc:	bc 01       	movw	r22, r24
    29ce:	cd 01       	movw	r24, r26
    29d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d4:	dc 01       	movw	r26, r24
    29d6:	cb 01       	movw	r24, r22
    29d8:	98 ab       	std	Y+48, r25	; 0x30
    29da:	8f a7       	std	Y+47, r24	; 0x2f
    29dc:	0f c0       	rjmp	.+30     	; 0x29fc <LCD_sendCommand+0xdc>
    29de:	89 e1       	ldi	r24, 0x19	; 25
    29e0:	90 e0       	ldi	r25, 0x00	; 0
    29e2:	9e a7       	std	Y+46, r25	; 0x2e
    29e4:	8d a7       	std	Y+45, r24	; 0x2d
    29e6:	8d a5       	ldd	r24, Y+45	; 0x2d
    29e8:	9e a5       	ldd	r25, Y+46	; 0x2e
    29ea:	01 97       	sbiw	r24, 0x01	; 1
    29ec:	f1 f7       	brne	.-4      	; 0x29ea <LCD_sendCommand+0xca>
    29ee:	9e a7       	std	Y+46, r25	; 0x2e
    29f0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    29f4:	98 a9       	ldd	r25, Y+48	; 0x30
    29f6:	01 97       	sbiw	r24, 0x01	; 1
    29f8:	98 ab       	std	Y+48, r25	; 0x30
    29fa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    29fe:	98 a9       	ldd	r25, Y+48	; 0x30
    2a00:	00 97       	sbiw	r24, 0x00	; 0
    2a02:	69 f7       	brne	.-38     	; 0x29de <LCD_sendCommand+0xbe>
    2a04:	14 c0       	rjmp	.+40     	; 0x2a2e <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a06:	69 a9       	ldd	r22, Y+49	; 0x31
    2a08:	7a a9       	ldd	r23, Y+50	; 0x32
    2a0a:	8b a9       	ldd	r24, Y+51	; 0x33
    2a0c:	9c a9       	ldd	r25, Y+52	; 0x34
    2a0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a12:	dc 01       	movw	r26, r24
    2a14:	cb 01       	movw	r24, r22
    2a16:	98 ab       	std	Y+48, r25	; 0x30
    2a18:	8f a7       	std	Y+47, r24	; 0x2f
    2a1a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a1c:	98 a9       	ldd	r25, Y+48	; 0x30
    2a1e:	9c a7       	std	Y+44, r25	; 0x2c
    2a20:	8b a7       	std	Y+43, r24	; 0x2b
    2a22:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a24:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a26:	01 97       	sbiw	r24, 0x01	; 1
    2a28:	f1 f7       	brne	.-4      	; 0x2a26 <LCD_sendCommand+0x106>
    2a2a:	9c a7       	std	Y+44, r25	; 0x2c
    2a2c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2a2e:	82 e0       	ldi	r24, 0x02	; 2
    2a30:	62 e0       	ldi	r22, 0x02	; 2
    2a32:	41 e0       	ldi	r20, 0x01	; 1
    2a34:	0e 94 22 11 	call	0x2244	; 0x2244 <GPIO_writePin>
    2a38:	80 e0       	ldi	r24, 0x00	; 0
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	a0 e8       	ldi	r26, 0x80	; 128
    2a3e:	bf e3       	ldi	r27, 0x3F	; 63
    2a40:	8f a3       	std	Y+39, r24	; 0x27
    2a42:	98 a7       	std	Y+40, r25	; 0x28
    2a44:	a9 a7       	std	Y+41, r26	; 0x29
    2a46:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a48:	6f a1       	ldd	r22, Y+39	; 0x27
    2a4a:	78 a5       	ldd	r23, Y+40	; 0x28
    2a4c:	89 a5       	ldd	r24, Y+41	; 0x29
    2a4e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a50:	20 e0       	ldi	r18, 0x00	; 0
    2a52:	30 e0       	ldi	r19, 0x00	; 0
    2a54:	4a e7       	ldi	r20, 0x7A	; 122
    2a56:	53 e4       	ldi	r21, 0x43	; 67
    2a58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a5c:	dc 01       	movw	r26, r24
    2a5e:	cb 01       	movw	r24, r22
    2a60:	8b a3       	std	Y+35, r24	; 0x23
    2a62:	9c a3       	std	Y+36, r25	; 0x24
    2a64:	ad a3       	std	Y+37, r26	; 0x25
    2a66:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a68:	6b a1       	ldd	r22, Y+35	; 0x23
    2a6a:	7c a1       	ldd	r23, Y+36	; 0x24
    2a6c:	8d a1       	ldd	r24, Y+37	; 0x25
    2a6e:	9e a1       	ldd	r25, Y+38	; 0x26
    2a70:	20 e0       	ldi	r18, 0x00	; 0
    2a72:	30 e0       	ldi	r19, 0x00	; 0
    2a74:	40 e8       	ldi	r20, 0x80	; 128
    2a76:	5f e3       	ldi	r21, 0x3F	; 63
    2a78:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a7c:	88 23       	and	r24, r24
    2a7e:	2c f4       	brge	.+10     	; 0x2a8a <LCD_sendCommand+0x16a>
		__ticks = 1;
    2a80:	81 e0       	ldi	r24, 0x01	; 1
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	9a a3       	std	Y+34, r25	; 0x22
    2a86:	89 a3       	std	Y+33, r24	; 0x21
    2a88:	3f c0       	rjmp	.+126    	; 0x2b08 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    2a8a:	6b a1       	ldd	r22, Y+35	; 0x23
    2a8c:	7c a1       	ldd	r23, Y+36	; 0x24
    2a8e:	8d a1       	ldd	r24, Y+37	; 0x25
    2a90:	9e a1       	ldd	r25, Y+38	; 0x26
    2a92:	20 e0       	ldi	r18, 0x00	; 0
    2a94:	3f ef       	ldi	r19, 0xFF	; 255
    2a96:	4f e7       	ldi	r20, 0x7F	; 127
    2a98:	57 e4       	ldi	r21, 0x47	; 71
    2a9a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a9e:	18 16       	cp	r1, r24
    2aa0:	4c f5       	brge	.+82     	; 0x2af4 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aa2:	6f a1       	ldd	r22, Y+39	; 0x27
    2aa4:	78 a5       	ldd	r23, Y+40	; 0x28
    2aa6:	89 a5       	ldd	r24, Y+41	; 0x29
    2aa8:	9a a5       	ldd	r25, Y+42	; 0x2a
    2aaa:	20 e0       	ldi	r18, 0x00	; 0
    2aac:	30 e0       	ldi	r19, 0x00	; 0
    2aae:	40 e2       	ldi	r20, 0x20	; 32
    2ab0:	51 e4       	ldi	r21, 0x41	; 65
    2ab2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab6:	dc 01       	movw	r26, r24
    2ab8:	cb 01       	movw	r24, r22
    2aba:	bc 01       	movw	r22, r24
    2abc:	cd 01       	movw	r24, r26
    2abe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac2:	dc 01       	movw	r26, r24
    2ac4:	cb 01       	movw	r24, r22
    2ac6:	9a a3       	std	Y+34, r25	; 0x22
    2ac8:	89 a3       	std	Y+33, r24	; 0x21
    2aca:	0f c0       	rjmp	.+30     	; 0x2aea <LCD_sendCommand+0x1ca>
    2acc:	89 e1       	ldi	r24, 0x19	; 25
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	98 a3       	std	Y+32, r25	; 0x20
    2ad2:	8f 8f       	std	Y+31, r24	; 0x1f
    2ad4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ad6:	98 a1       	ldd	r25, Y+32	; 0x20
    2ad8:	01 97       	sbiw	r24, 0x01	; 1
    2ada:	f1 f7       	brne	.-4      	; 0x2ad8 <LCD_sendCommand+0x1b8>
    2adc:	98 a3       	std	Y+32, r25	; 0x20
    2ade:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ae0:	89 a1       	ldd	r24, Y+33	; 0x21
    2ae2:	9a a1       	ldd	r25, Y+34	; 0x22
    2ae4:	01 97       	sbiw	r24, 0x01	; 1
    2ae6:	9a a3       	std	Y+34, r25	; 0x22
    2ae8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aea:	89 a1       	ldd	r24, Y+33	; 0x21
    2aec:	9a a1       	ldd	r25, Y+34	; 0x22
    2aee:	00 97       	sbiw	r24, 0x00	; 0
    2af0:	69 f7       	brne	.-38     	; 0x2acc <LCD_sendCommand+0x1ac>
    2af2:	14 c0       	rjmp	.+40     	; 0x2b1c <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2af4:	6b a1       	ldd	r22, Y+35	; 0x23
    2af6:	7c a1       	ldd	r23, Y+36	; 0x24
    2af8:	8d a1       	ldd	r24, Y+37	; 0x25
    2afa:	9e a1       	ldd	r25, Y+38	; 0x26
    2afc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b00:	dc 01       	movw	r26, r24
    2b02:	cb 01       	movw	r24, r22
    2b04:	9a a3       	std	Y+34, r25	; 0x22
    2b06:	89 a3       	std	Y+33, r24	; 0x21
    2b08:	89 a1       	ldd	r24, Y+33	; 0x21
    2b0a:	9a a1       	ldd	r25, Y+34	; 0x22
    2b0c:	9e 8f       	std	Y+30, r25	; 0x1e
    2b0e:	8d 8f       	std	Y+29, r24	; 0x1d
    2b10:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b12:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b14:	01 97       	sbiw	r24, 0x01	; 1
    2b16:	f1 f7       	brne	.-4      	; 0x2b14 <LCD_sendCommand+0x1f4>
    2b18:	9e 8f       	std	Y+30, r25	; 0x1e
    2b1a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2b1c:	81 e0       	ldi	r24, 0x01	; 1
    2b1e:	69 ad       	ldd	r22, Y+57	; 0x39
    2b20:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <GPIO_writePort>
    2b24:	80 e0       	ldi	r24, 0x00	; 0
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	a0 e8       	ldi	r26, 0x80	; 128
    2b2a:	bf e3       	ldi	r27, 0x3F	; 63
    2b2c:	89 8f       	std	Y+25, r24	; 0x19
    2b2e:	9a 8f       	std	Y+26, r25	; 0x1a
    2b30:	ab 8f       	std	Y+27, r26	; 0x1b
    2b32:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b34:	69 8d       	ldd	r22, Y+25	; 0x19
    2b36:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b38:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b3a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b3c:	20 e0       	ldi	r18, 0x00	; 0
    2b3e:	30 e0       	ldi	r19, 0x00	; 0
    2b40:	4a e7       	ldi	r20, 0x7A	; 122
    2b42:	53 e4       	ldi	r21, 0x43	; 67
    2b44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b48:	dc 01       	movw	r26, r24
    2b4a:	cb 01       	movw	r24, r22
    2b4c:	8d 8b       	std	Y+21, r24	; 0x15
    2b4e:	9e 8b       	std	Y+22, r25	; 0x16
    2b50:	af 8b       	std	Y+23, r26	; 0x17
    2b52:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b54:	6d 89       	ldd	r22, Y+21	; 0x15
    2b56:	7e 89       	ldd	r23, Y+22	; 0x16
    2b58:	8f 89       	ldd	r24, Y+23	; 0x17
    2b5a:	98 8d       	ldd	r25, Y+24	; 0x18
    2b5c:	20 e0       	ldi	r18, 0x00	; 0
    2b5e:	30 e0       	ldi	r19, 0x00	; 0
    2b60:	40 e8       	ldi	r20, 0x80	; 128
    2b62:	5f e3       	ldi	r21, 0x3F	; 63
    2b64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b68:	88 23       	and	r24, r24
    2b6a:	2c f4       	brge	.+10     	; 0x2b76 <LCD_sendCommand+0x256>
		__ticks = 1;
    2b6c:	81 e0       	ldi	r24, 0x01	; 1
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	9c 8b       	std	Y+20, r25	; 0x14
    2b72:	8b 8b       	std	Y+19, r24	; 0x13
    2b74:	3f c0       	rjmp	.+126    	; 0x2bf4 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    2b76:	6d 89       	ldd	r22, Y+21	; 0x15
    2b78:	7e 89       	ldd	r23, Y+22	; 0x16
    2b7a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b7c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b7e:	20 e0       	ldi	r18, 0x00	; 0
    2b80:	3f ef       	ldi	r19, 0xFF	; 255
    2b82:	4f e7       	ldi	r20, 0x7F	; 127
    2b84:	57 e4       	ldi	r21, 0x47	; 71
    2b86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b8a:	18 16       	cp	r1, r24
    2b8c:	4c f5       	brge	.+82     	; 0x2be0 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b8e:	69 8d       	ldd	r22, Y+25	; 0x19
    2b90:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b92:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b94:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b96:	20 e0       	ldi	r18, 0x00	; 0
    2b98:	30 e0       	ldi	r19, 0x00	; 0
    2b9a:	40 e2       	ldi	r20, 0x20	; 32
    2b9c:	51 e4       	ldi	r21, 0x41	; 65
    2b9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ba2:	dc 01       	movw	r26, r24
    2ba4:	cb 01       	movw	r24, r22
    2ba6:	bc 01       	movw	r22, r24
    2ba8:	cd 01       	movw	r24, r26
    2baa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bae:	dc 01       	movw	r26, r24
    2bb0:	cb 01       	movw	r24, r22
    2bb2:	9c 8b       	std	Y+20, r25	; 0x14
    2bb4:	8b 8b       	std	Y+19, r24	; 0x13
    2bb6:	0f c0       	rjmp	.+30     	; 0x2bd6 <LCD_sendCommand+0x2b6>
    2bb8:	89 e1       	ldi	r24, 0x19	; 25
    2bba:	90 e0       	ldi	r25, 0x00	; 0
    2bbc:	9a 8b       	std	Y+18, r25	; 0x12
    2bbe:	89 8b       	std	Y+17, r24	; 0x11
    2bc0:	89 89       	ldd	r24, Y+17	; 0x11
    2bc2:	9a 89       	ldd	r25, Y+18	; 0x12
    2bc4:	01 97       	sbiw	r24, 0x01	; 1
    2bc6:	f1 f7       	brne	.-4      	; 0x2bc4 <LCD_sendCommand+0x2a4>
    2bc8:	9a 8b       	std	Y+18, r25	; 0x12
    2bca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bcc:	8b 89       	ldd	r24, Y+19	; 0x13
    2bce:	9c 89       	ldd	r25, Y+20	; 0x14
    2bd0:	01 97       	sbiw	r24, 0x01	; 1
    2bd2:	9c 8b       	std	Y+20, r25	; 0x14
    2bd4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bd6:	8b 89       	ldd	r24, Y+19	; 0x13
    2bd8:	9c 89       	ldd	r25, Y+20	; 0x14
    2bda:	00 97       	sbiw	r24, 0x00	; 0
    2bdc:	69 f7       	brne	.-38     	; 0x2bb8 <LCD_sendCommand+0x298>
    2bde:	14 c0       	rjmp	.+40     	; 0x2c08 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2be0:	6d 89       	ldd	r22, Y+21	; 0x15
    2be2:	7e 89       	ldd	r23, Y+22	; 0x16
    2be4:	8f 89       	ldd	r24, Y+23	; 0x17
    2be6:	98 8d       	ldd	r25, Y+24	; 0x18
    2be8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bec:	dc 01       	movw	r26, r24
    2bee:	cb 01       	movw	r24, r22
    2bf0:	9c 8b       	std	Y+20, r25	; 0x14
    2bf2:	8b 8b       	std	Y+19, r24	; 0x13
    2bf4:	8b 89       	ldd	r24, Y+19	; 0x13
    2bf6:	9c 89       	ldd	r25, Y+20	; 0x14
    2bf8:	98 8b       	std	Y+16, r25	; 0x10
    2bfa:	8f 87       	std	Y+15, r24	; 0x0f
    2bfc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bfe:	98 89       	ldd	r25, Y+16	; 0x10
    2c00:	01 97       	sbiw	r24, 0x01	; 1
    2c02:	f1 f7       	brne	.-4      	; 0x2c00 <LCD_sendCommand+0x2e0>
    2c04:	98 8b       	std	Y+16, r25	; 0x10
    2c06:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2c08:	82 e0       	ldi	r24, 0x02	; 2
    2c0a:	62 e0       	ldi	r22, 0x02	; 2
    2c0c:	40 e0       	ldi	r20, 0x00	; 0
    2c0e:	0e 94 22 11 	call	0x2244	; 0x2244 <GPIO_writePin>
    2c12:	80 e0       	ldi	r24, 0x00	; 0
    2c14:	90 e0       	ldi	r25, 0x00	; 0
    2c16:	a0 e8       	ldi	r26, 0x80	; 128
    2c18:	bf e3       	ldi	r27, 0x3F	; 63
    2c1a:	8b 87       	std	Y+11, r24	; 0x0b
    2c1c:	9c 87       	std	Y+12, r25	; 0x0c
    2c1e:	ad 87       	std	Y+13, r26	; 0x0d
    2c20:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c22:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c24:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c26:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c28:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c2a:	20 e0       	ldi	r18, 0x00	; 0
    2c2c:	30 e0       	ldi	r19, 0x00	; 0
    2c2e:	4a e7       	ldi	r20, 0x7A	; 122
    2c30:	53 e4       	ldi	r21, 0x43	; 67
    2c32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c36:	dc 01       	movw	r26, r24
    2c38:	cb 01       	movw	r24, r22
    2c3a:	8f 83       	std	Y+7, r24	; 0x07
    2c3c:	98 87       	std	Y+8, r25	; 0x08
    2c3e:	a9 87       	std	Y+9, r26	; 0x09
    2c40:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c42:	6f 81       	ldd	r22, Y+7	; 0x07
    2c44:	78 85       	ldd	r23, Y+8	; 0x08
    2c46:	89 85       	ldd	r24, Y+9	; 0x09
    2c48:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c4a:	20 e0       	ldi	r18, 0x00	; 0
    2c4c:	30 e0       	ldi	r19, 0x00	; 0
    2c4e:	40 e8       	ldi	r20, 0x80	; 128
    2c50:	5f e3       	ldi	r21, 0x3F	; 63
    2c52:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c56:	88 23       	and	r24, r24
    2c58:	2c f4       	brge	.+10     	; 0x2c64 <LCD_sendCommand+0x344>
		__ticks = 1;
    2c5a:	81 e0       	ldi	r24, 0x01	; 1
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	9e 83       	std	Y+6, r25	; 0x06
    2c60:	8d 83       	std	Y+5, r24	; 0x05
    2c62:	3f c0       	rjmp	.+126    	; 0x2ce2 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    2c64:	6f 81       	ldd	r22, Y+7	; 0x07
    2c66:	78 85       	ldd	r23, Y+8	; 0x08
    2c68:	89 85       	ldd	r24, Y+9	; 0x09
    2c6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c6c:	20 e0       	ldi	r18, 0x00	; 0
    2c6e:	3f ef       	ldi	r19, 0xFF	; 255
    2c70:	4f e7       	ldi	r20, 0x7F	; 127
    2c72:	57 e4       	ldi	r21, 0x47	; 71
    2c74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c78:	18 16       	cp	r1, r24
    2c7a:	4c f5       	brge	.+82     	; 0x2cce <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c80:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c82:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c84:	20 e0       	ldi	r18, 0x00	; 0
    2c86:	30 e0       	ldi	r19, 0x00	; 0
    2c88:	40 e2       	ldi	r20, 0x20	; 32
    2c8a:	51 e4       	ldi	r21, 0x41	; 65
    2c8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c90:	dc 01       	movw	r26, r24
    2c92:	cb 01       	movw	r24, r22
    2c94:	bc 01       	movw	r22, r24
    2c96:	cd 01       	movw	r24, r26
    2c98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c9c:	dc 01       	movw	r26, r24
    2c9e:	cb 01       	movw	r24, r22
    2ca0:	9e 83       	std	Y+6, r25	; 0x06
    2ca2:	8d 83       	std	Y+5, r24	; 0x05
    2ca4:	0f c0       	rjmp	.+30     	; 0x2cc4 <LCD_sendCommand+0x3a4>
    2ca6:	89 e1       	ldi	r24, 0x19	; 25
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	9c 83       	std	Y+4, r25	; 0x04
    2cac:	8b 83       	std	Y+3, r24	; 0x03
    2cae:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb0:	9c 81       	ldd	r25, Y+4	; 0x04
    2cb2:	01 97       	sbiw	r24, 0x01	; 1
    2cb4:	f1 f7       	brne	.-4      	; 0x2cb2 <LCD_sendCommand+0x392>
    2cb6:	9c 83       	std	Y+4, r25	; 0x04
    2cb8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cba:	8d 81       	ldd	r24, Y+5	; 0x05
    2cbc:	9e 81       	ldd	r25, Y+6	; 0x06
    2cbe:	01 97       	sbiw	r24, 0x01	; 1
    2cc0:	9e 83       	std	Y+6, r25	; 0x06
    2cc2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cc4:	8d 81       	ldd	r24, Y+5	; 0x05
    2cc6:	9e 81       	ldd	r25, Y+6	; 0x06
    2cc8:	00 97       	sbiw	r24, 0x00	; 0
    2cca:	69 f7       	brne	.-38     	; 0x2ca6 <LCD_sendCommand+0x386>
    2ccc:	14 c0       	rjmp	.+40     	; 0x2cf6 <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cce:	6f 81       	ldd	r22, Y+7	; 0x07
    2cd0:	78 85       	ldd	r23, Y+8	; 0x08
    2cd2:	89 85       	ldd	r24, Y+9	; 0x09
    2cd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cda:	dc 01       	movw	r26, r24
    2cdc:	cb 01       	movw	r24, r22
    2cde:	9e 83       	std	Y+6, r25	; 0x06
    2ce0:	8d 83       	std	Y+5, r24	; 0x05
    2ce2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ce4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ce6:	9a 83       	std	Y+2, r25	; 0x02
    2ce8:	89 83       	std	Y+1, r24	; 0x01
    2cea:	89 81       	ldd	r24, Y+1	; 0x01
    2cec:	9a 81       	ldd	r25, Y+2	; 0x02
    2cee:	01 97       	sbiw	r24, 0x01	; 1
    2cf0:	f1 f7       	brne	.-4      	; 0x2cee <LCD_sendCommand+0x3ce>
    2cf2:	9a 83       	std	Y+2, r25	; 0x02
    2cf4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2cf6:	e9 96       	adiw	r28, 0x39	; 57
    2cf8:	0f b6       	in	r0, 0x3f	; 63
    2cfa:	f8 94       	cli
    2cfc:	de bf       	out	0x3e, r29	; 62
    2cfe:	0f be       	out	0x3f, r0	; 63
    2d00:	cd bf       	out	0x3d, r28	; 61
    2d02:	cf 91       	pop	r28
    2d04:	df 91       	pop	r29
    2d06:	08 95       	ret

00002d08 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2d08:	df 93       	push	r29
    2d0a:	cf 93       	push	r28
    2d0c:	cd b7       	in	r28, 0x3d	; 61
    2d0e:	de b7       	in	r29, 0x3e	; 62
    2d10:	e9 97       	sbiw	r28, 0x39	; 57
    2d12:	0f b6       	in	r0, 0x3f	; 63
    2d14:	f8 94       	cli
    2d16:	de bf       	out	0x3e, r29	; 62
    2d18:	0f be       	out	0x3f, r0	; 63
    2d1a:	cd bf       	out	0x3d, r28	; 61
    2d1c:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2d1e:	82 e0       	ldi	r24, 0x02	; 2
    2d20:	60 e0       	ldi	r22, 0x00	; 0
    2d22:	41 e0       	ldi	r20, 0x01	; 1
    2d24:	0e 94 22 11 	call	0x2244	; 0x2244 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    2d28:	82 e0       	ldi	r24, 0x02	; 2
    2d2a:	61 e0       	ldi	r22, 0x01	; 1
    2d2c:	40 e0       	ldi	r20, 0x00	; 0
    2d2e:	0e 94 22 11 	call	0x2244	; 0x2244 <GPIO_writePin>
    2d32:	80 e0       	ldi	r24, 0x00	; 0
    2d34:	90 e0       	ldi	r25, 0x00	; 0
    2d36:	a0 e8       	ldi	r26, 0x80	; 128
    2d38:	bf e3       	ldi	r27, 0x3F	; 63
    2d3a:	8d ab       	std	Y+53, r24	; 0x35
    2d3c:	9e ab       	std	Y+54, r25	; 0x36
    2d3e:	af ab       	std	Y+55, r26	; 0x37
    2d40:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d42:	6d a9       	ldd	r22, Y+53	; 0x35
    2d44:	7e a9       	ldd	r23, Y+54	; 0x36
    2d46:	8f a9       	ldd	r24, Y+55	; 0x37
    2d48:	98 ad       	ldd	r25, Y+56	; 0x38
    2d4a:	20 e0       	ldi	r18, 0x00	; 0
    2d4c:	30 e0       	ldi	r19, 0x00	; 0
    2d4e:	4a e7       	ldi	r20, 0x7A	; 122
    2d50:	53 e4       	ldi	r21, 0x43	; 67
    2d52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d56:	dc 01       	movw	r26, r24
    2d58:	cb 01       	movw	r24, r22
    2d5a:	89 ab       	std	Y+49, r24	; 0x31
    2d5c:	9a ab       	std	Y+50, r25	; 0x32
    2d5e:	ab ab       	std	Y+51, r26	; 0x33
    2d60:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2d62:	69 a9       	ldd	r22, Y+49	; 0x31
    2d64:	7a a9       	ldd	r23, Y+50	; 0x32
    2d66:	8b a9       	ldd	r24, Y+51	; 0x33
    2d68:	9c a9       	ldd	r25, Y+52	; 0x34
    2d6a:	20 e0       	ldi	r18, 0x00	; 0
    2d6c:	30 e0       	ldi	r19, 0x00	; 0
    2d6e:	40 e8       	ldi	r20, 0x80	; 128
    2d70:	5f e3       	ldi	r21, 0x3F	; 63
    2d72:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d76:	88 23       	and	r24, r24
    2d78:	2c f4       	brge	.+10     	; 0x2d84 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    2d7a:	81 e0       	ldi	r24, 0x01	; 1
    2d7c:	90 e0       	ldi	r25, 0x00	; 0
    2d7e:	98 ab       	std	Y+48, r25	; 0x30
    2d80:	8f a7       	std	Y+47, r24	; 0x2f
    2d82:	3f c0       	rjmp	.+126    	; 0x2e02 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    2d84:	69 a9       	ldd	r22, Y+49	; 0x31
    2d86:	7a a9       	ldd	r23, Y+50	; 0x32
    2d88:	8b a9       	ldd	r24, Y+51	; 0x33
    2d8a:	9c a9       	ldd	r25, Y+52	; 0x34
    2d8c:	20 e0       	ldi	r18, 0x00	; 0
    2d8e:	3f ef       	ldi	r19, 0xFF	; 255
    2d90:	4f e7       	ldi	r20, 0x7F	; 127
    2d92:	57 e4       	ldi	r21, 0x47	; 71
    2d94:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d98:	18 16       	cp	r1, r24
    2d9a:	4c f5       	brge	.+82     	; 0x2dee <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d9c:	6d a9       	ldd	r22, Y+53	; 0x35
    2d9e:	7e a9       	ldd	r23, Y+54	; 0x36
    2da0:	8f a9       	ldd	r24, Y+55	; 0x37
    2da2:	98 ad       	ldd	r25, Y+56	; 0x38
    2da4:	20 e0       	ldi	r18, 0x00	; 0
    2da6:	30 e0       	ldi	r19, 0x00	; 0
    2da8:	40 e2       	ldi	r20, 0x20	; 32
    2daa:	51 e4       	ldi	r21, 0x41	; 65
    2dac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2db0:	dc 01       	movw	r26, r24
    2db2:	cb 01       	movw	r24, r22
    2db4:	bc 01       	movw	r22, r24
    2db6:	cd 01       	movw	r24, r26
    2db8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dbc:	dc 01       	movw	r26, r24
    2dbe:	cb 01       	movw	r24, r22
    2dc0:	98 ab       	std	Y+48, r25	; 0x30
    2dc2:	8f a7       	std	Y+47, r24	; 0x2f
    2dc4:	0f c0       	rjmp	.+30     	; 0x2de4 <LCD_displayCharacter+0xdc>
    2dc6:	89 e1       	ldi	r24, 0x19	; 25
    2dc8:	90 e0       	ldi	r25, 0x00	; 0
    2dca:	9e a7       	std	Y+46, r25	; 0x2e
    2dcc:	8d a7       	std	Y+45, r24	; 0x2d
    2dce:	8d a5       	ldd	r24, Y+45	; 0x2d
    2dd0:	9e a5       	ldd	r25, Y+46	; 0x2e
    2dd2:	01 97       	sbiw	r24, 0x01	; 1
    2dd4:	f1 f7       	brne	.-4      	; 0x2dd2 <LCD_displayCharacter+0xca>
    2dd6:	9e a7       	std	Y+46, r25	; 0x2e
    2dd8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dda:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ddc:	98 a9       	ldd	r25, Y+48	; 0x30
    2dde:	01 97       	sbiw	r24, 0x01	; 1
    2de0:	98 ab       	std	Y+48, r25	; 0x30
    2de2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2de4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2de6:	98 a9       	ldd	r25, Y+48	; 0x30
    2de8:	00 97       	sbiw	r24, 0x00	; 0
    2dea:	69 f7       	brne	.-38     	; 0x2dc6 <LCD_displayCharacter+0xbe>
    2dec:	14 c0       	rjmp	.+40     	; 0x2e16 <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dee:	69 a9       	ldd	r22, Y+49	; 0x31
    2df0:	7a a9       	ldd	r23, Y+50	; 0x32
    2df2:	8b a9       	ldd	r24, Y+51	; 0x33
    2df4:	9c a9       	ldd	r25, Y+52	; 0x34
    2df6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dfa:	dc 01       	movw	r26, r24
    2dfc:	cb 01       	movw	r24, r22
    2dfe:	98 ab       	std	Y+48, r25	; 0x30
    2e00:	8f a7       	std	Y+47, r24	; 0x2f
    2e02:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e04:	98 a9       	ldd	r25, Y+48	; 0x30
    2e06:	9c a7       	std	Y+44, r25	; 0x2c
    2e08:	8b a7       	std	Y+43, r24	; 0x2b
    2e0a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e0c:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e0e:	01 97       	sbiw	r24, 0x01	; 1
    2e10:	f1 f7       	brne	.-4      	; 0x2e0e <LCD_displayCharacter+0x106>
    2e12:	9c a7       	std	Y+44, r25	; 0x2c
    2e14:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2e16:	82 e0       	ldi	r24, 0x02	; 2
    2e18:	62 e0       	ldi	r22, 0x02	; 2
    2e1a:	41 e0       	ldi	r20, 0x01	; 1
    2e1c:	0e 94 22 11 	call	0x2244	; 0x2244 <GPIO_writePin>
    2e20:	80 e0       	ldi	r24, 0x00	; 0
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	a0 e8       	ldi	r26, 0x80	; 128
    2e26:	bf e3       	ldi	r27, 0x3F	; 63
    2e28:	8f a3       	std	Y+39, r24	; 0x27
    2e2a:	98 a7       	std	Y+40, r25	; 0x28
    2e2c:	a9 a7       	std	Y+41, r26	; 0x29
    2e2e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e30:	6f a1       	ldd	r22, Y+39	; 0x27
    2e32:	78 a5       	ldd	r23, Y+40	; 0x28
    2e34:	89 a5       	ldd	r24, Y+41	; 0x29
    2e36:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e38:	20 e0       	ldi	r18, 0x00	; 0
    2e3a:	30 e0       	ldi	r19, 0x00	; 0
    2e3c:	4a e7       	ldi	r20, 0x7A	; 122
    2e3e:	53 e4       	ldi	r21, 0x43	; 67
    2e40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e44:	dc 01       	movw	r26, r24
    2e46:	cb 01       	movw	r24, r22
    2e48:	8b a3       	std	Y+35, r24	; 0x23
    2e4a:	9c a3       	std	Y+36, r25	; 0x24
    2e4c:	ad a3       	std	Y+37, r26	; 0x25
    2e4e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2e50:	6b a1       	ldd	r22, Y+35	; 0x23
    2e52:	7c a1       	ldd	r23, Y+36	; 0x24
    2e54:	8d a1       	ldd	r24, Y+37	; 0x25
    2e56:	9e a1       	ldd	r25, Y+38	; 0x26
    2e58:	20 e0       	ldi	r18, 0x00	; 0
    2e5a:	30 e0       	ldi	r19, 0x00	; 0
    2e5c:	40 e8       	ldi	r20, 0x80	; 128
    2e5e:	5f e3       	ldi	r21, 0x3F	; 63
    2e60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e64:	88 23       	and	r24, r24
    2e66:	2c f4       	brge	.+10     	; 0x2e72 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    2e68:	81 e0       	ldi	r24, 0x01	; 1
    2e6a:	90 e0       	ldi	r25, 0x00	; 0
    2e6c:	9a a3       	std	Y+34, r25	; 0x22
    2e6e:	89 a3       	std	Y+33, r24	; 0x21
    2e70:	3f c0       	rjmp	.+126    	; 0x2ef0 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    2e72:	6b a1       	ldd	r22, Y+35	; 0x23
    2e74:	7c a1       	ldd	r23, Y+36	; 0x24
    2e76:	8d a1       	ldd	r24, Y+37	; 0x25
    2e78:	9e a1       	ldd	r25, Y+38	; 0x26
    2e7a:	20 e0       	ldi	r18, 0x00	; 0
    2e7c:	3f ef       	ldi	r19, 0xFF	; 255
    2e7e:	4f e7       	ldi	r20, 0x7F	; 127
    2e80:	57 e4       	ldi	r21, 0x47	; 71
    2e82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e86:	18 16       	cp	r1, r24
    2e88:	4c f5       	brge	.+82     	; 0x2edc <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e8a:	6f a1       	ldd	r22, Y+39	; 0x27
    2e8c:	78 a5       	ldd	r23, Y+40	; 0x28
    2e8e:	89 a5       	ldd	r24, Y+41	; 0x29
    2e90:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e92:	20 e0       	ldi	r18, 0x00	; 0
    2e94:	30 e0       	ldi	r19, 0x00	; 0
    2e96:	40 e2       	ldi	r20, 0x20	; 32
    2e98:	51 e4       	ldi	r21, 0x41	; 65
    2e9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e9e:	dc 01       	movw	r26, r24
    2ea0:	cb 01       	movw	r24, r22
    2ea2:	bc 01       	movw	r22, r24
    2ea4:	cd 01       	movw	r24, r26
    2ea6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eaa:	dc 01       	movw	r26, r24
    2eac:	cb 01       	movw	r24, r22
    2eae:	9a a3       	std	Y+34, r25	; 0x22
    2eb0:	89 a3       	std	Y+33, r24	; 0x21
    2eb2:	0f c0       	rjmp	.+30     	; 0x2ed2 <LCD_displayCharacter+0x1ca>
    2eb4:	89 e1       	ldi	r24, 0x19	; 25
    2eb6:	90 e0       	ldi	r25, 0x00	; 0
    2eb8:	98 a3       	std	Y+32, r25	; 0x20
    2eba:	8f 8f       	std	Y+31, r24	; 0x1f
    2ebc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ebe:	98 a1       	ldd	r25, Y+32	; 0x20
    2ec0:	01 97       	sbiw	r24, 0x01	; 1
    2ec2:	f1 f7       	brne	.-4      	; 0x2ec0 <LCD_displayCharacter+0x1b8>
    2ec4:	98 a3       	std	Y+32, r25	; 0x20
    2ec6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ec8:	89 a1       	ldd	r24, Y+33	; 0x21
    2eca:	9a a1       	ldd	r25, Y+34	; 0x22
    2ecc:	01 97       	sbiw	r24, 0x01	; 1
    2ece:	9a a3       	std	Y+34, r25	; 0x22
    2ed0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ed2:	89 a1       	ldd	r24, Y+33	; 0x21
    2ed4:	9a a1       	ldd	r25, Y+34	; 0x22
    2ed6:	00 97       	sbiw	r24, 0x00	; 0
    2ed8:	69 f7       	brne	.-38     	; 0x2eb4 <LCD_displayCharacter+0x1ac>
    2eda:	14 c0       	rjmp	.+40     	; 0x2f04 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2edc:	6b a1       	ldd	r22, Y+35	; 0x23
    2ede:	7c a1       	ldd	r23, Y+36	; 0x24
    2ee0:	8d a1       	ldd	r24, Y+37	; 0x25
    2ee2:	9e a1       	ldd	r25, Y+38	; 0x26
    2ee4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ee8:	dc 01       	movw	r26, r24
    2eea:	cb 01       	movw	r24, r22
    2eec:	9a a3       	std	Y+34, r25	; 0x22
    2eee:	89 a3       	std	Y+33, r24	; 0x21
    2ef0:	89 a1       	ldd	r24, Y+33	; 0x21
    2ef2:	9a a1       	ldd	r25, Y+34	; 0x22
    2ef4:	9e 8f       	std	Y+30, r25	; 0x1e
    2ef6:	8d 8f       	std	Y+29, r24	; 0x1d
    2ef8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2efa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2efc:	01 97       	sbiw	r24, 0x01	; 1
    2efe:	f1 f7       	brne	.-4      	; 0x2efc <LCD_displayCharacter+0x1f4>
    2f00:	9e 8f       	std	Y+30, r25	; 0x1e
    2f02:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2f04:	81 e0       	ldi	r24, 0x01	; 1
    2f06:	69 ad       	ldd	r22, Y+57	; 0x39
    2f08:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <GPIO_writePort>
    2f0c:	80 e0       	ldi	r24, 0x00	; 0
    2f0e:	90 e0       	ldi	r25, 0x00	; 0
    2f10:	a0 e8       	ldi	r26, 0x80	; 128
    2f12:	bf e3       	ldi	r27, 0x3F	; 63
    2f14:	89 8f       	std	Y+25, r24	; 0x19
    2f16:	9a 8f       	std	Y+26, r25	; 0x1a
    2f18:	ab 8f       	std	Y+27, r26	; 0x1b
    2f1a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f1c:	69 8d       	ldd	r22, Y+25	; 0x19
    2f1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f24:	20 e0       	ldi	r18, 0x00	; 0
    2f26:	30 e0       	ldi	r19, 0x00	; 0
    2f28:	4a e7       	ldi	r20, 0x7A	; 122
    2f2a:	53 e4       	ldi	r21, 0x43	; 67
    2f2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f30:	dc 01       	movw	r26, r24
    2f32:	cb 01       	movw	r24, r22
    2f34:	8d 8b       	std	Y+21, r24	; 0x15
    2f36:	9e 8b       	std	Y+22, r25	; 0x16
    2f38:	af 8b       	std	Y+23, r26	; 0x17
    2f3a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f3c:	6d 89       	ldd	r22, Y+21	; 0x15
    2f3e:	7e 89       	ldd	r23, Y+22	; 0x16
    2f40:	8f 89       	ldd	r24, Y+23	; 0x17
    2f42:	98 8d       	ldd	r25, Y+24	; 0x18
    2f44:	20 e0       	ldi	r18, 0x00	; 0
    2f46:	30 e0       	ldi	r19, 0x00	; 0
    2f48:	40 e8       	ldi	r20, 0x80	; 128
    2f4a:	5f e3       	ldi	r21, 0x3F	; 63
    2f4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f50:	88 23       	and	r24, r24
    2f52:	2c f4       	brge	.+10     	; 0x2f5e <LCD_displayCharacter+0x256>
		__ticks = 1;
    2f54:	81 e0       	ldi	r24, 0x01	; 1
    2f56:	90 e0       	ldi	r25, 0x00	; 0
    2f58:	9c 8b       	std	Y+20, r25	; 0x14
    2f5a:	8b 8b       	std	Y+19, r24	; 0x13
    2f5c:	3f c0       	rjmp	.+126    	; 0x2fdc <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    2f5e:	6d 89       	ldd	r22, Y+21	; 0x15
    2f60:	7e 89       	ldd	r23, Y+22	; 0x16
    2f62:	8f 89       	ldd	r24, Y+23	; 0x17
    2f64:	98 8d       	ldd	r25, Y+24	; 0x18
    2f66:	20 e0       	ldi	r18, 0x00	; 0
    2f68:	3f ef       	ldi	r19, 0xFF	; 255
    2f6a:	4f e7       	ldi	r20, 0x7F	; 127
    2f6c:	57 e4       	ldi	r21, 0x47	; 71
    2f6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f72:	18 16       	cp	r1, r24
    2f74:	4c f5       	brge	.+82     	; 0x2fc8 <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f76:	69 8d       	ldd	r22, Y+25	; 0x19
    2f78:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f7a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f7c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f7e:	20 e0       	ldi	r18, 0x00	; 0
    2f80:	30 e0       	ldi	r19, 0x00	; 0
    2f82:	40 e2       	ldi	r20, 0x20	; 32
    2f84:	51 e4       	ldi	r21, 0x41	; 65
    2f86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f8a:	dc 01       	movw	r26, r24
    2f8c:	cb 01       	movw	r24, r22
    2f8e:	bc 01       	movw	r22, r24
    2f90:	cd 01       	movw	r24, r26
    2f92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f96:	dc 01       	movw	r26, r24
    2f98:	cb 01       	movw	r24, r22
    2f9a:	9c 8b       	std	Y+20, r25	; 0x14
    2f9c:	8b 8b       	std	Y+19, r24	; 0x13
    2f9e:	0f c0       	rjmp	.+30     	; 0x2fbe <LCD_displayCharacter+0x2b6>
    2fa0:	89 e1       	ldi	r24, 0x19	; 25
    2fa2:	90 e0       	ldi	r25, 0x00	; 0
    2fa4:	9a 8b       	std	Y+18, r25	; 0x12
    2fa6:	89 8b       	std	Y+17, r24	; 0x11
    2fa8:	89 89       	ldd	r24, Y+17	; 0x11
    2faa:	9a 89       	ldd	r25, Y+18	; 0x12
    2fac:	01 97       	sbiw	r24, 0x01	; 1
    2fae:	f1 f7       	brne	.-4      	; 0x2fac <LCD_displayCharacter+0x2a4>
    2fb0:	9a 8b       	std	Y+18, r25	; 0x12
    2fb2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fb4:	8b 89       	ldd	r24, Y+19	; 0x13
    2fb6:	9c 89       	ldd	r25, Y+20	; 0x14
    2fb8:	01 97       	sbiw	r24, 0x01	; 1
    2fba:	9c 8b       	std	Y+20, r25	; 0x14
    2fbc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fbe:	8b 89       	ldd	r24, Y+19	; 0x13
    2fc0:	9c 89       	ldd	r25, Y+20	; 0x14
    2fc2:	00 97       	sbiw	r24, 0x00	; 0
    2fc4:	69 f7       	brne	.-38     	; 0x2fa0 <LCD_displayCharacter+0x298>
    2fc6:	14 c0       	rjmp	.+40     	; 0x2ff0 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fc8:	6d 89       	ldd	r22, Y+21	; 0x15
    2fca:	7e 89       	ldd	r23, Y+22	; 0x16
    2fcc:	8f 89       	ldd	r24, Y+23	; 0x17
    2fce:	98 8d       	ldd	r25, Y+24	; 0x18
    2fd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd4:	dc 01       	movw	r26, r24
    2fd6:	cb 01       	movw	r24, r22
    2fd8:	9c 8b       	std	Y+20, r25	; 0x14
    2fda:	8b 8b       	std	Y+19, r24	; 0x13
    2fdc:	8b 89       	ldd	r24, Y+19	; 0x13
    2fde:	9c 89       	ldd	r25, Y+20	; 0x14
    2fe0:	98 8b       	std	Y+16, r25	; 0x10
    2fe2:	8f 87       	std	Y+15, r24	; 0x0f
    2fe4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fe6:	98 89       	ldd	r25, Y+16	; 0x10
    2fe8:	01 97       	sbiw	r24, 0x01	; 1
    2fea:	f1 f7       	brne	.-4      	; 0x2fe8 <LCD_displayCharacter+0x2e0>
    2fec:	98 8b       	std	Y+16, r25	; 0x10
    2fee:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2ff0:	82 e0       	ldi	r24, 0x02	; 2
    2ff2:	62 e0       	ldi	r22, 0x02	; 2
    2ff4:	40 e0       	ldi	r20, 0x00	; 0
    2ff6:	0e 94 22 11 	call	0x2244	; 0x2244 <GPIO_writePin>
    2ffa:	80 e0       	ldi	r24, 0x00	; 0
    2ffc:	90 e0       	ldi	r25, 0x00	; 0
    2ffe:	a0 e8       	ldi	r26, 0x80	; 128
    3000:	bf e3       	ldi	r27, 0x3F	; 63
    3002:	8b 87       	std	Y+11, r24	; 0x0b
    3004:	9c 87       	std	Y+12, r25	; 0x0c
    3006:	ad 87       	std	Y+13, r26	; 0x0d
    3008:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    300a:	6b 85       	ldd	r22, Y+11	; 0x0b
    300c:	7c 85       	ldd	r23, Y+12	; 0x0c
    300e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3010:	9e 85       	ldd	r25, Y+14	; 0x0e
    3012:	20 e0       	ldi	r18, 0x00	; 0
    3014:	30 e0       	ldi	r19, 0x00	; 0
    3016:	4a e7       	ldi	r20, 0x7A	; 122
    3018:	53 e4       	ldi	r21, 0x43	; 67
    301a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    301e:	dc 01       	movw	r26, r24
    3020:	cb 01       	movw	r24, r22
    3022:	8f 83       	std	Y+7, r24	; 0x07
    3024:	98 87       	std	Y+8, r25	; 0x08
    3026:	a9 87       	std	Y+9, r26	; 0x09
    3028:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    302a:	6f 81       	ldd	r22, Y+7	; 0x07
    302c:	78 85       	ldd	r23, Y+8	; 0x08
    302e:	89 85       	ldd	r24, Y+9	; 0x09
    3030:	9a 85       	ldd	r25, Y+10	; 0x0a
    3032:	20 e0       	ldi	r18, 0x00	; 0
    3034:	30 e0       	ldi	r19, 0x00	; 0
    3036:	40 e8       	ldi	r20, 0x80	; 128
    3038:	5f e3       	ldi	r21, 0x3F	; 63
    303a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    303e:	88 23       	and	r24, r24
    3040:	2c f4       	brge	.+10     	; 0x304c <LCD_displayCharacter+0x344>
		__ticks = 1;
    3042:	81 e0       	ldi	r24, 0x01	; 1
    3044:	90 e0       	ldi	r25, 0x00	; 0
    3046:	9e 83       	std	Y+6, r25	; 0x06
    3048:	8d 83       	std	Y+5, r24	; 0x05
    304a:	3f c0       	rjmp	.+126    	; 0x30ca <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    304c:	6f 81       	ldd	r22, Y+7	; 0x07
    304e:	78 85       	ldd	r23, Y+8	; 0x08
    3050:	89 85       	ldd	r24, Y+9	; 0x09
    3052:	9a 85       	ldd	r25, Y+10	; 0x0a
    3054:	20 e0       	ldi	r18, 0x00	; 0
    3056:	3f ef       	ldi	r19, 0xFF	; 255
    3058:	4f e7       	ldi	r20, 0x7F	; 127
    305a:	57 e4       	ldi	r21, 0x47	; 71
    305c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3060:	18 16       	cp	r1, r24
    3062:	4c f5       	brge	.+82     	; 0x30b6 <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3064:	6b 85       	ldd	r22, Y+11	; 0x0b
    3066:	7c 85       	ldd	r23, Y+12	; 0x0c
    3068:	8d 85       	ldd	r24, Y+13	; 0x0d
    306a:	9e 85       	ldd	r25, Y+14	; 0x0e
    306c:	20 e0       	ldi	r18, 0x00	; 0
    306e:	30 e0       	ldi	r19, 0x00	; 0
    3070:	40 e2       	ldi	r20, 0x20	; 32
    3072:	51 e4       	ldi	r21, 0x41	; 65
    3074:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3078:	dc 01       	movw	r26, r24
    307a:	cb 01       	movw	r24, r22
    307c:	bc 01       	movw	r22, r24
    307e:	cd 01       	movw	r24, r26
    3080:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3084:	dc 01       	movw	r26, r24
    3086:	cb 01       	movw	r24, r22
    3088:	9e 83       	std	Y+6, r25	; 0x06
    308a:	8d 83       	std	Y+5, r24	; 0x05
    308c:	0f c0       	rjmp	.+30     	; 0x30ac <LCD_displayCharacter+0x3a4>
    308e:	89 e1       	ldi	r24, 0x19	; 25
    3090:	90 e0       	ldi	r25, 0x00	; 0
    3092:	9c 83       	std	Y+4, r25	; 0x04
    3094:	8b 83       	std	Y+3, r24	; 0x03
    3096:	8b 81       	ldd	r24, Y+3	; 0x03
    3098:	9c 81       	ldd	r25, Y+4	; 0x04
    309a:	01 97       	sbiw	r24, 0x01	; 1
    309c:	f1 f7       	brne	.-4      	; 0x309a <LCD_displayCharacter+0x392>
    309e:	9c 83       	std	Y+4, r25	; 0x04
    30a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30a2:	8d 81       	ldd	r24, Y+5	; 0x05
    30a4:	9e 81       	ldd	r25, Y+6	; 0x06
    30a6:	01 97       	sbiw	r24, 0x01	; 1
    30a8:	9e 83       	std	Y+6, r25	; 0x06
    30aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30ac:	8d 81       	ldd	r24, Y+5	; 0x05
    30ae:	9e 81       	ldd	r25, Y+6	; 0x06
    30b0:	00 97       	sbiw	r24, 0x00	; 0
    30b2:	69 f7       	brne	.-38     	; 0x308e <LCD_displayCharacter+0x386>
    30b4:	14 c0       	rjmp	.+40     	; 0x30de <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30b6:	6f 81       	ldd	r22, Y+7	; 0x07
    30b8:	78 85       	ldd	r23, Y+8	; 0x08
    30ba:	89 85       	ldd	r24, Y+9	; 0x09
    30bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    30be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30c2:	dc 01       	movw	r26, r24
    30c4:	cb 01       	movw	r24, r22
    30c6:	9e 83       	std	Y+6, r25	; 0x06
    30c8:	8d 83       	std	Y+5, r24	; 0x05
    30ca:	8d 81       	ldd	r24, Y+5	; 0x05
    30cc:	9e 81       	ldd	r25, Y+6	; 0x06
    30ce:	9a 83       	std	Y+2, r25	; 0x02
    30d0:	89 83       	std	Y+1, r24	; 0x01
    30d2:	89 81       	ldd	r24, Y+1	; 0x01
    30d4:	9a 81       	ldd	r25, Y+2	; 0x02
    30d6:	01 97       	sbiw	r24, 0x01	; 1
    30d8:	f1 f7       	brne	.-4      	; 0x30d6 <LCD_displayCharacter+0x3ce>
    30da:	9a 83       	std	Y+2, r25	; 0x02
    30dc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    30de:	e9 96       	adiw	r28, 0x39	; 57
    30e0:	0f b6       	in	r0, 0x3f	; 63
    30e2:	f8 94       	cli
    30e4:	de bf       	out	0x3e, r29	; 62
    30e6:	0f be       	out	0x3f, r0	; 63
    30e8:	cd bf       	out	0x3d, r28	; 61
    30ea:	cf 91       	pop	r28
    30ec:	df 91       	pop	r29
    30ee:	08 95       	ret

000030f0 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    30f0:	df 93       	push	r29
    30f2:	cf 93       	push	r28
    30f4:	00 d0       	rcall	.+0      	; 0x30f6 <LCD_displayString+0x6>
    30f6:	0f 92       	push	r0
    30f8:	cd b7       	in	r28, 0x3d	; 61
    30fa:	de b7       	in	r29, 0x3e	; 62
    30fc:	9b 83       	std	Y+3, r25	; 0x03
    30fe:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3100:	19 82       	std	Y+1, r1	; 0x01
    3102:	0e c0       	rjmp	.+28     	; 0x3120 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    3104:	89 81       	ldd	r24, Y+1	; 0x01
    3106:	28 2f       	mov	r18, r24
    3108:	30 e0       	ldi	r19, 0x00	; 0
    310a:	8a 81       	ldd	r24, Y+2	; 0x02
    310c:	9b 81       	ldd	r25, Y+3	; 0x03
    310e:	fc 01       	movw	r30, r24
    3110:	e2 0f       	add	r30, r18
    3112:	f3 1f       	adc	r31, r19
    3114:	80 81       	ld	r24, Z
    3116:	0e 94 84 16 	call	0x2d08	; 0x2d08 <LCD_displayCharacter>
		i++;
    311a:	89 81       	ldd	r24, Y+1	; 0x01
    311c:	8f 5f       	subi	r24, 0xFF	; 255
    311e:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    3120:	89 81       	ldd	r24, Y+1	; 0x01
    3122:	28 2f       	mov	r18, r24
    3124:	30 e0       	ldi	r19, 0x00	; 0
    3126:	8a 81       	ldd	r24, Y+2	; 0x02
    3128:	9b 81       	ldd	r25, Y+3	; 0x03
    312a:	fc 01       	movw	r30, r24
    312c:	e2 0f       	add	r30, r18
    312e:	f3 1f       	adc	r31, r19
    3130:	80 81       	ld	r24, Z
    3132:	88 23       	and	r24, r24
    3134:	39 f7       	brne	.-50     	; 0x3104 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    3136:	0f 90       	pop	r0
    3138:	0f 90       	pop	r0
    313a:	0f 90       	pop	r0
    313c:	cf 91       	pop	r28
    313e:	df 91       	pop	r29
    3140:	08 95       	ret

00003142 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    3142:	df 93       	push	r29
    3144:	cf 93       	push	r28
    3146:	00 d0       	rcall	.+0      	; 0x3148 <LCD_moveCursor+0x6>
    3148:	00 d0       	rcall	.+0      	; 0x314a <LCD_moveCursor+0x8>
    314a:	0f 92       	push	r0
    314c:	cd b7       	in	r28, 0x3d	; 61
    314e:	de b7       	in	r29, 0x3e	; 62
    3150:	8a 83       	std	Y+2, r24	; 0x02
    3152:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    3154:	8a 81       	ldd	r24, Y+2	; 0x02
    3156:	28 2f       	mov	r18, r24
    3158:	30 e0       	ldi	r19, 0x00	; 0
    315a:	3d 83       	std	Y+5, r19	; 0x05
    315c:	2c 83       	std	Y+4, r18	; 0x04
    315e:	8c 81       	ldd	r24, Y+4	; 0x04
    3160:	9d 81       	ldd	r25, Y+5	; 0x05
    3162:	81 30       	cpi	r24, 0x01	; 1
    3164:	91 05       	cpc	r25, r1
    3166:	c1 f0       	breq	.+48     	; 0x3198 <LCD_moveCursor+0x56>
    3168:	2c 81       	ldd	r18, Y+4	; 0x04
    316a:	3d 81       	ldd	r19, Y+5	; 0x05
    316c:	22 30       	cpi	r18, 0x02	; 2
    316e:	31 05       	cpc	r19, r1
    3170:	2c f4       	brge	.+10     	; 0x317c <LCD_moveCursor+0x3a>
    3172:	8c 81       	ldd	r24, Y+4	; 0x04
    3174:	9d 81       	ldd	r25, Y+5	; 0x05
    3176:	00 97       	sbiw	r24, 0x00	; 0
    3178:	61 f0       	breq	.+24     	; 0x3192 <LCD_moveCursor+0x50>
    317a:	19 c0       	rjmp	.+50     	; 0x31ae <LCD_moveCursor+0x6c>
    317c:	2c 81       	ldd	r18, Y+4	; 0x04
    317e:	3d 81       	ldd	r19, Y+5	; 0x05
    3180:	22 30       	cpi	r18, 0x02	; 2
    3182:	31 05       	cpc	r19, r1
    3184:	69 f0       	breq	.+26     	; 0x31a0 <LCD_moveCursor+0x5e>
    3186:	8c 81       	ldd	r24, Y+4	; 0x04
    3188:	9d 81       	ldd	r25, Y+5	; 0x05
    318a:	83 30       	cpi	r24, 0x03	; 3
    318c:	91 05       	cpc	r25, r1
    318e:	61 f0       	breq	.+24     	; 0x31a8 <LCD_moveCursor+0x66>
    3190:	0e c0       	rjmp	.+28     	; 0x31ae <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    3192:	8b 81       	ldd	r24, Y+3	; 0x03
    3194:	89 83       	std	Y+1, r24	; 0x01
    3196:	0b c0       	rjmp	.+22     	; 0x31ae <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    3198:	8b 81       	ldd	r24, Y+3	; 0x03
    319a:	80 5c       	subi	r24, 0xC0	; 192
    319c:	89 83       	std	Y+1, r24	; 0x01
    319e:	07 c0       	rjmp	.+14     	; 0x31ae <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    31a0:	8b 81       	ldd	r24, Y+3	; 0x03
    31a2:	80 5f       	subi	r24, 0xF0	; 240
    31a4:	89 83       	std	Y+1, r24	; 0x01
    31a6:	03 c0       	rjmp	.+6      	; 0x31ae <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    31a8:	8b 81       	ldd	r24, Y+3	; 0x03
    31aa:	80 5b       	subi	r24, 0xB0	; 176
    31ac:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    31ae:	89 81       	ldd	r24, Y+1	; 0x01
    31b0:	80 68       	ori	r24, 0x80	; 128
    31b2:	0e 94 90 14 	call	0x2920	; 0x2920 <LCD_sendCommand>
}
    31b6:	0f 90       	pop	r0
    31b8:	0f 90       	pop	r0
    31ba:	0f 90       	pop	r0
    31bc:	0f 90       	pop	r0
    31be:	0f 90       	pop	r0
    31c0:	cf 91       	pop	r28
    31c2:	df 91       	pop	r29
    31c4:	08 95       	ret

000031c6 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    31c6:	df 93       	push	r29
    31c8:	cf 93       	push	r28
    31ca:	00 d0       	rcall	.+0      	; 0x31cc <LCD_displayStringRowColumn+0x6>
    31cc:	00 d0       	rcall	.+0      	; 0x31ce <LCD_displayStringRowColumn+0x8>
    31ce:	cd b7       	in	r28, 0x3d	; 61
    31d0:	de b7       	in	r29, 0x3e	; 62
    31d2:	89 83       	std	Y+1, r24	; 0x01
    31d4:	6a 83       	std	Y+2, r22	; 0x02
    31d6:	5c 83       	std	Y+4, r21	; 0x04
    31d8:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    31da:	89 81       	ldd	r24, Y+1	; 0x01
    31dc:	6a 81       	ldd	r22, Y+2	; 0x02
    31de:	0e 94 a1 18 	call	0x3142	; 0x3142 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    31e2:	8b 81       	ldd	r24, Y+3	; 0x03
    31e4:	9c 81       	ldd	r25, Y+4	; 0x04
    31e6:	0e 94 78 18 	call	0x30f0	; 0x30f0 <LCD_displayString>
}
    31ea:	0f 90       	pop	r0
    31ec:	0f 90       	pop	r0
    31ee:	0f 90       	pop	r0
    31f0:	0f 90       	pop	r0
    31f2:	cf 91       	pop	r28
    31f4:	df 91       	pop	r29
    31f6:	08 95       	ret

000031f8 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    31f8:	df 93       	push	r29
    31fa:	cf 93       	push	r28
    31fc:	cd b7       	in	r28, 0x3d	; 61
    31fe:	de b7       	in	r29, 0x3e	; 62
    3200:	62 97       	sbiw	r28, 0x12	; 18
    3202:	0f b6       	in	r0, 0x3f	; 63
    3204:	f8 94       	cli
    3206:	de bf       	out	0x3e, r29	; 62
    3208:	0f be       	out	0x3f, r0	; 63
    320a:	cd bf       	out	0x3d, r28	; 61
    320c:	9a 8b       	std	Y+18, r25	; 0x12
    320e:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    3210:	89 89       	ldd	r24, Y+17	; 0x11
    3212:	9a 89       	ldd	r25, Y+18	; 0x12
    3214:	9e 01       	movw	r18, r28
    3216:	2f 5f       	subi	r18, 0xFF	; 255
    3218:	3f 4f       	sbci	r19, 0xFF	; 255
    321a:	b9 01       	movw	r22, r18
    321c:	4a e0       	ldi	r20, 0x0A	; 10
    321e:	50 e0       	ldi	r21, 0x00	; 0
    3220:	0e 94 c8 1a 	call	0x3590	; 0x3590 <itoa>
   LCD_displayString(buff); /* Display the string */
    3224:	ce 01       	movw	r24, r28
    3226:	01 96       	adiw	r24, 0x01	; 1
    3228:	0e 94 78 18 	call	0x30f0	; 0x30f0 <LCD_displayString>
}
    322c:	62 96       	adiw	r28, 0x12	; 18
    322e:	0f b6       	in	r0, 0x3f	; 63
    3230:	f8 94       	cli
    3232:	de bf       	out	0x3e, r29	; 62
    3234:	0f be       	out	0x3f, r0	; 63
    3236:	cd bf       	out	0x3d, r28	; 61
    3238:	cf 91       	pop	r28
    323a:	df 91       	pop	r29
    323c:	08 95       	ret

0000323e <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    323e:	df 93       	push	r29
    3240:	cf 93       	push	r28
    3242:	cd b7       	in	r28, 0x3d	; 61
    3244:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    3246:	81 e0       	ldi	r24, 0x01	; 1
    3248:	0e 94 90 14 	call	0x2920	; 0x2920 <LCD_sendCommand>
}
    324c:	cf 91       	pop	r28
    324e:	df 91       	pop	r29
    3250:	08 95       	ret

00003252 <UART_init>:
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */

void UART_init(const uart_ConfigType *Config_PTR)
{
    3252:	df 93       	push	r29
    3254:	cf 93       	push	r28
    3256:	00 d0       	rcall	.+0      	; 0x3258 <UART_init+0x6>
    3258:	00 d0       	rcall	.+0      	; 0x325a <UART_init+0x8>
    325a:	cd b7       	in	r28, 0x3d	; 61
    325c:	de b7       	in	r29, 0x3e	; 62
    325e:	9c 83       	std	Y+4, r25	; 0x04
    3260:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    3262:	1a 82       	std	Y+2, r1	; 0x02
    3264:	19 82       	std	Y+1, r1	; 0x01

	/*
	 *  0 0 0 0    0 bit2 bit1 bit0
	 */
	bit0_USCZ0 = (Config_PTR->bit_data) & 0x01;
    3266:	eb 81       	ldd	r30, Y+3	; 0x03
    3268:	fc 81       	ldd	r31, Y+4	; 0x04
    326a:	84 81       	ldd	r24, Z+4	; 0x04
    326c:	81 70       	andi	r24, 0x01	; 1
    326e:	80 93 2b 01 	sts	0x012B, r24
	bit1_USCZ1 = ((Config_PTR->bit_data) & 0x02)>>1;
    3272:	eb 81       	ldd	r30, Y+3	; 0x03
    3274:	fc 81       	ldd	r31, Y+4	; 0x04
    3276:	84 81       	ldd	r24, Z+4	; 0x04
    3278:	88 2f       	mov	r24, r24
    327a:	90 e0       	ldi	r25, 0x00	; 0
    327c:	82 70       	andi	r24, 0x02	; 2
    327e:	90 70       	andi	r25, 0x00	; 0
    3280:	95 95       	asr	r25
    3282:	87 95       	ror	r24
    3284:	80 93 2c 01 	sts	0x012C, r24
	bit2_USCZ2 = ((Config_PTR->bit_data) & 0x04)>>2;
    3288:	eb 81       	ldd	r30, Y+3	; 0x03
    328a:	fc 81       	ldd	r31, Y+4	; 0x04
    328c:	84 81       	ldd	r24, Z+4	; 0x04
    328e:	88 2f       	mov	r24, r24
    3290:	90 e0       	ldi	r25, 0x00	; 0
    3292:	84 70       	andi	r24, 0x04	; 4
    3294:	90 70       	andi	r25, 0x00	; 0
    3296:	95 95       	asr	r25
    3298:	87 95       	ror	r24
    329a:	95 95       	asr	r25
    329c:	87 95       	ror	r24
    329e:	80 93 2d 01 	sts	0x012D, r24

	/*
	 *  0 0 0 0   0 0 UPM1 UPM0
	 */
	bit0_UPM0 = (Config_PTR->parity) & 0x01;
    32a2:	eb 81       	ldd	r30, Y+3	; 0x03
    32a4:	fc 81       	ldd	r31, Y+4	; 0x04
    32a6:	85 81       	ldd	r24, Z+5	; 0x05
    32a8:	81 70       	andi	r24, 0x01	; 1
    32aa:	80 93 2e 01 	sts	0x012E, r24
	bit1_UPM1 = ((Config_PTR->parity) & 0x02)>>1;
    32ae:	eb 81       	ldd	r30, Y+3	; 0x03
    32b0:	fc 81       	ldd	r31, Y+4	; 0x04
    32b2:	85 81       	ldd	r24, Z+5	; 0x05
    32b4:	88 2f       	mov	r24, r24
    32b6:	90 e0       	ldi	r25, 0x00	; 0
    32b8:	82 70       	andi	r24, 0x02	; 2
    32ba:	90 70       	andi	r25, 0x00	; 0
    32bc:	95 95       	asr	r25
    32be:	87 95       	ror	r24
    32c0:	80 93 2f 01 	sts	0x012F, r24

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    32c4:	eb e2       	ldi	r30, 0x2B	; 43
    32c6:	f0 e0       	ldi	r31, 0x00	; 0
    32c8:	82 e0       	ldi	r24, 0x02	; 2
    32ca:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN) | (bit2_USCZ2<<UCSZ2);
    32cc:	ea e2       	ldi	r30, 0x2A	; 42
    32ce:	f0 e0       	ldi	r31, 0x00	; 0
    32d0:	80 91 2d 01 	lds	r24, 0x012D
    32d4:	88 2f       	mov	r24, r24
    32d6:	90 e0       	ldi	r25, 0x00	; 0
    32d8:	88 0f       	add	r24, r24
    32da:	99 1f       	adc	r25, r25
    32dc:	88 0f       	add	r24, r24
    32de:	99 1f       	adc	r25, r25
    32e0:	88 61       	ori	r24, 0x18	; 24
    32e2:	80 83       	st	Z, r24
	 * UCSZ1   = bit1_USCZ1 For 8-bit data mode
	 * UCSZ2   = bit2_USCZ2 For 8-bit data mode
	 * UCSZ0   = bit0_USCZ0 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (bit0_USCZ0<<UCSZ0) | (bit1_USCZ1<<UCSZ1) | (Config_PTR->stop_bit<<USBS) | (bit0_UPM0 << UPM0) | (bit1_UPM1 <<UPM1);
    32e4:	a0 e4       	ldi	r26, 0x40	; 64
    32e6:	b0 e0       	ldi	r27, 0x00	; 0
    32e8:	80 91 2b 01 	lds	r24, 0x012B
    32ec:	88 2f       	mov	r24, r24
    32ee:	90 e0       	ldi	r25, 0x00	; 0
    32f0:	88 0f       	add	r24, r24
    32f2:	99 1f       	adc	r25, r25
    32f4:	28 2f       	mov	r18, r24
    32f6:	20 68       	ori	r18, 0x80	; 128
    32f8:	80 91 2c 01 	lds	r24, 0x012C
    32fc:	88 2f       	mov	r24, r24
    32fe:	90 e0       	ldi	r25, 0x00	; 0
    3300:	88 0f       	add	r24, r24
    3302:	99 1f       	adc	r25, r25
    3304:	88 0f       	add	r24, r24
    3306:	99 1f       	adc	r25, r25
    3308:	28 2b       	or	r18, r24
    330a:	eb 81       	ldd	r30, Y+3	; 0x03
    330c:	fc 81       	ldd	r31, Y+4	; 0x04
    330e:	86 81       	ldd	r24, Z+6	; 0x06
    3310:	88 2f       	mov	r24, r24
    3312:	90 e0       	ldi	r25, 0x00	; 0
    3314:	88 0f       	add	r24, r24
    3316:	99 1f       	adc	r25, r25
    3318:	88 0f       	add	r24, r24
    331a:	99 1f       	adc	r25, r25
    331c:	88 0f       	add	r24, r24
    331e:	99 1f       	adc	r25, r25
    3320:	28 2b       	or	r18, r24
    3322:	80 91 2e 01 	lds	r24, 0x012E
    3326:	88 2f       	mov	r24, r24
    3328:	90 e0       	ldi	r25, 0x00	; 0
    332a:	82 95       	swap	r24
    332c:	92 95       	swap	r25
    332e:	90 7f       	andi	r25, 0xF0	; 240
    3330:	98 27       	eor	r25, r24
    3332:	80 7f       	andi	r24, 0xF0	; 240
    3334:	98 27       	eor	r25, r24
    3336:	28 2b       	or	r18, r24
    3338:	80 91 2f 01 	lds	r24, 0x012F
    333c:	88 2f       	mov	r24, r24
    333e:	90 e0       	ldi	r25, 0x00	; 0
    3340:	88 0f       	add	r24, r24
    3342:	99 1f       	adc	r25, r25
    3344:	82 95       	swap	r24
    3346:	92 95       	swap	r25
    3348:	90 7f       	andi	r25, 0xF0	; 240
    334a:	98 27       	eor	r25, r24
    334c:	80 7f       	andi	r24, 0xF0	; 240
    334e:	98 27       	eor	r25, r24
    3350:	82 2b       	or	r24, r18
    3352:	8c 93       	st	X, r24

	/* Calculate the UBRR register value by using the value of baud_rate from(4800, 9600, 144000) */
	ubrr_value = (uint16)(((F_CPU / (Config_PTR->baud_rate * 8UL))) - 1);
    3354:	eb 81       	ldd	r30, Y+3	; 0x03
    3356:	fc 81       	ldd	r31, Y+4	; 0x04
    3358:	80 81       	ld	r24, Z
    335a:	91 81       	ldd	r25, Z+1	; 0x01
    335c:	a2 81       	ldd	r26, Z+2	; 0x02
    335e:	b3 81       	ldd	r27, Z+3	; 0x03
    3360:	88 0f       	add	r24, r24
    3362:	99 1f       	adc	r25, r25
    3364:	aa 1f       	adc	r26, r26
    3366:	bb 1f       	adc	r27, r27
    3368:	88 0f       	add	r24, r24
    336a:	99 1f       	adc	r25, r25
    336c:	aa 1f       	adc	r26, r26
    336e:	bb 1f       	adc	r27, r27
    3370:	88 0f       	add	r24, r24
    3372:	99 1f       	adc	r25, r25
    3374:	aa 1f       	adc	r26, r26
    3376:	bb 1f       	adc	r27, r27
    3378:	9c 01       	movw	r18, r24
    337a:	ad 01       	movw	r20, r26
    337c:	80 e4       	ldi	r24, 0x40	; 64
    337e:	92 e4       	ldi	r25, 0x42	; 66
    3380:	af e0       	ldi	r26, 0x0F	; 15
    3382:	b0 e0       	ldi	r27, 0x00	; 0
    3384:	bc 01       	movw	r22, r24
    3386:	cd 01       	movw	r24, r26
    3388:	0e 94 6f 1a 	call	0x34de	; 0x34de <__udivmodsi4>
    338c:	da 01       	movw	r26, r20
    338e:	c9 01       	movw	r24, r18
    3390:	01 97       	sbiw	r24, 0x01	; 1
    3392:	9a 83       	std	Y+2, r25	; 0x02
    3394:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3396:	e0 e4       	ldi	r30, 0x40	; 64
    3398:	f0 e0       	ldi	r31, 0x00	; 0
    339a:	89 81       	ldd	r24, Y+1	; 0x01
    339c:	9a 81       	ldd	r25, Y+2	; 0x02
    339e:	89 2f       	mov	r24, r25
    33a0:	99 27       	eor	r25, r25
    33a2:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    33a4:	e9 e2       	ldi	r30, 0x29	; 41
    33a6:	f0 e0       	ldi	r31, 0x00	; 0
    33a8:	89 81       	ldd	r24, Y+1	; 0x01
    33aa:	80 83       	st	Z, r24
}
    33ac:	0f 90       	pop	r0
    33ae:	0f 90       	pop	r0
    33b0:	0f 90       	pop	r0
    33b2:	0f 90       	pop	r0
    33b4:	cf 91       	pop	r28
    33b6:	df 91       	pop	r29
    33b8:	08 95       	ret

000033ba <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    33ba:	df 93       	push	r29
    33bc:	cf 93       	push	r28
    33be:	0f 92       	push	r0
    33c0:	cd b7       	in	r28, 0x3d	; 61
    33c2:	de b7       	in	r29, 0x3e	; 62
    33c4:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    33c6:	eb e2       	ldi	r30, 0x2B	; 43
    33c8:	f0 e0       	ldi	r31, 0x00	; 0
    33ca:	80 81       	ld	r24, Z
    33cc:	88 2f       	mov	r24, r24
    33ce:	90 e0       	ldi	r25, 0x00	; 0
    33d0:	80 72       	andi	r24, 0x20	; 32
    33d2:	90 70       	andi	r25, 0x00	; 0
    33d4:	00 97       	sbiw	r24, 0x00	; 0
    33d6:	b9 f3       	breq	.-18     	; 0x33c6 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    33d8:	ec e2       	ldi	r30, 0x2C	; 44
    33da:	f0 e0       	ldi	r31, 0x00	; 0
    33dc:	89 81       	ldd	r24, Y+1	; 0x01
    33de:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    33e0:	0f 90       	pop	r0
    33e2:	cf 91       	pop	r28
    33e4:	df 91       	pop	r29
    33e6:	08 95       	ret

000033e8 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    33e8:	df 93       	push	r29
    33ea:	cf 93       	push	r28
    33ec:	cd b7       	in	r28, 0x3d	; 61
    33ee:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    33f0:	eb e2       	ldi	r30, 0x2B	; 43
    33f2:	f0 e0       	ldi	r31, 0x00	; 0
    33f4:	80 81       	ld	r24, Z
    33f6:	88 23       	and	r24, r24
    33f8:	dc f7       	brge	.-10     	; 0x33f0 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    33fa:	ec e2       	ldi	r30, 0x2C	; 44
    33fc:	f0 e0       	ldi	r31, 0x00	; 0
    33fe:	80 81       	ld	r24, Z
}
    3400:	cf 91       	pop	r28
    3402:	df 91       	pop	r29
    3404:	08 95       	ret

00003406 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3406:	df 93       	push	r29
    3408:	cf 93       	push	r28
    340a:	00 d0       	rcall	.+0      	; 0x340c <UART_sendString+0x6>
    340c:	0f 92       	push	r0
    340e:	cd b7       	in	r28, 0x3d	; 61
    3410:	de b7       	in	r29, 0x3e	; 62
    3412:	9b 83       	std	Y+3, r25	; 0x03
    3414:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3416:	19 82       	std	Y+1, r1	; 0x01
    3418:	0e c0       	rjmp	.+28     	; 0x3436 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    341a:	89 81       	ldd	r24, Y+1	; 0x01
    341c:	28 2f       	mov	r18, r24
    341e:	30 e0       	ldi	r19, 0x00	; 0
    3420:	8a 81       	ldd	r24, Y+2	; 0x02
    3422:	9b 81       	ldd	r25, Y+3	; 0x03
    3424:	fc 01       	movw	r30, r24
    3426:	e2 0f       	add	r30, r18
    3428:	f3 1f       	adc	r31, r19
    342a:	80 81       	ld	r24, Z
    342c:	0e 94 dd 19 	call	0x33ba	; 0x33ba <UART_sendByte>
		i++;
    3430:	89 81       	ldd	r24, Y+1	; 0x01
    3432:	8f 5f       	subi	r24, 0xFF	; 255
    3434:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3436:	89 81       	ldd	r24, Y+1	; 0x01
    3438:	28 2f       	mov	r18, r24
    343a:	30 e0       	ldi	r19, 0x00	; 0
    343c:	8a 81       	ldd	r24, Y+2	; 0x02
    343e:	9b 81       	ldd	r25, Y+3	; 0x03
    3440:	fc 01       	movw	r30, r24
    3442:	e2 0f       	add	r30, r18
    3444:	f3 1f       	adc	r31, r19
    3446:	80 81       	ld	r24, Z
    3448:	88 23       	and	r24, r24
    344a:	39 f7       	brne	.-50     	; 0x341a <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    344c:	0f 90       	pop	r0
    344e:	0f 90       	pop	r0
    3450:	0f 90       	pop	r0
    3452:	cf 91       	pop	r28
    3454:	df 91       	pop	r29
    3456:	08 95       	ret

00003458 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3458:	0f 93       	push	r16
    345a:	1f 93       	push	r17
    345c:	df 93       	push	r29
    345e:	cf 93       	push	r28
    3460:	00 d0       	rcall	.+0      	; 0x3462 <UART_receiveString+0xa>
    3462:	0f 92       	push	r0
    3464:	cd b7       	in	r28, 0x3d	; 61
    3466:	de b7       	in	r29, 0x3e	; 62
    3468:	9b 83       	std	Y+3, r25	; 0x03
    346a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    346c:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    346e:	89 81       	ldd	r24, Y+1	; 0x01
    3470:	28 2f       	mov	r18, r24
    3472:	30 e0       	ldi	r19, 0x00	; 0
    3474:	8a 81       	ldd	r24, Y+2	; 0x02
    3476:	9b 81       	ldd	r25, Y+3	; 0x03
    3478:	8c 01       	movw	r16, r24
    347a:	02 0f       	add	r16, r18
    347c:	13 1f       	adc	r17, r19
    347e:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <UART_recieveByte>
    3482:	f8 01       	movw	r30, r16
    3484:	80 83       	st	Z, r24
    3486:	0f c0       	rjmp	.+30     	; 0x34a6 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3488:	89 81       	ldd	r24, Y+1	; 0x01
    348a:	8f 5f       	subi	r24, 0xFF	; 255
    348c:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    348e:	89 81       	ldd	r24, Y+1	; 0x01
    3490:	28 2f       	mov	r18, r24
    3492:	30 e0       	ldi	r19, 0x00	; 0
    3494:	8a 81       	ldd	r24, Y+2	; 0x02
    3496:	9b 81       	ldd	r25, Y+3	; 0x03
    3498:	8c 01       	movw	r16, r24
    349a:	02 0f       	add	r16, r18
    349c:	13 1f       	adc	r17, r19
    349e:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <UART_recieveByte>
    34a2:	f8 01       	movw	r30, r16
    34a4:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    34a6:	89 81       	ldd	r24, Y+1	; 0x01
    34a8:	28 2f       	mov	r18, r24
    34aa:	30 e0       	ldi	r19, 0x00	; 0
    34ac:	8a 81       	ldd	r24, Y+2	; 0x02
    34ae:	9b 81       	ldd	r25, Y+3	; 0x03
    34b0:	fc 01       	movw	r30, r24
    34b2:	e2 0f       	add	r30, r18
    34b4:	f3 1f       	adc	r31, r19
    34b6:	80 81       	ld	r24, Z
    34b8:	83 32       	cpi	r24, 0x23	; 35
    34ba:	31 f7       	brne	.-52     	; 0x3488 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    34bc:	89 81       	ldd	r24, Y+1	; 0x01
    34be:	28 2f       	mov	r18, r24
    34c0:	30 e0       	ldi	r19, 0x00	; 0
    34c2:	8a 81       	ldd	r24, Y+2	; 0x02
    34c4:	9b 81       	ldd	r25, Y+3	; 0x03
    34c6:	fc 01       	movw	r30, r24
    34c8:	e2 0f       	add	r30, r18
    34ca:	f3 1f       	adc	r31, r19
    34cc:	10 82       	st	Z, r1
}
    34ce:	0f 90       	pop	r0
    34d0:	0f 90       	pop	r0
    34d2:	0f 90       	pop	r0
    34d4:	cf 91       	pop	r28
    34d6:	df 91       	pop	r29
    34d8:	1f 91       	pop	r17
    34da:	0f 91       	pop	r16
    34dc:	08 95       	ret

000034de <__udivmodsi4>:
    34de:	a1 e2       	ldi	r26, 0x21	; 33
    34e0:	1a 2e       	mov	r1, r26
    34e2:	aa 1b       	sub	r26, r26
    34e4:	bb 1b       	sub	r27, r27
    34e6:	fd 01       	movw	r30, r26
    34e8:	0d c0       	rjmp	.+26     	; 0x3504 <__udivmodsi4_ep>

000034ea <__udivmodsi4_loop>:
    34ea:	aa 1f       	adc	r26, r26
    34ec:	bb 1f       	adc	r27, r27
    34ee:	ee 1f       	adc	r30, r30
    34f0:	ff 1f       	adc	r31, r31
    34f2:	a2 17       	cp	r26, r18
    34f4:	b3 07       	cpc	r27, r19
    34f6:	e4 07       	cpc	r30, r20
    34f8:	f5 07       	cpc	r31, r21
    34fa:	20 f0       	brcs	.+8      	; 0x3504 <__udivmodsi4_ep>
    34fc:	a2 1b       	sub	r26, r18
    34fe:	b3 0b       	sbc	r27, r19
    3500:	e4 0b       	sbc	r30, r20
    3502:	f5 0b       	sbc	r31, r21

00003504 <__udivmodsi4_ep>:
    3504:	66 1f       	adc	r22, r22
    3506:	77 1f       	adc	r23, r23
    3508:	88 1f       	adc	r24, r24
    350a:	99 1f       	adc	r25, r25
    350c:	1a 94       	dec	r1
    350e:	69 f7       	brne	.-38     	; 0x34ea <__udivmodsi4_loop>
    3510:	60 95       	com	r22
    3512:	70 95       	com	r23
    3514:	80 95       	com	r24
    3516:	90 95       	com	r25
    3518:	9b 01       	movw	r18, r22
    351a:	ac 01       	movw	r20, r24
    351c:	bd 01       	movw	r22, r26
    351e:	cf 01       	movw	r24, r30
    3520:	08 95       	ret

00003522 <__prologue_saves__>:
    3522:	2f 92       	push	r2
    3524:	3f 92       	push	r3
    3526:	4f 92       	push	r4
    3528:	5f 92       	push	r5
    352a:	6f 92       	push	r6
    352c:	7f 92       	push	r7
    352e:	8f 92       	push	r8
    3530:	9f 92       	push	r9
    3532:	af 92       	push	r10
    3534:	bf 92       	push	r11
    3536:	cf 92       	push	r12
    3538:	df 92       	push	r13
    353a:	ef 92       	push	r14
    353c:	ff 92       	push	r15
    353e:	0f 93       	push	r16
    3540:	1f 93       	push	r17
    3542:	cf 93       	push	r28
    3544:	df 93       	push	r29
    3546:	cd b7       	in	r28, 0x3d	; 61
    3548:	de b7       	in	r29, 0x3e	; 62
    354a:	ca 1b       	sub	r28, r26
    354c:	db 0b       	sbc	r29, r27
    354e:	0f b6       	in	r0, 0x3f	; 63
    3550:	f8 94       	cli
    3552:	de bf       	out	0x3e, r29	; 62
    3554:	0f be       	out	0x3f, r0	; 63
    3556:	cd bf       	out	0x3d, r28	; 61
    3558:	09 94       	ijmp

0000355a <__epilogue_restores__>:
    355a:	2a 88       	ldd	r2, Y+18	; 0x12
    355c:	39 88       	ldd	r3, Y+17	; 0x11
    355e:	48 88       	ldd	r4, Y+16	; 0x10
    3560:	5f 84       	ldd	r5, Y+15	; 0x0f
    3562:	6e 84       	ldd	r6, Y+14	; 0x0e
    3564:	7d 84       	ldd	r7, Y+13	; 0x0d
    3566:	8c 84       	ldd	r8, Y+12	; 0x0c
    3568:	9b 84       	ldd	r9, Y+11	; 0x0b
    356a:	aa 84       	ldd	r10, Y+10	; 0x0a
    356c:	b9 84       	ldd	r11, Y+9	; 0x09
    356e:	c8 84       	ldd	r12, Y+8	; 0x08
    3570:	df 80       	ldd	r13, Y+7	; 0x07
    3572:	ee 80       	ldd	r14, Y+6	; 0x06
    3574:	fd 80       	ldd	r15, Y+5	; 0x05
    3576:	0c 81       	ldd	r16, Y+4	; 0x04
    3578:	1b 81       	ldd	r17, Y+3	; 0x03
    357a:	aa 81       	ldd	r26, Y+2	; 0x02
    357c:	b9 81       	ldd	r27, Y+1	; 0x01
    357e:	ce 0f       	add	r28, r30
    3580:	d1 1d       	adc	r29, r1
    3582:	0f b6       	in	r0, 0x3f	; 63
    3584:	f8 94       	cli
    3586:	de bf       	out	0x3e, r29	; 62
    3588:	0f be       	out	0x3f, r0	; 63
    358a:	cd bf       	out	0x3d, r28	; 61
    358c:	ed 01       	movw	r28, r26
    358e:	08 95       	ret

00003590 <itoa>:
    3590:	fb 01       	movw	r30, r22
    3592:	9f 01       	movw	r18, r30
    3594:	e8 94       	clt
    3596:	42 30       	cpi	r20, 0x02	; 2
    3598:	c4 f0       	brlt	.+48     	; 0x35ca <itoa+0x3a>
    359a:	45 32       	cpi	r20, 0x25	; 37
    359c:	b4 f4       	brge	.+44     	; 0x35ca <itoa+0x3a>
    359e:	4a 30       	cpi	r20, 0x0A	; 10
    35a0:	29 f4       	brne	.+10     	; 0x35ac <itoa+0x1c>
    35a2:	97 fb       	bst	r25, 7
    35a4:	1e f4       	brtc	.+6      	; 0x35ac <itoa+0x1c>
    35a6:	90 95       	com	r25
    35a8:	81 95       	neg	r24
    35aa:	9f 4f       	sbci	r25, 0xFF	; 255
    35ac:	64 2f       	mov	r22, r20
    35ae:	77 27       	eor	r23, r23
    35b0:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <__udivmodhi4>
    35b4:	80 5d       	subi	r24, 0xD0	; 208
    35b6:	8a 33       	cpi	r24, 0x3A	; 58
    35b8:	0c f0       	brlt	.+2      	; 0x35bc <itoa+0x2c>
    35ba:	89 5d       	subi	r24, 0xD9	; 217
    35bc:	81 93       	st	Z+, r24
    35be:	cb 01       	movw	r24, r22
    35c0:	00 97       	sbiw	r24, 0x00	; 0
    35c2:	a1 f7       	brne	.-24     	; 0x35ac <itoa+0x1c>
    35c4:	16 f4       	brtc	.+4      	; 0x35ca <itoa+0x3a>
    35c6:	5d e2       	ldi	r21, 0x2D	; 45
    35c8:	51 93       	st	Z+, r21
    35ca:	10 82       	st	Z, r1
    35cc:	c9 01       	movw	r24, r18
    35ce:	0c 94 e9 1a 	jmp	0x35d2	; 0x35d2 <strrev>

000035d2 <strrev>:
    35d2:	dc 01       	movw	r26, r24
    35d4:	fc 01       	movw	r30, r24
    35d6:	67 2f       	mov	r22, r23
    35d8:	71 91       	ld	r23, Z+
    35da:	77 23       	and	r23, r23
    35dc:	e1 f7       	brne	.-8      	; 0x35d6 <strrev+0x4>
    35de:	32 97       	sbiw	r30, 0x02	; 2
    35e0:	04 c0       	rjmp	.+8      	; 0x35ea <strrev+0x18>
    35e2:	7c 91       	ld	r23, X
    35e4:	6d 93       	st	X+, r22
    35e6:	70 83       	st	Z, r23
    35e8:	62 91       	ld	r22, -Z
    35ea:	ae 17       	cp	r26, r30
    35ec:	bf 07       	cpc	r27, r31
    35ee:	c8 f3       	brcs	.-14     	; 0x35e2 <strrev+0x10>
    35f0:	08 95       	ret

000035f2 <__udivmodhi4>:
    35f2:	aa 1b       	sub	r26, r26
    35f4:	bb 1b       	sub	r27, r27
    35f6:	51 e1       	ldi	r21, 0x11	; 17
    35f8:	07 c0       	rjmp	.+14     	; 0x3608 <__udivmodhi4_ep>

000035fa <__udivmodhi4_loop>:
    35fa:	aa 1f       	adc	r26, r26
    35fc:	bb 1f       	adc	r27, r27
    35fe:	a6 17       	cp	r26, r22
    3600:	b7 07       	cpc	r27, r23
    3602:	10 f0       	brcs	.+4      	; 0x3608 <__udivmodhi4_ep>
    3604:	a6 1b       	sub	r26, r22
    3606:	b7 0b       	sbc	r27, r23

00003608 <__udivmodhi4_ep>:
    3608:	88 1f       	adc	r24, r24
    360a:	99 1f       	adc	r25, r25
    360c:	5a 95       	dec	r21
    360e:	a9 f7       	brne	.-22     	; 0x35fa <__udivmodhi4_loop>
    3610:	80 95       	com	r24
    3612:	90 95       	com	r25
    3614:	bc 01       	movw	r22, r24
    3616:	cd 01       	movw	r24, r26
    3618:	08 95       	ret

0000361a <_exit>:
    361a:	f8 94       	cli

0000361c <__stop_program>:
    361c:	ff cf       	rjmp	.-2      	; 0x361c <__stop_program>
