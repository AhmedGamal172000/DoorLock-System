
MC_CONTROL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002fb6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00002fb6  0000304a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800076  00800076  00003060  2**0
                  ALLOC
  3 .stab         000035ac  00000000  00000000  00003060  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015e0  00000000  00000000  0000660c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009ae5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a9d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b780  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b8e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bb6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c33b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 c8 0b 	jmp	0x1790	; 0x1790 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 95 0b 	jmp	0x172a	; 0x172a <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 eb       	ldi	r30, 0xB6	; 182
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 38       	cpi	r26, 0x88	; 136
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <main>
      8a:	0c 94 d9 17 	jmp	0x2fb2	; 0x2fb2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5d 17 	jmp	0x2eba	; 0x2eba <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 79 17 	jmp	0x2ef2	; 0x2ef2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 69 17 	jmp	0x2ed2	; 0x2ed2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 85 17 	jmp	0x2f0a	; 0x2f0a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 69 17 	jmp	0x2ed2	; 0x2ed2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 85 17 	jmp	0x2f0a	; 0x2f0a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 5d 17 	jmp	0x2eba	; 0x2eba <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 79 17 	jmp	0x2ef2	; 0x2ef2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 69 17 	jmp	0x2ed2	; 0x2ed2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 85 17 	jmp	0x2f0a	; 0x2f0a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 69 17 	jmp	0x2ed2	; 0x2ed2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 85 17 	jmp	0x2f0a	; 0x2f0a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 69 17 	jmp	0x2ed2	; 0x2ed2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 85 17 	jmp	0x2f0a	; 0x2f0a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 6d 17 	jmp	0x2eda	; 0x2eda <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 89 17 	jmp	0x2f12	; 0x2f12 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <buzzer_init>:
#include "Buzzer.h"

#include <util/delay.h>

void buzzer_init()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(Buzzer_PORT_ID, Buzzer_PIN_ID, PIN_OUTPUT);
     b4e:	83 e0       	ldi	r24, 0x03	; 3
     b50:	66 e0       	ldi	r22, 0x06	; 6
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <GPIO_setupPinDirection>
	GPIO_writePin(Buzzer_PORT_ID, Buzzer_PIN_ID,LOGIC_LOW);
     b58:	83 e0       	ldi	r24, 0x03	; 3
     b5a:	66 e0       	ldi	r22, 0x06	; 6
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <GPIO_writePin>
}
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <buzzer_ON>:

void buzzer_ON()
{
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(Buzzer_PORT_ID, Buzzer_PIN_ID, LOGIC_HIGH);
     b70:	83 e0       	ldi	r24, 0x03	; 3
     b72:	66 e0       	ldi	r22, 0x06	; 6
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <GPIO_writePin>
}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <buzzer_OFF>:

void buzzer_OFF(void)
{
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(Buzzer_PORT_ID, Buzzer_PIN_ID,LOGIC_LOW);
     b88:	83 e0       	ldi	r24, 0x03	; 3
     b8a:	66 e0       	ldi	r22, 0x06	; 6
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <GPIO_writePin>
}
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <WrongMessage>:
/* global variable contain the ticks count of the timer */


/* Interrupt Service Routine for timer0 compare mode */
void WrongMessage()
{
     b98:	df 93       	push	r29
     b9a:	cf 93       	push	r28
     b9c:	cd b7       	in	r28, 0x3d	; 61
     b9e:	de b7       	in	r29, 0x3e	; 62
     ba0:	2e 97       	sbiw	r28, 0x0e	; 14
     ba2:	0f b6       	in	r0, 0x3f	; 63
     ba4:	f8 94       	cli
     ba6:	de bf       	out	0x3e, r29	; 62
     ba8:	0f be       	out	0x3f, r0	; 63
     baa:	cd bf       	out	0x3d, r28	; 61
	buzzer_ON();
     bac:	0e 94 b4 05 	call	0xb68	; 0xb68 <buzzer_ON>
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	90 ec       	ldi	r25, 0xC0	; 192
     bb4:	aa ed       	ldi	r26, 0xDA	; 218
     bb6:	b5 e4       	ldi	r27, 0x45	; 69
     bb8:	8b 87       	std	Y+11, r24	; 0x0b
     bba:	9c 87       	std	Y+12, r25	; 0x0c
     bbc:	ad 87       	std	Y+13, r26	; 0x0d
     bbe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bc0:	6b 85       	ldd	r22, Y+11	; 0x0b
     bc2:	7c 85       	ldd	r23, Y+12	; 0x0c
     bc4:	8d 85       	ldd	r24, Y+13	; 0x0d
     bc6:	9e 85       	ldd	r25, Y+14	; 0x0e
     bc8:	20 e0       	ldi	r18, 0x00	; 0
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	4a e7       	ldi	r20, 0x7A	; 122
     bce:	53 e4       	ldi	r21, 0x43	; 67
     bd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bd4:	dc 01       	movw	r26, r24
     bd6:	cb 01       	movw	r24, r22
     bd8:	8f 83       	std	Y+7, r24	; 0x07
     bda:	98 87       	std	Y+8, r25	; 0x08
     bdc:	a9 87       	std	Y+9, r26	; 0x09
     bde:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     be0:	6f 81       	ldd	r22, Y+7	; 0x07
     be2:	78 85       	ldd	r23, Y+8	; 0x08
     be4:	89 85       	ldd	r24, Y+9	; 0x09
     be6:	9a 85       	ldd	r25, Y+10	; 0x0a
     be8:	20 e0       	ldi	r18, 0x00	; 0
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	40 e8       	ldi	r20, 0x80	; 128
     bee:	5f e3       	ldi	r21, 0x3F	; 63
     bf0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bf4:	88 23       	and	r24, r24
     bf6:	2c f4       	brge	.+10     	; 0xc02 <WrongMessage+0x6a>
		__ticks = 1;
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	9e 83       	std	Y+6, r25	; 0x06
     bfe:	8d 83       	std	Y+5, r24	; 0x05
     c00:	3f c0       	rjmp	.+126    	; 0xc80 <WrongMessage+0xe8>
	else if (__tmp > 65535)
     c02:	6f 81       	ldd	r22, Y+7	; 0x07
     c04:	78 85       	ldd	r23, Y+8	; 0x08
     c06:	89 85       	ldd	r24, Y+9	; 0x09
     c08:	9a 85       	ldd	r25, Y+10	; 0x0a
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	3f ef       	ldi	r19, 0xFF	; 255
     c0e:	4f e7       	ldi	r20, 0x7F	; 127
     c10:	57 e4       	ldi	r21, 0x47	; 71
     c12:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c16:	18 16       	cp	r1, r24
     c18:	4c f5       	brge	.+82     	; 0xc6c <WrongMessage+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c1a:	6b 85       	ldd	r22, Y+11	; 0x0b
     c1c:	7c 85       	ldd	r23, Y+12	; 0x0c
     c1e:	8d 85       	ldd	r24, Y+13	; 0x0d
     c20:	9e 85       	ldd	r25, Y+14	; 0x0e
     c22:	20 e0       	ldi	r18, 0x00	; 0
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	40 e2       	ldi	r20, 0x20	; 32
     c28:	51 e4       	ldi	r21, 0x41	; 65
     c2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c2e:	dc 01       	movw	r26, r24
     c30:	cb 01       	movw	r24, r22
     c32:	bc 01       	movw	r22, r24
     c34:	cd 01       	movw	r24, r26
     c36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c3a:	dc 01       	movw	r26, r24
     c3c:	cb 01       	movw	r24, r22
     c3e:	9e 83       	std	Y+6, r25	; 0x06
     c40:	8d 83       	std	Y+5, r24	; 0x05
     c42:	0f c0       	rjmp	.+30     	; 0xc62 <WrongMessage+0xca>
     c44:	89 e1       	ldi	r24, 0x19	; 25
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	9c 83       	std	Y+4, r25	; 0x04
     c4a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c4c:	8b 81       	ldd	r24, Y+3	; 0x03
     c4e:	9c 81       	ldd	r25, Y+4	; 0x04
     c50:	01 97       	sbiw	r24, 0x01	; 1
     c52:	f1 f7       	brne	.-4      	; 0xc50 <WrongMessage+0xb8>
     c54:	9c 83       	std	Y+4, r25	; 0x04
     c56:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c58:	8d 81       	ldd	r24, Y+5	; 0x05
     c5a:	9e 81       	ldd	r25, Y+6	; 0x06
     c5c:	01 97       	sbiw	r24, 0x01	; 1
     c5e:	9e 83       	std	Y+6, r25	; 0x06
     c60:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c62:	8d 81       	ldd	r24, Y+5	; 0x05
     c64:	9e 81       	ldd	r25, Y+6	; 0x06
     c66:	00 97       	sbiw	r24, 0x00	; 0
     c68:	69 f7       	brne	.-38     	; 0xc44 <WrongMessage+0xac>
     c6a:	14 c0       	rjmp	.+40     	; 0xc94 <WrongMessage+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c6c:	6f 81       	ldd	r22, Y+7	; 0x07
     c6e:	78 85       	ldd	r23, Y+8	; 0x08
     c70:	89 85       	ldd	r24, Y+9	; 0x09
     c72:	9a 85       	ldd	r25, Y+10	; 0x0a
     c74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c78:	dc 01       	movw	r26, r24
     c7a:	cb 01       	movw	r24, r22
     c7c:	9e 83       	std	Y+6, r25	; 0x06
     c7e:	8d 83       	std	Y+5, r24	; 0x05
     c80:	8d 81       	ldd	r24, Y+5	; 0x05
     c82:	9e 81       	ldd	r25, Y+6	; 0x06
     c84:	9a 83       	std	Y+2, r25	; 0x02
     c86:	89 83       	std	Y+1, r24	; 0x01
     c88:	89 81       	ldd	r24, Y+1	; 0x01
     c8a:	9a 81       	ldd	r25, Y+2	; 0x02
     c8c:	01 97       	sbiw	r24, 0x01	; 1
     c8e:	f1 f7       	brne	.-4      	; 0xc8c <WrongMessage+0xf4>
     c90:	9a 83       	std	Y+2, r25	; 0x02
     c92:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(7000);
	buzzer_OFF();
     c94:	0e 94 c0 05 	call	0xb80	; 0xb80 <buzzer_OFF>
}
     c98:	2e 96       	adiw	r28, 0x0e	; 14
     c9a:	0f b6       	in	r0, 0x3f	; 63
     c9c:	f8 94       	cli
     c9e:	de bf       	out	0x3e, r29	; 62
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	cd bf       	out	0x3d, r28	; 61
     ca4:	cf 91       	pop	r28
     ca6:	df 91       	pop	r29
     ca8:	08 95       	ret

00000caa <callBackAction>:
void callBackAction(void)
{
     caa:	df 93       	push	r29
     cac:	cf 93       	push	r28
     cae:	cd b7       	in	r28, 0x3d	; 61
     cb0:	de b7       	in	r29, 0x3e	; 62
     cb2:	2e 97       	sbiw	r28, 0x0e	; 14
     cb4:	0f b6       	in	r0, 0x3f	; 63
     cb6:	f8 94       	cli
     cb8:	de bf       	out	0x3e, r29	; 62
     cba:	0f be       	out	0x3f, r0	; 63
     cbc:	cd bf       	out	0x3d, r28	; 61
	g_tick++;
     cbe:	80 91 76 00 	lds	r24, 0x0076
     cc2:	90 91 77 00 	lds	r25, 0x0077
     cc6:	01 96       	adiw	r24, 0x01	; 1
     cc8:	90 93 77 00 	sts	0x0077, r25
     ccc:	80 93 76 00 	sts	0x0076, r24
	if (MotorOpenCW == 1)
     cd0:	80 91 6d 00 	lds	r24, 0x006D
     cd4:	81 30       	cpi	r24, 0x01	; 1
     cd6:	29 f4       	brne	.+10     	; 0xce2 <callBackAction+0x38>
	{
		DcMotor_Rotate(DC_MOTOR_ACW);
     cd8:	82 e0       	ldi	r24, 0x02	; 2
     cda:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DcMotor_Rotate>
		MotorOpenCW = 0;
     cde:	10 92 6d 00 	sts	0x006D, r1


	}
	if (MotorOpenACW == 1)
     ce2:	80 91 78 00 	lds	r24, 0x0078
     ce6:	81 30       	cpi	r24, 0x01	; 1
     ce8:	29 f4       	brne	.+10     	; 0xcf4 <callBackAction+0x4a>
	{
		DcMotor_Rotate(DC_MOTOR_CW);
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DcMotor_Rotate>
		MotorOpenACW = 0;
     cf0:	10 92 78 00 	sts	0x0078, r1

	}
	if(g_tick == NUMBER_OF_COMPARE_MTACHES_PER_15_SECOND)
     cf4:	80 91 76 00 	lds	r24, 0x0076
     cf8:	90 91 77 00 	lds	r25, 0x0077
     cfc:	21 e0       	ldi	r18, 0x01	; 1
     cfe:	82 3c       	cpi	r24, 0xC2	; 194
     d00:	92 07       	cpc	r25, r18
     d02:	09 f0       	breq	.+2      	; 0xd06 <callBackAction+0x5c>
     d04:	9e c0       	rjmp	.+316    	; 0xe42 <callBackAction+0x198>
	{
		DcMotor_Rotate(DC_MOTOR_STOP);
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DcMotor_Rotate>
		g_tick = 0;
     d0c:	10 92 77 00 	sts	0x0077, r1
     d10:	10 92 76 00 	sts	0x0076, r1
		rotate++;
     d14:	80 91 79 00 	lds	r24, 0x0079
     d18:	8f 5f       	subi	r24, 0xFF	; 255
     d1a:	80 93 79 00 	sts	0x0079, r24
		if (rotate == 1)
     d1e:	80 91 79 00 	lds	r24, 0x0079
     d22:	81 30       	cpi	r24, 0x01	; 1
     d24:	09 f0       	breq	.+2      	; 0xd28 <callBackAction+0x7e>
     d26:	7a c0       	rjmp	.+244    	; 0xe1c <callBackAction+0x172>
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	90 e8       	ldi	r25, 0x80	; 128
     d2c:	ab e3       	ldi	r26, 0x3B	; 59
     d2e:	b5 e4       	ldi	r27, 0x45	; 69
     d30:	8b 87       	std	Y+11, r24	; 0x0b
     d32:	9c 87       	std	Y+12, r25	; 0x0c
     d34:	ad 87       	std	Y+13, r26	; 0x0d
     d36:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d38:	6b 85       	ldd	r22, Y+11	; 0x0b
     d3a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d3c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d3e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d40:	20 e0       	ldi	r18, 0x00	; 0
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	4a e7       	ldi	r20, 0x7A	; 122
     d46:	53 e4       	ldi	r21, 0x43	; 67
     d48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d4c:	dc 01       	movw	r26, r24
     d4e:	cb 01       	movw	r24, r22
     d50:	8f 83       	std	Y+7, r24	; 0x07
     d52:	98 87       	std	Y+8, r25	; 0x08
     d54:	a9 87       	std	Y+9, r26	; 0x09
     d56:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d58:	6f 81       	ldd	r22, Y+7	; 0x07
     d5a:	78 85       	ldd	r23, Y+8	; 0x08
     d5c:	89 85       	ldd	r24, Y+9	; 0x09
     d5e:	9a 85       	ldd	r25, Y+10	; 0x0a
     d60:	20 e0       	ldi	r18, 0x00	; 0
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	40 e8       	ldi	r20, 0x80	; 128
     d66:	5f e3       	ldi	r21, 0x3F	; 63
     d68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d6c:	88 23       	and	r24, r24
     d6e:	2c f4       	brge	.+10     	; 0xd7a <callBackAction+0xd0>
		__ticks = 1;
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	9e 83       	std	Y+6, r25	; 0x06
     d76:	8d 83       	std	Y+5, r24	; 0x05
     d78:	3f c0       	rjmp	.+126    	; 0xdf8 <callBackAction+0x14e>
	else if (__tmp > 65535)
     d7a:	6f 81       	ldd	r22, Y+7	; 0x07
     d7c:	78 85       	ldd	r23, Y+8	; 0x08
     d7e:	89 85       	ldd	r24, Y+9	; 0x09
     d80:	9a 85       	ldd	r25, Y+10	; 0x0a
     d82:	20 e0       	ldi	r18, 0x00	; 0
     d84:	3f ef       	ldi	r19, 0xFF	; 255
     d86:	4f e7       	ldi	r20, 0x7F	; 127
     d88:	57 e4       	ldi	r21, 0x47	; 71
     d8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d8e:	18 16       	cp	r1, r24
     d90:	4c f5       	brge	.+82     	; 0xde4 <callBackAction+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d92:	6b 85       	ldd	r22, Y+11	; 0x0b
     d94:	7c 85       	ldd	r23, Y+12	; 0x0c
     d96:	8d 85       	ldd	r24, Y+13	; 0x0d
     d98:	9e 85       	ldd	r25, Y+14	; 0x0e
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	40 e2       	ldi	r20, 0x20	; 32
     da0:	51 e4       	ldi	r21, 0x41	; 65
     da2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     da6:	dc 01       	movw	r26, r24
     da8:	cb 01       	movw	r24, r22
     daa:	bc 01       	movw	r22, r24
     dac:	cd 01       	movw	r24, r26
     dae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     db2:	dc 01       	movw	r26, r24
     db4:	cb 01       	movw	r24, r22
     db6:	9e 83       	std	Y+6, r25	; 0x06
     db8:	8d 83       	std	Y+5, r24	; 0x05
     dba:	0f c0       	rjmp	.+30     	; 0xdda <callBackAction+0x130>
     dbc:	89 e1       	ldi	r24, 0x19	; 25
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	9c 83       	std	Y+4, r25	; 0x04
     dc2:	8b 83       	std	Y+3, r24	; 0x03
     dc4:	8b 81       	ldd	r24, Y+3	; 0x03
     dc6:	9c 81       	ldd	r25, Y+4	; 0x04
     dc8:	01 97       	sbiw	r24, 0x01	; 1
     dca:	f1 f7       	brne	.-4      	; 0xdc8 <callBackAction+0x11e>
     dcc:	9c 83       	std	Y+4, r25	; 0x04
     dce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dd0:	8d 81       	ldd	r24, Y+5	; 0x05
     dd2:	9e 81       	ldd	r25, Y+6	; 0x06
     dd4:	01 97       	sbiw	r24, 0x01	; 1
     dd6:	9e 83       	std	Y+6, r25	; 0x06
     dd8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dda:	8d 81       	ldd	r24, Y+5	; 0x05
     ddc:	9e 81       	ldd	r25, Y+6	; 0x06
     dde:	00 97       	sbiw	r24, 0x00	; 0
     de0:	69 f7       	brne	.-38     	; 0xdbc <callBackAction+0x112>
     de2:	14 c0       	rjmp	.+40     	; 0xe0c <callBackAction+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     de4:	6f 81       	ldd	r22, Y+7	; 0x07
     de6:	78 85       	ldd	r23, Y+8	; 0x08
     de8:	89 85       	ldd	r24, Y+9	; 0x09
     dea:	9a 85       	ldd	r25, Y+10	; 0x0a
     dec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     df0:	dc 01       	movw	r26, r24
     df2:	cb 01       	movw	r24, r22
     df4:	9e 83       	std	Y+6, r25	; 0x06
     df6:	8d 83       	std	Y+5, r24	; 0x05
     df8:	8d 81       	ldd	r24, Y+5	; 0x05
     dfa:	9e 81       	ldd	r25, Y+6	; 0x06
     dfc:	9a 83       	std	Y+2, r25	; 0x02
     dfe:	89 83       	std	Y+1, r24	; 0x01
     e00:	89 81       	ldd	r24, Y+1	; 0x01
     e02:	9a 81       	ldd	r25, Y+2	; 0x02
     e04:	01 97       	sbiw	r24, 0x01	; 1
     e06:	f1 f7       	brne	.-4      	; 0xe04 <callBackAction+0x15a>
     e08:	9a 83       	std	Y+2, r25	; 0x02
     e0a:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(3000);
			MotorOpenACW = 1;
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	80 93 78 00 	sts	0x0078, r24
			UART_sendByte(STATE);
     e12:	80 91 6e 00 	lds	r24, 0x006E
     e16:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <UART_sendByte>
     e1a:	13 c0       	rjmp	.+38     	; 0xe42 <callBackAction+0x198>
		}
		else if ( rotate == 2)
     e1c:	80 91 79 00 	lds	r24, 0x0079
     e20:	82 30       	cpi	r24, 0x02	; 2
     e22:	79 f4       	brne	.+30     	; 0xe42 <callBackAction+0x198>
		{
			Timer_DeInit(&Timer_x);
     e24:	88 e6       	ldi	r24, 0x68	; 104
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <Timer_DeInit>
			rotate = 0;
     e2c:	10 92 79 00 	sts	0x0079, r1
			MotorOpenCW = 1;
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	80 93 6d 00 	sts	0x006D, r24
			MotorOpenACW = 0;
     e36:	10 92 78 00 	sts	0x0078, r1
			UART_sendByte(STATE);
     e3a:	80 91 6e 00 	lds	r24, 0x006E
     e3e:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <UART_sendByte>
		}
	}
}
     e42:	2e 96       	adiw	r28, 0x0e	; 14
     e44:	0f b6       	in	r0, 0x3f	; 63
     e46:	f8 94       	cli
     e48:	de bf       	out	0x3e, r29	; 62
     e4a:	0f be       	out	0x3f, r0	; 63
     e4c:	cd bf       	out	0x3d, r28	; 61
     e4e:	cf 91       	pop	r28
     e50:	df 91       	pop	r29
     e52:	08 95       	ret

00000e54 <TimerStartWithMotor>:


void TimerStartWithMotor()
{
     e54:	df 93       	push	r29
     e56:	cf 93       	push	r28
     e58:	cd b7       	in	r28, 0x3d	; 61
     e5a:	de b7       	in	r29, 0x3e	; 62
	Timer_setCallBack(callBackAction);
     e5c:	85 e5       	ldi	r24, 0x55	; 85
     e5e:	96 e0       	ldi	r25, 0x06	; 6
     e60:	0e 94 4c 0c 	call	0x1898	; 0x1898 <Timer_setCallBack>
	Timer_init(&Timer_x);
     e64:	88 e6       	ldi	r24, 0x68	; 104
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <Timer_init>
	DcMotor_Init();
     e6c:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <DcMotor_Init>
	g_tick = 0;
     e70:	10 92 77 00 	sts	0x0077, r1
     e74:	10 92 76 00 	sts	0x0076, r1

}
     e78:	cf 91       	pop	r28
     e7a:	df 91       	pop	r29
     e7c:	08 95       	ret

00000e7e <CheckPassword>:
boolean CheckPassword(void)
{
     e7e:	df 93       	push	r29
     e80:	cf 93       	push	r28
     e82:	00 d0       	rcall	.+0      	; 0xe84 <CheckPassword+0x6>
     e84:	00 d0       	rcall	.+0      	; 0xe86 <CheckPassword+0x8>
     e86:	0f 92       	push	r0
     e88:	cd b7       	in	r28, 0x3d	; 61
     e8a:	de b7       	in	r29, 0x3e	; 62
	uint8 temp1;
	uint8 temp2;
	uint8 j = 5 ;
     e8c:	85 e0       	ldi	r24, 0x05	; 5
     e8e:	8a 83       	std	Y+2, r24	; 0x02
	for(uint8 i = 0; i<5 ; i++)
     e90:	19 82       	std	Y+1, r1	; 0x01
     e92:	20 c0       	rjmp	.+64     	; 0xed4 <CheckPassword+0x56>
	{
		EEPROM_readByte(i,&temp1); // from 0 to 4 have password 1
     e94:	89 81       	ldd	r24, Y+1	; 0x01
     e96:	88 2f       	mov	r24, r24
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	9e 01       	movw	r18, r28
     e9c:	2d 5f       	subi	r18, 0xFD	; 253
     e9e:	3f 4f       	sbci	r19, 0xFF	; 255
     ea0:	b9 01       	movw	r22, r18
     ea2:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <EEPROM_readByte>
		EEPROM_readByte(j, &temp2); // from 5 to 9 have password 2
     ea6:	8a 81       	ldd	r24, Y+2	; 0x02
     ea8:	88 2f       	mov	r24, r24
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	9e 01       	movw	r18, r28
     eae:	2c 5f       	subi	r18, 0xFC	; 252
     eb0:	3f 4f       	sbci	r19, 0xFF	; 255
     eb2:	b9 01       	movw	r22, r18
     eb4:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <EEPROM_readByte>
		if( temp1 != temp2 ) // compare between them
     eb8:	9b 81       	ldd	r25, Y+3	; 0x03
     eba:	8c 81       	ldd	r24, Y+4	; 0x04
     ebc:	98 17       	cp	r25, r24
     ebe:	21 f0       	breq	.+8      	; 0xec8 <CheckPassword+0x4a>
		{
			WrongMessage();
     ec0:	0e 94 cc 05 	call	0xb98	; 0xb98 <WrongMessage>
			return FALSE;
     ec4:	1d 82       	std	Y+5, r1	; 0x05
     ec6:	0b c0       	rjmp	.+22     	; 0xede <CheckPassword+0x60>
		}
		else
		{
			j++;
     ec8:	8a 81       	ldd	r24, Y+2	; 0x02
     eca:	8f 5f       	subi	r24, 0xFF	; 255
     ecc:	8a 83       	std	Y+2, r24	; 0x02
boolean CheckPassword(void)
{
	uint8 temp1;
	uint8 temp2;
	uint8 j = 5 ;
	for(uint8 i = 0; i<5 ; i++)
     ece:	89 81       	ldd	r24, Y+1	; 0x01
     ed0:	8f 5f       	subi	r24, 0xFF	; 255
     ed2:	89 83       	std	Y+1, r24	; 0x01
     ed4:	89 81       	ldd	r24, Y+1	; 0x01
     ed6:	85 30       	cpi	r24, 0x05	; 5
     ed8:	e8 f2       	brcs	.-70     	; 0xe94 <CheckPassword+0x16>
		{
			j++;
		}

	}
	return TRUE;
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	8d 83       	std	Y+5, r24	; 0x05
     ede:	8d 81       	ldd	r24, Y+5	; 0x05
}
     ee0:	0f 90       	pop	r0
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	cf 91       	pop	r28
     eec:	df 91       	pop	r29
     eee:	08 95       	ret

00000ef0 <ScreenOpenDoor>:
uint8 ScreenOpenDoor(uint8 *value)
{
     ef0:	df 93       	push	r29
     ef2:	cf 93       	push	r28
     ef4:	00 d0       	rcall	.+0      	; 0xef6 <ScreenOpenDoor+0x6>
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <ScreenOpenDoor+0x8>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <ScreenOpenDoor+0xa>
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
     efe:	9d 83       	std	Y+5, r25	; 0x05
     f00:	8c 83       	std	Y+4, r24	; 0x04

	if(*value == '=')
     f02:	ec 81       	ldd	r30, Y+4	; 0x04
     f04:	fd 81       	ldd	r31, Y+5	; 0x05
     f06:	80 81       	ld	r24, Z
     f08:	8d 33       	cpi	r24, 0x3D	; 61
     f0a:	09 f0       	breq	.+2      	; 0xf0e <ScreenOpenDoor+0x1e>
     f0c:	41 c0       	rjmp	.+130    	; 0xf90 <ScreenOpenDoor+0xa0>
	{
		index = 0;
     f0e:	10 92 7b 00 	sts	0x007B, r1
		uint8 temp=0;
     f12:	1b 82       	std	Y+3, r1	; 0x03

		for(int i = 0 ; i <5 ; i++)
     f14:	1a 82       	std	Y+2, r1	; 0x02
     f16:	19 82       	std	Y+1, r1	; 0x01
     f18:	29 c0       	rjmp	.+82     	; 0xf6c <ScreenOpenDoor+0x7c>
		{
			EEPROM_readByte(i, &temp);
     f1a:	89 81       	ldd	r24, Y+1	; 0x01
     f1c:	9a 81       	ldd	r25, Y+2	; 0x02
     f1e:	9e 01       	movw	r18, r28
     f20:	2d 5f       	subi	r18, 0xFD	; 253
     f22:	3f 4f       	sbci	r19, 0xFF	; 255
     f24:	b9 01       	movw	r22, r18
     f26:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <EEPROM_readByte>
			if(Password[i] != temp)
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	9a 81       	ldd	r25, Y+2	; 0x02
     f2e:	fc 01       	movw	r30, r24
     f30:	ed 57       	subi	r30, 0x7D	; 125
     f32:	ff 4f       	sbci	r31, 0xFF	; 255
     f34:	90 81       	ld	r25, Z
     f36:	8b 81       	ldd	r24, Y+3	; 0x03
     f38:	98 17       	cp	r25, r24
     f3a:	99 f0       	breq	.+38     	; 0xf62 <ScreenOpenDoor+0x72>
			{
				WrongMessage();
     f3c:	0e 94 cc 05 	call	0xb98	; 0xb98 <WrongMessage>
				UART_sendByte(TRUE);
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <UART_sendByte>
				STATE = 6;
     f46:	86 e0       	ldi	r24, 0x06	; 6
     f48:	80 93 6e 00 	sts	0x006E, r24
				UART_sendByte(STATE);
     f4c:	80 91 6e 00 	lds	r24, 0x006E
     f50:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <UART_sendByte>
				STATE = 3;
     f54:	83 e0       	ldi	r24, 0x03	; 3
     f56:	80 93 6e 00 	sts	0x006E, r24
				return 0;
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	8e 83       	std	Y+6, r24	; 0x06
		Password[index] = *value;
		index++;
		UART_sendByte(FALSE);
	}

}
     f5e:	8e 81       	ldd	r24, Y+6	; 0x06
     f60:	2a c0       	rjmp	.+84     	; 0xfb6 <ScreenOpenDoor+0xc6>
	if(*value == '=')
	{
		index = 0;
		uint8 temp=0;

		for(int i = 0 ; i <5 ; i++)
     f62:	89 81       	ldd	r24, Y+1	; 0x01
     f64:	9a 81       	ldd	r25, Y+2	; 0x02
     f66:	01 96       	adiw	r24, 0x01	; 1
     f68:	9a 83       	std	Y+2, r25	; 0x02
     f6a:	89 83       	std	Y+1, r24	; 0x01
     f6c:	89 81       	ldd	r24, Y+1	; 0x01
     f6e:	9a 81       	ldd	r25, Y+2	; 0x02
     f70:	85 30       	cpi	r24, 0x05	; 5
     f72:	91 05       	cpc	r25, r1
     f74:	94 f2       	brlt	.-92     	; 0xf1a <ScreenOpenDoor+0x2a>
			{
				continue;
			}
		}

		UART_sendByte(TRUE);
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <UART_sendByte>
		STATE = 3;
     f7c:	83 e0       	ldi	r24, 0x03	; 3
     f7e:	80 93 6e 00 	sts	0x006E, r24
		UART_sendByte(STATE);
     f82:	80 91 6e 00 	lds	r24, 0x006E
     f86:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <UART_sendByte>
		TimerStartWithMotor();
     f8a:	0e 94 2a 07 	call	0xe54	; 0xe54 <TimerStartWithMotor>
     f8e:	13 c0       	rjmp	.+38     	; 0xfb6 <ScreenOpenDoor+0xc6>

		//////////////////////////////////////////////////////////////////////////////////////
	}
	else
	{
		Password[index] = *value;
     f90:	80 91 7b 00 	lds	r24, 0x007B
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	ec 81       	ldd	r30, Y+4	; 0x04
     f9a:	fd 81       	ldd	r31, Y+5	; 0x05
     f9c:	20 81       	ld	r18, Z
     f9e:	fc 01       	movw	r30, r24
     fa0:	ed 57       	subi	r30, 0x7D	; 125
     fa2:	ff 4f       	sbci	r31, 0xFF	; 255
     fa4:	20 83       	st	Z, r18
		index++;
     fa6:	80 91 7b 00 	lds	r24, 0x007B
     faa:	8f 5f       	subi	r24, 0xFF	; 255
     fac:	80 93 7b 00 	sts	0x007B, r24
		UART_sendByte(FALSE);
     fb0:	80 e0       	ldi	r24, 0x00	; 0
     fb2:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <UART_sendByte>
	}

}
     fb6:	26 96       	adiw	r28, 0x06	; 6
     fb8:	0f b6       	in	r0, 0x3f	; 63
     fba:	f8 94       	cli
     fbc:	de bf       	out	0x3e, r29	; 62
     fbe:	0f be       	out	0x3f, r0	; 63
     fc0:	cd bf       	out	0x3d, r28	; 61
     fc2:	cf 91       	pop	r28
     fc4:	df 91       	pop	r29
     fc6:	08 95       	ret

00000fc8 <ScreenChangePassword>:
uint8 ScreenChangePassword(uint8 *value)
{
     fc8:	df 93       	push	r29
     fca:	cf 93       	push	r28
     fcc:	00 d0       	rcall	.+0      	; 0xfce <ScreenChangePassword+0x6>
     fce:	00 d0       	rcall	.+0      	; 0xfd0 <ScreenChangePassword+0x8>
     fd0:	00 d0       	rcall	.+0      	; 0xfd2 <ScreenChangePassword+0xa>
     fd2:	cd b7       	in	r28, 0x3d	; 61
     fd4:	de b7       	in	r29, 0x3e	; 62
     fd6:	9d 83       	std	Y+5, r25	; 0x05
     fd8:	8c 83       	std	Y+4, r24	; 0x04
	if(*value == '=')
     fda:	ec 81       	ldd	r30, Y+4	; 0x04
     fdc:	fd 81       	ldd	r31, Y+5	; 0x05
     fde:	80 81       	ld	r24, Z
     fe0:	8d 33       	cpi	r24, 0x3D	; 61
     fe2:	e1 f5       	brne	.+120    	; 0x105c <ScreenChangePassword+0x94>
	{
		index = 0;
     fe4:	10 92 7b 00 	sts	0x007B, r1
		uint8 temp=0;
     fe8:	1b 82       	std	Y+3, r1	; 0x03

		for(int i = 0 ; i <5 ; i++)
     fea:	1a 82       	std	Y+2, r1	; 0x02
     fec:	19 82       	std	Y+1, r1	; 0x01
     fee:	26 c0       	rjmp	.+76     	; 0x103c <ScreenChangePassword+0x74>
		{
			EEPROM_readByte(i, &temp);
     ff0:	89 81       	ldd	r24, Y+1	; 0x01
     ff2:	9a 81       	ldd	r25, Y+2	; 0x02
     ff4:	9e 01       	movw	r18, r28
     ff6:	2d 5f       	subi	r18, 0xFD	; 253
     ff8:	3f 4f       	sbci	r19, 0xFF	; 255
     ffa:	b9 01       	movw	r22, r18
     ffc:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <EEPROM_readByte>
			if(Password[i] != temp)
    1000:	89 81       	ldd	r24, Y+1	; 0x01
    1002:	9a 81       	ldd	r25, Y+2	; 0x02
    1004:	fc 01       	movw	r30, r24
    1006:	ed 57       	subi	r30, 0x7D	; 125
    1008:	ff 4f       	sbci	r31, 0xFF	; 255
    100a:	90 81       	ld	r25, Z
    100c:	8b 81       	ldd	r24, Y+3	; 0x03
    100e:	98 17       	cp	r25, r24
    1010:	81 f0       	breq	.+32     	; 0x1032 <ScreenChangePassword+0x6a>
			{
				WrongMessage();
    1012:	0e 94 cc 05 	call	0xb98	; 0xb98 <WrongMessage>
				UART_sendByte(TRUE);
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <UART_sendByte>
				STATE = 3;
    101c:	83 e0       	ldi	r24, 0x03	; 3
    101e:	80 93 6e 00 	sts	0x006E, r24
				UART_sendByte(STATE);
    1022:	80 91 6e 00 	lds	r24, 0x006E
    1026:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <UART_sendByte>
				return 0;
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	8e 83       	std	Y+6, r24	; 0x06
	{
		Password[index] = *value;
		index++;
		UART_sendByte(FALSE);
	}
}
    102e:	8e 81       	ldd	r24, Y+6	; 0x06
    1030:	28 c0       	rjmp	.+80     	; 0x1082 <ScreenChangePassword+0xba>
	if(*value == '=')
	{
		index = 0;
		uint8 temp=0;

		for(int i = 0 ; i <5 ; i++)
    1032:	89 81       	ldd	r24, Y+1	; 0x01
    1034:	9a 81       	ldd	r25, Y+2	; 0x02
    1036:	01 96       	adiw	r24, 0x01	; 1
    1038:	9a 83       	std	Y+2, r25	; 0x02
    103a:	89 83       	std	Y+1, r24	; 0x01
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	9a 81       	ldd	r25, Y+2	; 0x02
    1040:	85 30       	cpi	r24, 0x05	; 5
    1042:	91 05       	cpc	r25, r1
    1044:	ac f2       	brlt	.-86     	; 0xff0 <ScreenChangePassword+0x28>

				continue;
			}
		}

		UART_sendByte(TRUE);
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <UART_sendByte>
		STATE = 1;
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	80 93 6e 00 	sts	0x006E, r24
		UART_sendByte(STATE);
    1052:	80 91 6e 00 	lds	r24, 0x006E
    1056:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <UART_sendByte>
    105a:	13 c0       	rjmp	.+38     	; 0x1082 <ScreenChangePassword+0xba>
	}
	else
	{
		Password[index] = *value;
    105c:	80 91 7b 00 	lds	r24, 0x007B
    1060:	88 2f       	mov	r24, r24
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	ec 81       	ldd	r30, Y+4	; 0x04
    1066:	fd 81       	ldd	r31, Y+5	; 0x05
    1068:	20 81       	ld	r18, Z
    106a:	fc 01       	movw	r30, r24
    106c:	ed 57       	subi	r30, 0x7D	; 125
    106e:	ff 4f       	sbci	r31, 0xFF	; 255
    1070:	20 83       	st	Z, r18
		index++;
    1072:	80 91 7b 00 	lds	r24, 0x007B
    1076:	8f 5f       	subi	r24, 0xFF	; 255
    1078:	80 93 7b 00 	sts	0x007B, r24
		UART_sendByte(FALSE);
    107c:	80 e0       	ldi	r24, 0x00	; 0
    107e:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <UART_sendByte>
	}
}
    1082:	26 96       	adiw	r28, 0x06	; 6
    1084:	0f b6       	in	r0, 0x3f	; 63
    1086:	f8 94       	cli
    1088:	de bf       	out	0x3e, r29	; 62
    108a:	0f be       	out	0x3f, r0	; 63
    108c:	cd bf       	out	0x3d, r28	; 61
    108e:	cf 91       	pop	r28
    1090:	df 91       	pop	r29
    1092:	08 95       	ret

00001094 <ScreenPlusMinus>:
void ScreenPlusMinus (uint8 *value)
{
    1094:	df 93       	push	r29
    1096:	cf 93       	push	r28
    1098:	00 d0       	rcall	.+0      	; 0x109a <ScreenPlusMinus+0x6>
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62
    109e:	9a 83       	std	Y+2, r25	; 0x02
    10a0:	89 83       	std	Y+1, r24	; 0x01
	if(*value == '-')
    10a2:	e9 81       	ldd	r30, Y+1	; 0x01
    10a4:	fa 81       	ldd	r31, Y+2	; 0x02
    10a6:	80 81       	ld	r24, Z
    10a8:	8d 32       	cpi	r24, 0x2D	; 45
    10aa:	59 f4       	brne	.+22     	; 0x10c2 <ScreenPlusMinus+0x2e>
	{
		STATE = 5;
    10ac:	85 e0       	ldi	r24, 0x05	; 5
    10ae:	80 93 6e 00 	sts	0x006E, r24
		UART_sendByte(TRUE);
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <UART_sendByte>
		UART_sendByte(STATE);
    10b8:	80 91 6e 00 	lds	r24, 0x006E
    10bc:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <UART_sendByte>
    10c0:	0f c0       	rjmp	.+30     	; 0x10e0 <ScreenPlusMinus+0x4c>
	}
	else if(*value == '+')
    10c2:	e9 81       	ldd	r30, Y+1	; 0x01
    10c4:	fa 81       	ldd	r31, Y+2	; 0x02
    10c6:	80 81       	ld	r24, Z
    10c8:	8b 32       	cpi	r24, 0x2B	; 43
    10ca:	51 f4       	brne	.+20     	; 0x10e0 <ScreenPlusMinus+0x4c>
	{
		STATE = 4;
    10cc:	84 e0       	ldi	r24, 0x04	; 4
    10ce:	80 93 6e 00 	sts	0x006E, r24
		UART_sendByte(TRUE);
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <UART_sendByte>
		UART_sendByte(STATE);
    10d8:	80 91 6e 00 	lds	r24, 0x006E
    10dc:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <UART_sendByte>
	}
}
    10e0:	0f 90       	pop	r0
    10e2:	0f 90       	pop	r0
    10e4:	cf 91       	pop	r28
    10e6:	df 91       	pop	r29
    10e8:	08 95       	ret

000010ea <ScreenEnterNewPassword>:
void ScreenEnterNewPassword(uint8 *value)
{
    10ea:	df 93       	push	r29
    10ec:	cf 93       	push	r28
    10ee:	cd b7       	in	r28, 0x3d	; 61
    10f0:	de b7       	in	r29, 0x3e	; 62
    10f2:	a1 97       	sbiw	r28, 0x21	; 33
    10f4:	0f b6       	in	r0, 0x3f	; 63
    10f6:	f8 94       	cli
    10f8:	de bf       	out	0x3e, r29	; 62
    10fa:	0f be       	out	0x3f, r0	; 63
    10fc:	cd bf       	out	0x3d, r28	; 61
    10fe:	99 a3       	std	Y+33, r25	; 0x21
    1100:	88 a3       	std	Y+32, r24	; 0x20
	if(*value  == '=')
    1102:	e8 a1       	ldd	r30, Y+32	; 0x20
    1104:	f9 a1       	ldd	r31, Y+33	; 0x21
    1106:	80 81       	ld	r24, Z
    1108:	8d 33       	cpi	r24, 0x3D	; 61
    110a:	09 f0       	breq	.+2      	; 0x110e <ScreenEnterNewPassword+0x24>
    110c:	0b c1       	rjmp	.+534    	; 0x1324 <ScreenEnterNewPassword+0x23a>
	{

		index = 0;
    110e:	10 92 7b 00 	sts	0x007B, r1
		STATE = 2;
    1112:	82 e0       	ldi	r24, 0x02	; 2
    1114:	80 93 6e 00 	sts	0x006E, r24

		uint8 temp = 0;
    1118:	1f 8e       	std	Y+31, r1	; 0x1f
		for(int i =0 ; i <5 ; i++)
    111a:	1e 8e       	std	Y+30, r1	; 0x1e
    111c:	1d 8e       	std	Y+29, r1	; 0x1d
    111e:	7f c0       	rjmp	.+254    	; 0x121e <ScreenEnterNewPassword+0x134>
		{
			EEPROM_readByte(i, &temp);
    1120:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1122:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1124:	9e 01       	movw	r18, r28
    1126:	21 5e       	subi	r18, 0xE1	; 225
    1128:	3f 4f       	sbci	r19, 0xFF	; 255
    112a:	b9 01       	movw	r22, r18
    112c:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <EEPROM_readByte>
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	aa e7       	ldi	r26, 0x7A	; 122
    1136:	b4 e4       	ldi	r27, 0x44	; 68
    1138:	89 8f       	std	Y+25, r24	; 0x19
    113a:	9a 8f       	std	Y+26, r25	; 0x1a
    113c:	ab 8f       	std	Y+27, r26	; 0x1b
    113e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1140:	69 8d       	ldd	r22, Y+25	; 0x19
    1142:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1144:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1146:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1148:	20 e0       	ldi	r18, 0x00	; 0
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	4a e7       	ldi	r20, 0x7A	; 122
    114e:	53 e4       	ldi	r21, 0x43	; 67
    1150:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1154:	dc 01       	movw	r26, r24
    1156:	cb 01       	movw	r24, r22
    1158:	8d 8b       	std	Y+21, r24	; 0x15
    115a:	9e 8b       	std	Y+22, r25	; 0x16
    115c:	af 8b       	std	Y+23, r26	; 0x17
    115e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1160:	6d 89       	ldd	r22, Y+21	; 0x15
    1162:	7e 89       	ldd	r23, Y+22	; 0x16
    1164:	8f 89       	ldd	r24, Y+23	; 0x17
    1166:	98 8d       	ldd	r25, Y+24	; 0x18
    1168:	20 e0       	ldi	r18, 0x00	; 0
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	40 e8       	ldi	r20, 0x80	; 128
    116e:	5f e3       	ldi	r21, 0x3F	; 63
    1170:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1174:	88 23       	and	r24, r24
    1176:	2c f4       	brge	.+10     	; 0x1182 <ScreenEnterNewPassword+0x98>
		__ticks = 1;
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	9c 8b       	std	Y+20, r25	; 0x14
    117e:	8b 8b       	std	Y+19, r24	; 0x13
    1180:	3f c0       	rjmp	.+126    	; 0x1200 <ScreenEnterNewPassword+0x116>
	else if (__tmp > 65535)
    1182:	6d 89       	ldd	r22, Y+21	; 0x15
    1184:	7e 89       	ldd	r23, Y+22	; 0x16
    1186:	8f 89       	ldd	r24, Y+23	; 0x17
    1188:	98 8d       	ldd	r25, Y+24	; 0x18
    118a:	20 e0       	ldi	r18, 0x00	; 0
    118c:	3f ef       	ldi	r19, 0xFF	; 255
    118e:	4f e7       	ldi	r20, 0x7F	; 127
    1190:	57 e4       	ldi	r21, 0x47	; 71
    1192:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1196:	18 16       	cp	r1, r24
    1198:	4c f5       	brge	.+82     	; 0x11ec <ScreenEnterNewPassword+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    119a:	69 8d       	ldd	r22, Y+25	; 0x19
    119c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    119e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11a2:	20 e0       	ldi	r18, 0x00	; 0
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	40 e2       	ldi	r20, 0x20	; 32
    11a8:	51 e4       	ldi	r21, 0x41	; 65
    11aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11ae:	dc 01       	movw	r26, r24
    11b0:	cb 01       	movw	r24, r22
    11b2:	bc 01       	movw	r22, r24
    11b4:	cd 01       	movw	r24, r26
    11b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ba:	dc 01       	movw	r26, r24
    11bc:	cb 01       	movw	r24, r22
    11be:	9c 8b       	std	Y+20, r25	; 0x14
    11c0:	8b 8b       	std	Y+19, r24	; 0x13
    11c2:	0f c0       	rjmp	.+30     	; 0x11e2 <ScreenEnterNewPassword+0xf8>
    11c4:	89 e1       	ldi	r24, 0x19	; 25
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	9a 8b       	std	Y+18, r25	; 0x12
    11ca:	89 8b       	std	Y+17, r24	; 0x11
    11cc:	89 89       	ldd	r24, Y+17	; 0x11
    11ce:	9a 89       	ldd	r25, Y+18	; 0x12
    11d0:	01 97       	sbiw	r24, 0x01	; 1
    11d2:	f1 f7       	brne	.-4      	; 0x11d0 <ScreenEnterNewPassword+0xe6>
    11d4:	9a 8b       	std	Y+18, r25	; 0x12
    11d6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11d8:	8b 89       	ldd	r24, Y+19	; 0x13
    11da:	9c 89       	ldd	r25, Y+20	; 0x14
    11dc:	01 97       	sbiw	r24, 0x01	; 1
    11de:	9c 8b       	std	Y+20, r25	; 0x14
    11e0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11e2:	8b 89       	ldd	r24, Y+19	; 0x13
    11e4:	9c 89       	ldd	r25, Y+20	; 0x14
    11e6:	00 97       	sbiw	r24, 0x00	; 0
    11e8:	69 f7       	brne	.-38     	; 0x11c4 <ScreenEnterNewPassword+0xda>
    11ea:	14 c0       	rjmp	.+40     	; 0x1214 <ScreenEnterNewPassword+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11ec:	6d 89       	ldd	r22, Y+21	; 0x15
    11ee:	7e 89       	ldd	r23, Y+22	; 0x16
    11f0:	8f 89       	ldd	r24, Y+23	; 0x17
    11f2:	98 8d       	ldd	r25, Y+24	; 0x18
    11f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11f8:	dc 01       	movw	r26, r24
    11fa:	cb 01       	movw	r24, r22
    11fc:	9c 8b       	std	Y+20, r25	; 0x14
    11fe:	8b 8b       	std	Y+19, r24	; 0x13
    1200:	8b 89       	ldd	r24, Y+19	; 0x13
    1202:	9c 89       	ldd	r25, Y+20	; 0x14
    1204:	98 8b       	std	Y+16, r25	; 0x10
    1206:	8f 87       	std	Y+15, r24	; 0x0f
    1208:	8f 85       	ldd	r24, Y+15	; 0x0f
    120a:	98 89       	ldd	r25, Y+16	; 0x10
    120c:	01 97       	sbiw	r24, 0x01	; 1
    120e:	f1 f7       	brne	.-4      	; 0x120c <ScreenEnterNewPassword+0x122>
    1210:	98 8b       	std	Y+16, r25	; 0x10
    1212:	8f 87       	std	Y+15, r24	; 0x0f

		index = 0;
		STATE = 2;

		uint8 temp = 0;
		for(int i =0 ; i <5 ; i++)
    1214:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1216:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1218:	01 96       	adiw	r24, 0x01	; 1
    121a:	9e 8f       	std	Y+30, r25	; 0x1e
    121c:	8d 8f       	std	Y+29, r24	; 0x1d
    121e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1220:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1222:	85 30       	cpi	r24, 0x05	; 5
    1224:	91 05       	cpc	r25, r1
    1226:	0c f4       	brge	.+2      	; 0x122a <ScreenEnterNewPassword+0x140>
    1228:	7b cf       	rjmp	.-266    	; 0x1120 <ScreenEnterNewPassword+0x36>
		{
			EEPROM_readByte(i, &temp);
			_delay_ms(1000);
		}
		*value = 0;
    122a:	e8 a1       	ldd	r30, Y+32	; 0x20
    122c:	f9 a1       	ldd	r31, Y+33	; 0x21
    122e:	10 82       	st	Z, r1
		UART_sendByte(TRUE);
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <UART_sendByte>
    1236:	80 e0       	ldi	r24, 0x00	; 0
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	a0 ea       	ldi	r26, 0xA0	; 160
    123c:	b1 e4       	ldi	r27, 0x41	; 65
    123e:	8b 87       	std	Y+11, r24	; 0x0b
    1240:	9c 87       	std	Y+12, r25	; 0x0c
    1242:	ad 87       	std	Y+13, r26	; 0x0d
    1244:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1246:	6b 85       	ldd	r22, Y+11	; 0x0b
    1248:	7c 85       	ldd	r23, Y+12	; 0x0c
    124a:	8d 85       	ldd	r24, Y+13	; 0x0d
    124c:	9e 85       	ldd	r25, Y+14	; 0x0e
    124e:	20 e0       	ldi	r18, 0x00	; 0
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	4a e7       	ldi	r20, 0x7A	; 122
    1254:	53 e4       	ldi	r21, 0x43	; 67
    1256:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    125a:	dc 01       	movw	r26, r24
    125c:	cb 01       	movw	r24, r22
    125e:	8f 83       	std	Y+7, r24	; 0x07
    1260:	98 87       	std	Y+8, r25	; 0x08
    1262:	a9 87       	std	Y+9, r26	; 0x09
    1264:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1266:	6f 81       	ldd	r22, Y+7	; 0x07
    1268:	78 85       	ldd	r23, Y+8	; 0x08
    126a:	89 85       	ldd	r24, Y+9	; 0x09
    126c:	9a 85       	ldd	r25, Y+10	; 0x0a
    126e:	20 e0       	ldi	r18, 0x00	; 0
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	40 e8       	ldi	r20, 0x80	; 128
    1274:	5f e3       	ldi	r21, 0x3F	; 63
    1276:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    127a:	88 23       	and	r24, r24
    127c:	2c f4       	brge	.+10     	; 0x1288 <ScreenEnterNewPassword+0x19e>
		__ticks = 1;
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	9e 83       	std	Y+6, r25	; 0x06
    1284:	8d 83       	std	Y+5, r24	; 0x05
    1286:	3f c0       	rjmp	.+126    	; 0x1306 <ScreenEnterNewPassword+0x21c>
	else if (__tmp > 65535)
    1288:	6f 81       	ldd	r22, Y+7	; 0x07
    128a:	78 85       	ldd	r23, Y+8	; 0x08
    128c:	89 85       	ldd	r24, Y+9	; 0x09
    128e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1290:	20 e0       	ldi	r18, 0x00	; 0
    1292:	3f ef       	ldi	r19, 0xFF	; 255
    1294:	4f e7       	ldi	r20, 0x7F	; 127
    1296:	57 e4       	ldi	r21, 0x47	; 71
    1298:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    129c:	18 16       	cp	r1, r24
    129e:	4c f5       	brge	.+82     	; 0x12f2 <ScreenEnterNewPassword+0x208>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    12a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    12a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    12a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    12a8:	20 e0       	ldi	r18, 0x00	; 0
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	40 e2       	ldi	r20, 0x20	; 32
    12ae:	51 e4       	ldi	r21, 0x41	; 65
    12b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12b4:	dc 01       	movw	r26, r24
    12b6:	cb 01       	movw	r24, r22
    12b8:	bc 01       	movw	r22, r24
    12ba:	cd 01       	movw	r24, r26
    12bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12c0:	dc 01       	movw	r26, r24
    12c2:	cb 01       	movw	r24, r22
    12c4:	9e 83       	std	Y+6, r25	; 0x06
    12c6:	8d 83       	std	Y+5, r24	; 0x05
    12c8:	0f c0       	rjmp	.+30     	; 0x12e8 <ScreenEnterNewPassword+0x1fe>
    12ca:	89 e1       	ldi	r24, 0x19	; 25
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	9c 83       	std	Y+4, r25	; 0x04
    12d0:	8b 83       	std	Y+3, r24	; 0x03
    12d2:	8b 81       	ldd	r24, Y+3	; 0x03
    12d4:	9c 81       	ldd	r25, Y+4	; 0x04
    12d6:	01 97       	sbiw	r24, 0x01	; 1
    12d8:	f1 f7       	brne	.-4      	; 0x12d6 <ScreenEnterNewPassword+0x1ec>
    12da:	9c 83       	std	Y+4, r25	; 0x04
    12dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12de:	8d 81       	ldd	r24, Y+5	; 0x05
    12e0:	9e 81       	ldd	r25, Y+6	; 0x06
    12e2:	01 97       	sbiw	r24, 0x01	; 1
    12e4:	9e 83       	std	Y+6, r25	; 0x06
    12e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12e8:	8d 81       	ldd	r24, Y+5	; 0x05
    12ea:	9e 81       	ldd	r25, Y+6	; 0x06
    12ec:	00 97       	sbiw	r24, 0x00	; 0
    12ee:	69 f7       	brne	.-38     	; 0x12ca <ScreenEnterNewPassword+0x1e0>
    12f0:	14 c0       	rjmp	.+40     	; 0x131a <ScreenEnterNewPassword+0x230>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12f2:	6f 81       	ldd	r22, Y+7	; 0x07
    12f4:	78 85       	ldd	r23, Y+8	; 0x08
    12f6:	89 85       	ldd	r24, Y+9	; 0x09
    12f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    12fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12fe:	dc 01       	movw	r26, r24
    1300:	cb 01       	movw	r24, r22
    1302:	9e 83       	std	Y+6, r25	; 0x06
    1304:	8d 83       	std	Y+5, r24	; 0x05
    1306:	8d 81       	ldd	r24, Y+5	; 0x05
    1308:	9e 81       	ldd	r25, Y+6	; 0x06
    130a:	9a 83       	std	Y+2, r25	; 0x02
    130c:	89 83       	std	Y+1, r24	; 0x01
    130e:	89 81       	ldd	r24, Y+1	; 0x01
    1310:	9a 81       	ldd	r25, Y+2	; 0x02
    1312:	01 97       	sbiw	r24, 0x01	; 1
    1314:	f1 f7       	brne	.-4      	; 0x1312 <ScreenEnterNewPassword+0x228>
    1316:	9a 83       	std	Y+2, r25	; 0x02
    1318:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(20);
		UART_sendByte(STATE);
    131a:	80 91 6e 00 	lds	r24, 0x006E
    131e:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <UART_sendByte>
    1322:	12 c0       	rjmp	.+36     	; 0x1348 <ScreenEnterNewPassword+0x25e>
	}
	else
	{
		EEPROM_writeByte(incrementer, *value);
    1324:	80 91 7a 00 	lds	r24, 0x007A
    1328:	88 2f       	mov	r24, r24
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	e8 a1       	ldd	r30, Y+32	; 0x20
    132e:	f9 a1       	ldd	r31, Y+33	; 0x21
    1330:	20 81       	ld	r18, Z
    1332:	62 2f       	mov	r22, r18
    1334:	0e 94 cd 0c 	call	0x199a	; 0x199a <EEPROM_writeByte>
		incrementer++;
    1338:	80 91 7a 00 	lds	r24, 0x007A
    133c:	8f 5f       	subi	r24, 0xFF	; 255
    133e:	80 93 7a 00 	sts	0x007A, r24
		UART_sendByte(FALSE);
    1342:	80 e0       	ldi	r24, 0x00	; 0
    1344:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <UART_sendByte>
	}

}
    1348:	a1 96       	adiw	r28, 0x21	; 33
    134a:	0f b6       	in	r0, 0x3f	; 63
    134c:	f8 94       	cli
    134e:	de bf       	out	0x3e, r29	; 62
    1350:	0f be       	out	0x3f, r0	; 63
    1352:	cd bf       	out	0x3d, r28	; 61
    1354:	cf 91       	pop	r28
    1356:	df 91       	pop	r29
    1358:	08 95       	ret

0000135a <ScreenRe_EnterPassword>:
void ScreenRe_EnterPassword(uint8 *value)
{
    135a:	df 93       	push	r29
    135c:	cf 93       	push	r28
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
    1362:	a2 97       	sbiw	r28, 0x22	; 34
    1364:	0f b6       	in	r0, 0x3f	; 63
    1366:	f8 94       	cli
    1368:	de bf       	out	0x3e, r29	; 62
    136a:	0f be       	out	0x3f, r0	; 63
    136c:	cd bf       	out	0x3d, r28	; 61
    136e:	9a a3       	std	Y+34, r25	; 0x22
    1370:	89 a3       	std	Y+33, r24	; 0x21
	boolean check = FALSE;
    1372:	1f 8e       	std	Y+31, r1	; 0x1f
	if(*value  == '=')
    1374:	e9 a1       	ldd	r30, Y+33	; 0x21
    1376:	fa a1       	ldd	r31, Y+34	; 0x22
    1378:	80 81       	ld	r24, Z
    137a:	8d 33       	cpi	r24, 0x3D	; 61
    137c:	09 f0       	breq	.+2      	; 0x1380 <ScreenRe_EnterPassword+0x26>
    137e:	1a c1       	rjmp	.+564    	; 0x15b4 <ScreenRe_EnterPassword+0x25a>
	{
		uint8 temp = 0;
    1380:	18 a2       	std	Y+32, r1	; 0x20
		for(int i =0 ; i <5 ; i++)
    1382:	1e 8e       	std	Y+30, r1	; 0x1e
    1384:	1d 8e       	std	Y+29, r1	; 0x1d
    1386:	7f c0       	rjmp	.+254    	; 0x1486 <ScreenRe_EnterPassword+0x12c>
		{
			EEPROM_readByte(i, &temp);
    1388:	8d 8d       	ldd	r24, Y+29	; 0x1d
    138a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    138c:	9e 01       	movw	r18, r28
    138e:	20 5e       	subi	r18, 0xE0	; 224
    1390:	3f 4f       	sbci	r19, 0xFF	; 255
    1392:	b9 01       	movw	r22, r18
    1394:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <EEPROM_readByte>
    1398:	80 e0       	ldi	r24, 0x00	; 0
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	aa e7       	ldi	r26, 0x7A	; 122
    139e:	b4 e4       	ldi	r27, 0x44	; 68
    13a0:	89 8f       	std	Y+25, r24	; 0x19
    13a2:	9a 8f       	std	Y+26, r25	; 0x1a
    13a4:	ab 8f       	std	Y+27, r26	; 0x1b
    13a6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13a8:	69 8d       	ldd	r22, Y+25	; 0x19
    13aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13b0:	20 e0       	ldi	r18, 0x00	; 0
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	4a e7       	ldi	r20, 0x7A	; 122
    13b6:	53 e4       	ldi	r21, 0x43	; 67
    13b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13bc:	dc 01       	movw	r26, r24
    13be:	cb 01       	movw	r24, r22
    13c0:	8d 8b       	std	Y+21, r24	; 0x15
    13c2:	9e 8b       	std	Y+22, r25	; 0x16
    13c4:	af 8b       	std	Y+23, r26	; 0x17
    13c6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13c8:	6d 89       	ldd	r22, Y+21	; 0x15
    13ca:	7e 89       	ldd	r23, Y+22	; 0x16
    13cc:	8f 89       	ldd	r24, Y+23	; 0x17
    13ce:	98 8d       	ldd	r25, Y+24	; 0x18
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	40 e8       	ldi	r20, 0x80	; 128
    13d6:	5f e3       	ldi	r21, 0x3F	; 63
    13d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13dc:	88 23       	and	r24, r24
    13de:	2c f4       	brge	.+10     	; 0x13ea <ScreenRe_EnterPassword+0x90>
		__ticks = 1;
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	9c 8b       	std	Y+20, r25	; 0x14
    13e6:	8b 8b       	std	Y+19, r24	; 0x13
    13e8:	3f c0       	rjmp	.+126    	; 0x1468 <ScreenRe_EnterPassword+0x10e>
	else if (__tmp > 65535)
    13ea:	6d 89       	ldd	r22, Y+21	; 0x15
    13ec:	7e 89       	ldd	r23, Y+22	; 0x16
    13ee:	8f 89       	ldd	r24, Y+23	; 0x17
    13f0:	98 8d       	ldd	r25, Y+24	; 0x18
    13f2:	20 e0       	ldi	r18, 0x00	; 0
    13f4:	3f ef       	ldi	r19, 0xFF	; 255
    13f6:	4f e7       	ldi	r20, 0x7F	; 127
    13f8:	57 e4       	ldi	r21, 0x47	; 71
    13fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13fe:	18 16       	cp	r1, r24
    1400:	4c f5       	brge	.+82     	; 0x1454 <ScreenRe_EnterPassword+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1402:	69 8d       	ldd	r22, Y+25	; 0x19
    1404:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1406:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1408:	9c 8d       	ldd	r25, Y+28	; 0x1c
    140a:	20 e0       	ldi	r18, 0x00	; 0
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	40 e2       	ldi	r20, 0x20	; 32
    1410:	51 e4       	ldi	r21, 0x41	; 65
    1412:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1416:	dc 01       	movw	r26, r24
    1418:	cb 01       	movw	r24, r22
    141a:	bc 01       	movw	r22, r24
    141c:	cd 01       	movw	r24, r26
    141e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1422:	dc 01       	movw	r26, r24
    1424:	cb 01       	movw	r24, r22
    1426:	9c 8b       	std	Y+20, r25	; 0x14
    1428:	8b 8b       	std	Y+19, r24	; 0x13
    142a:	0f c0       	rjmp	.+30     	; 0x144a <ScreenRe_EnterPassword+0xf0>
    142c:	89 e1       	ldi	r24, 0x19	; 25
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	9a 8b       	std	Y+18, r25	; 0x12
    1432:	89 8b       	std	Y+17, r24	; 0x11
    1434:	89 89       	ldd	r24, Y+17	; 0x11
    1436:	9a 89       	ldd	r25, Y+18	; 0x12
    1438:	01 97       	sbiw	r24, 0x01	; 1
    143a:	f1 f7       	brne	.-4      	; 0x1438 <ScreenRe_EnterPassword+0xde>
    143c:	9a 8b       	std	Y+18, r25	; 0x12
    143e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1440:	8b 89       	ldd	r24, Y+19	; 0x13
    1442:	9c 89       	ldd	r25, Y+20	; 0x14
    1444:	01 97       	sbiw	r24, 0x01	; 1
    1446:	9c 8b       	std	Y+20, r25	; 0x14
    1448:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    144a:	8b 89       	ldd	r24, Y+19	; 0x13
    144c:	9c 89       	ldd	r25, Y+20	; 0x14
    144e:	00 97       	sbiw	r24, 0x00	; 0
    1450:	69 f7       	brne	.-38     	; 0x142c <ScreenRe_EnterPassword+0xd2>
    1452:	14 c0       	rjmp	.+40     	; 0x147c <ScreenRe_EnterPassword+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1454:	6d 89       	ldd	r22, Y+21	; 0x15
    1456:	7e 89       	ldd	r23, Y+22	; 0x16
    1458:	8f 89       	ldd	r24, Y+23	; 0x17
    145a:	98 8d       	ldd	r25, Y+24	; 0x18
    145c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1460:	dc 01       	movw	r26, r24
    1462:	cb 01       	movw	r24, r22
    1464:	9c 8b       	std	Y+20, r25	; 0x14
    1466:	8b 8b       	std	Y+19, r24	; 0x13
    1468:	8b 89       	ldd	r24, Y+19	; 0x13
    146a:	9c 89       	ldd	r25, Y+20	; 0x14
    146c:	98 8b       	std	Y+16, r25	; 0x10
    146e:	8f 87       	std	Y+15, r24	; 0x0f
    1470:	8f 85       	ldd	r24, Y+15	; 0x0f
    1472:	98 89       	ldd	r25, Y+16	; 0x10
    1474:	01 97       	sbiw	r24, 0x01	; 1
    1476:	f1 f7       	brne	.-4      	; 0x1474 <ScreenRe_EnterPassword+0x11a>
    1478:	98 8b       	std	Y+16, r25	; 0x10
    147a:	8f 87       	std	Y+15, r24	; 0x0f
{
	boolean check = FALSE;
	if(*value  == '=')
	{
		uint8 temp = 0;
		for(int i =0 ; i <5 ; i++)
    147c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    147e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1480:	01 96       	adiw	r24, 0x01	; 1
    1482:	9e 8f       	std	Y+30, r25	; 0x1e
    1484:	8d 8f       	std	Y+29, r24	; 0x1d
    1486:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1488:	9e 8d       	ldd	r25, Y+30	; 0x1e
    148a:	85 30       	cpi	r24, 0x05	; 5
    148c:	91 05       	cpc	r25, r1
    148e:	0c f4       	brge	.+2      	; 0x1492 <ScreenRe_EnterPassword+0x138>
    1490:	7b cf       	rjmp	.-266    	; 0x1388 <ScreenRe_EnterPassword+0x2e>
		{
			EEPROM_readByte(i, &temp);

			_delay_ms(1000);
		}
		check = CheckPassword();
    1492:	0e 94 3f 07 	call	0xe7e	; 0xe7e <CheckPassword>
    1496:	8f 8f       	std	Y+31, r24	; 0x1f
		if(check == TRUE)
    1498:	8f 8d       	ldd	r24, Y+31	; 0x1f
    149a:	81 30       	cpi	r24, 0x01	; 1
    149c:	21 f4       	brne	.+8      	; 0x14a6 <ScreenRe_EnterPassword+0x14c>
		{
			STATE = 3;
    149e:	83 e0       	ldi	r24, 0x03	; 3
    14a0:	80 93 6e 00 	sts	0x006E, r24
    14a4:	0a c0       	rjmp	.+20     	; 0x14ba <ScreenRe_EnterPassword+0x160>
		}
		else if(check == FALSE)
    14a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14a8:	88 23       	and	r24, r24
    14aa:	39 f4       	brne	.+14     	; 0x14ba <ScreenRe_EnterPassword+0x160>
		{
			WrongMessage();
    14ac:	0e 94 cc 05 	call	0xb98	; 0xb98 <WrongMessage>
			STATE = 1;
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	80 93 6e 00 	sts	0x006E, r24
			incrementer = 0;
    14b6:	10 92 7a 00 	sts	0x007A, r1
		}
		*value = 0;
    14ba:	e9 a1       	ldd	r30, Y+33	; 0x21
    14bc:	fa a1       	ldd	r31, Y+34	; 0x22
    14be:	10 82       	st	Z, r1
		UART_sendByte(TRUE);
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <UART_sendByte>
    14c6:	80 e0       	ldi	r24, 0x00	; 0
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	a0 ea       	ldi	r26, 0xA0	; 160
    14cc:	b1 e4       	ldi	r27, 0x41	; 65
    14ce:	8b 87       	std	Y+11, r24	; 0x0b
    14d0:	9c 87       	std	Y+12, r25	; 0x0c
    14d2:	ad 87       	std	Y+13, r26	; 0x0d
    14d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    14d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    14da:	8d 85       	ldd	r24, Y+13	; 0x0d
    14dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    14de:	20 e0       	ldi	r18, 0x00	; 0
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	4a e7       	ldi	r20, 0x7A	; 122
    14e4:	53 e4       	ldi	r21, 0x43	; 67
    14e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ea:	dc 01       	movw	r26, r24
    14ec:	cb 01       	movw	r24, r22
    14ee:	8f 83       	std	Y+7, r24	; 0x07
    14f0:	98 87       	std	Y+8, r25	; 0x08
    14f2:	a9 87       	std	Y+9, r26	; 0x09
    14f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14f6:	6f 81       	ldd	r22, Y+7	; 0x07
    14f8:	78 85       	ldd	r23, Y+8	; 0x08
    14fa:	89 85       	ldd	r24, Y+9	; 0x09
    14fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	40 e8       	ldi	r20, 0x80	; 128
    1504:	5f e3       	ldi	r21, 0x3F	; 63
    1506:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    150a:	88 23       	and	r24, r24
    150c:	2c f4       	brge	.+10     	; 0x1518 <ScreenRe_EnterPassword+0x1be>
		__ticks = 1;
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	9e 83       	std	Y+6, r25	; 0x06
    1514:	8d 83       	std	Y+5, r24	; 0x05
    1516:	3f c0       	rjmp	.+126    	; 0x1596 <ScreenRe_EnterPassword+0x23c>
	else if (__tmp > 65535)
    1518:	6f 81       	ldd	r22, Y+7	; 0x07
    151a:	78 85       	ldd	r23, Y+8	; 0x08
    151c:	89 85       	ldd	r24, Y+9	; 0x09
    151e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1520:	20 e0       	ldi	r18, 0x00	; 0
    1522:	3f ef       	ldi	r19, 0xFF	; 255
    1524:	4f e7       	ldi	r20, 0x7F	; 127
    1526:	57 e4       	ldi	r21, 0x47	; 71
    1528:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    152c:	18 16       	cp	r1, r24
    152e:	4c f5       	brge	.+82     	; 0x1582 <ScreenRe_EnterPassword+0x228>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1530:	6b 85       	ldd	r22, Y+11	; 0x0b
    1532:	7c 85       	ldd	r23, Y+12	; 0x0c
    1534:	8d 85       	ldd	r24, Y+13	; 0x0d
    1536:	9e 85       	ldd	r25, Y+14	; 0x0e
    1538:	20 e0       	ldi	r18, 0x00	; 0
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	40 e2       	ldi	r20, 0x20	; 32
    153e:	51 e4       	ldi	r21, 0x41	; 65
    1540:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1544:	dc 01       	movw	r26, r24
    1546:	cb 01       	movw	r24, r22
    1548:	bc 01       	movw	r22, r24
    154a:	cd 01       	movw	r24, r26
    154c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1550:	dc 01       	movw	r26, r24
    1552:	cb 01       	movw	r24, r22
    1554:	9e 83       	std	Y+6, r25	; 0x06
    1556:	8d 83       	std	Y+5, r24	; 0x05
    1558:	0f c0       	rjmp	.+30     	; 0x1578 <ScreenRe_EnterPassword+0x21e>
    155a:	89 e1       	ldi	r24, 0x19	; 25
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	9c 83       	std	Y+4, r25	; 0x04
    1560:	8b 83       	std	Y+3, r24	; 0x03
    1562:	8b 81       	ldd	r24, Y+3	; 0x03
    1564:	9c 81       	ldd	r25, Y+4	; 0x04
    1566:	01 97       	sbiw	r24, 0x01	; 1
    1568:	f1 f7       	brne	.-4      	; 0x1566 <ScreenRe_EnterPassword+0x20c>
    156a:	9c 83       	std	Y+4, r25	; 0x04
    156c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    156e:	8d 81       	ldd	r24, Y+5	; 0x05
    1570:	9e 81       	ldd	r25, Y+6	; 0x06
    1572:	01 97       	sbiw	r24, 0x01	; 1
    1574:	9e 83       	std	Y+6, r25	; 0x06
    1576:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1578:	8d 81       	ldd	r24, Y+5	; 0x05
    157a:	9e 81       	ldd	r25, Y+6	; 0x06
    157c:	00 97       	sbiw	r24, 0x00	; 0
    157e:	69 f7       	brne	.-38     	; 0x155a <ScreenRe_EnterPassword+0x200>
    1580:	14 c0       	rjmp	.+40     	; 0x15aa <ScreenRe_EnterPassword+0x250>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1582:	6f 81       	ldd	r22, Y+7	; 0x07
    1584:	78 85       	ldd	r23, Y+8	; 0x08
    1586:	89 85       	ldd	r24, Y+9	; 0x09
    1588:	9a 85       	ldd	r25, Y+10	; 0x0a
    158a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    158e:	dc 01       	movw	r26, r24
    1590:	cb 01       	movw	r24, r22
    1592:	9e 83       	std	Y+6, r25	; 0x06
    1594:	8d 83       	std	Y+5, r24	; 0x05
    1596:	8d 81       	ldd	r24, Y+5	; 0x05
    1598:	9e 81       	ldd	r25, Y+6	; 0x06
    159a:	9a 83       	std	Y+2, r25	; 0x02
    159c:	89 83       	std	Y+1, r24	; 0x01
    159e:	89 81       	ldd	r24, Y+1	; 0x01
    15a0:	9a 81       	ldd	r25, Y+2	; 0x02
    15a2:	01 97       	sbiw	r24, 0x01	; 1
    15a4:	f1 f7       	brne	.-4      	; 0x15a2 <ScreenRe_EnterPassword+0x248>
    15a6:	9a 83       	std	Y+2, r25	; 0x02
    15a8:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(20);
		UART_sendByte(STATE);
    15aa:	80 91 6e 00 	lds	r24, 0x006E
    15ae:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <UART_sendByte>
    15b2:	12 c0       	rjmp	.+36     	; 0x15d8 <ScreenRe_EnterPassword+0x27e>
	}
	else
	{
		EEPROM_writeByte(incrementer, *value);
    15b4:	80 91 7a 00 	lds	r24, 0x007A
    15b8:	88 2f       	mov	r24, r24
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	e9 a1       	ldd	r30, Y+33	; 0x21
    15be:	fa a1       	ldd	r31, Y+34	; 0x22
    15c0:	20 81       	ld	r18, Z
    15c2:	62 2f       	mov	r22, r18
    15c4:	0e 94 cd 0c 	call	0x199a	; 0x199a <EEPROM_writeByte>
		incrementer++;
    15c8:	80 91 7a 00 	lds	r24, 0x007A
    15cc:	8f 5f       	subi	r24, 0xFF	; 255
    15ce:	80 93 7a 00 	sts	0x007A, r24
		UART_sendByte(FALSE);
    15d2:	80 e0       	ldi	r24, 0x00	; 0
    15d4:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <UART_sendByte>
	}

	if(incrementer == 10)
    15d8:	80 91 7a 00 	lds	r24, 0x007A
    15dc:	8a 30       	cpi	r24, 0x0A	; 10
    15de:	11 f4       	brne	.+4      	; 0x15e4 <ScreenRe_EnterPassword+0x28a>
	{
		incrementer = 0;
    15e0:	10 92 7a 00 	sts	0x007A, r1
	}
}
    15e4:	a2 96       	adiw	r28, 0x22	; 34
    15e6:	0f b6       	in	r0, 0x3f	; 63
    15e8:	f8 94       	cli
    15ea:	de bf       	out	0x3e, r29	; 62
    15ec:	0f be       	out	0x3f, r0	; 63
    15ee:	cd bf       	out	0x3d, r28	; 61
    15f0:	cf 91       	pop	r28
    15f2:	df 91       	pop	r29
    15f4:	08 95       	ret

000015f6 <main>:

int main()
{
    15f6:	df 93       	push	r29
    15f8:	cf 93       	push	r28
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
    15fe:	6a 97       	sbiw	r28, 0x1a	; 26
    1600:	0f b6       	in	r0, 0x3f	; 63
    1602:	f8 94       	cli
    1604:	de bf       	out	0x3e, r29	; 62
    1606:	0f be       	out	0x3f, r0	; 63
    1608:	cd bf       	out	0x3d, r28	; 61
	uint8 value = 0;
    160a:	1d 82       	std	Y+5, r1	; 0x05
	uint8 temp;
	boolean check = FALSE;
    160c:	1b 82       	std	Y+3, r1	; 0x03
	uint8 show =1;
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	8a 83       	std	Y+2, r24	; 0x02

	uint8 i=0;
    1612:	19 82       	std	Y+1, r1	; 0x01
	uint8 Password[5];

	GPIO_setupPinDirection(PORTD_ID, PIN7_ID,PIN_OUTPUT);
    1614:	83 e0       	ldi	r24, 0x03	; 3
    1616:	67 e0       	ldi	r22, 0x07	; 7
    1618:	41 e0       	ldi	r20, 0x01	; 1
    161a:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <GPIO_setupPinDirection>
	GPIO_writePin(PORTD_ID,PIN7_ID, LOGIC_LOW);
    161e:	83 e0       	ldi	r24, 0x03	; 3
    1620:	67 e0       	ldi	r22, 0x07	; 7
    1622:	40 e0       	ldi	r20, 0x00	; 0
    1624:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <GPIO_writePin>

	Config_twi twi = {ONE,SlaveAddress_ONE};
    1628:	1b 86       	std	Y+11, r1	; 0x0b
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	8c 87       	std	Y+12, r24	; 0x0c
	/* Initialize the TWI/I2C Driver */
	TWI_init(&twi);
    162e:	ce 01       	movw	r24, r28
    1630:	0b 96       	adiw	r24, 0x0b	; 11
    1632:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <TWI_init>


	uart_ConfigType UART_Config_2 = {baud_9600, EIGHT_BIT, Disabled, ONE_StopBit};
    1636:	9e 01       	movw	r18, r28
    1638:	23 5f       	subi	r18, 0xF3	; 243
    163a:	3f 4f       	sbci	r19, 0xFF	; 255
    163c:	3f 8b       	std	Y+23, r19	; 0x17
    163e:	2e 8b       	std	Y+22, r18	; 0x16
    1640:	8f e6       	ldi	r24, 0x6F	; 111
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	99 8f       	std	Y+25, r25	; 0x19
    1646:	88 8f       	std	Y+24, r24	; 0x18
    1648:	97 e0       	ldi	r25, 0x07	; 7
    164a:	9a 8f       	std	Y+26, r25	; 0x1a
    164c:	e8 8d       	ldd	r30, Y+24	; 0x18
    164e:	f9 8d       	ldd	r31, Y+25	; 0x19
    1650:	00 80       	ld	r0, Z
    1652:	28 8d       	ldd	r18, Y+24	; 0x18
    1654:	39 8d       	ldd	r19, Y+25	; 0x19
    1656:	2f 5f       	subi	r18, 0xFF	; 255
    1658:	3f 4f       	sbci	r19, 0xFF	; 255
    165a:	39 8f       	std	Y+25, r19	; 0x19
    165c:	28 8f       	std	Y+24, r18	; 0x18
    165e:	ee 89       	ldd	r30, Y+22	; 0x16
    1660:	ff 89       	ldd	r31, Y+23	; 0x17
    1662:	00 82       	st	Z, r0
    1664:	2e 89       	ldd	r18, Y+22	; 0x16
    1666:	3f 89       	ldd	r19, Y+23	; 0x17
    1668:	2f 5f       	subi	r18, 0xFF	; 255
    166a:	3f 4f       	sbci	r19, 0xFF	; 255
    166c:	3f 8b       	std	Y+23, r19	; 0x17
    166e:	2e 8b       	std	Y+22, r18	; 0x16
    1670:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1672:	31 50       	subi	r19, 0x01	; 1
    1674:	3a 8f       	std	Y+26, r19	; 0x1a
    1676:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1678:	88 23       	and	r24, r24
    167a:	41 f7       	brne	.-48     	; 0x164c <main+0x56>
	UART_init(&UART_Config_2);
    167c:	ce 01       	movw	r24, r28
    167e:	0d 96       	adiw	r24, 0x0d	; 13
    1680:	0e 94 f5 15 	call	0x2bea	; 0x2bea <UART_init>

	buzzer_init();
    1684:	0e 94 a3 05 	call	0xb46	; 0xb46 <buzzer_init>



	SREG  |= (1<<7);
    1688:	af e5       	ldi	r26, 0x5F	; 95
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	ef e5       	ldi	r30, 0x5F	; 95
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	80 68       	ori	r24, 0x80	; 128
    1694:	8c 93       	st	X, r24
	buzzer_init();
    1696:	0e 94 a3 05 	call	0xb46	; 0xb46 <buzzer_init>
	while(1)
	{

		value = UART_recieveByte();
    169a:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <UART_recieveByte>
    169e:	8d 83       	std	Y+5, r24	; 0x05
		if(value == 13)
    16a0:	8d 81       	ldd	r24, Y+5	; 0x05
    16a2:	8d 30       	cpi	r24, 0x0D	; 13
    16a4:	19 f4       	brne	.+6      	; 0x16ac <main+0xb6>
		{
			STATE = 1;
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	80 93 6e 00 	sts	0x006E, r24
		}
		switch(STATE)
    16ac:	80 91 6e 00 	lds	r24, 0x006E
    16b0:	e8 2f       	mov	r30, r24
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	fd 8b       	std	Y+21, r31	; 0x15
    16b6:	ec 8b       	std	Y+20, r30	; 0x14
    16b8:	2c 89       	ldd	r18, Y+20	; 0x14
    16ba:	3d 89       	ldd	r19, Y+21	; 0x15
    16bc:	23 30       	cpi	r18, 0x03	; 3
    16be:	31 05       	cpc	r19, r1
    16c0:	29 f1       	breq	.+74     	; 0x170c <main+0x116>
    16c2:	8c 89       	ldd	r24, Y+20	; 0x14
    16c4:	9d 89       	ldd	r25, Y+21	; 0x15
    16c6:	84 30       	cpi	r24, 0x04	; 4
    16c8:	91 05       	cpc	r25, r1
    16ca:	5c f4       	brge	.+22     	; 0x16e2 <main+0xec>
    16cc:	ec 89       	ldd	r30, Y+20	; 0x14
    16ce:	fd 89       	ldd	r31, Y+21	; 0x15
    16d0:	e1 30       	cpi	r30, 0x01	; 1
    16d2:	f1 05       	cpc	r31, r1
    16d4:	89 f0       	breq	.+34     	; 0x16f8 <main+0x102>
    16d6:	2c 89       	ldd	r18, Y+20	; 0x14
    16d8:	3d 89       	ldd	r19, Y+21	; 0x15
    16da:	22 30       	cpi	r18, 0x02	; 2
    16dc:	31 05       	cpc	r19, r1
    16de:	89 f0       	breq	.+34     	; 0x1702 <main+0x10c>
    16e0:	dc cf       	rjmp	.-72     	; 0x169a <main+0xa4>
    16e2:	8c 89       	ldd	r24, Y+20	; 0x14
    16e4:	9d 89       	ldd	r25, Y+21	; 0x15
    16e6:	84 30       	cpi	r24, 0x04	; 4
    16e8:	91 05       	cpc	r25, r1
    16ea:	a9 f0       	breq	.+42     	; 0x1716 <main+0x120>
    16ec:	ec 89       	ldd	r30, Y+20	; 0x14
    16ee:	fd 89       	ldd	r31, Y+21	; 0x15
    16f0:	e5 30       	cpi	r30, 0x05	; 5
    16f2:	f1 05       	cpc	r31, r1
    16f4:	a9 f0       	breq	.+42     	; 0x1720 <main+0x12a>
    16f6:	d1 cf       	rjmp	.-94     	; 0x169a <main+0xa4>
		{
		case 1:
			ScreenEnterNewPassword(&value);
    16f8:	ce 01       	movw	r24, r28
    16fa:	05 96       	adiw	r24, 0x05	; 5
    16fc:	0e 94 75 08 	call	0x10ea	; 0x10ea <ScreenEnterNewPassword>
    1700:	cc cf       	rjmp	.-104    	; 0x169a <main+0xa4>
			break;
		case 2:
			ScreenRe_EnterPassword(&value);
    1702:	ce 01       	movw	r24, r28
    1704:	05 96       	adiw	r24, 0x05	; 5
    1706:	0e 94 ad 09 	call	0x135a	; 0x135a <ScreenRe_EnterPassword>
    170a:	c7 cf       	rjmp	.-114    	; 0x169a <main+0xa4>
			break;
		case 3:
			ScreenPlusMinus(&value);
    170c:	ce 01       	movw	r24, r28
    170e:	05 96       	adiw	r24, 0x05	; 5
    1710:	0e 94 4a 08 	call	0x1094	; 0x1094 <ScreenPlusMinus>
    1714:	c2 cf       	rjmp	.-124    	; 0x169a <main+0xa4>
			break;
		case 4:
			ScreenOpenDoor(&value);
    1716:	ce 01       	movw	r24, r28
    1718:	05 96       	adiw	r24, 0x05	; 5
    171a:	0e 94 78 07 	call	0xef0	; 0xef0 <ScreenOpenDoor>
    171e:	bd cf       	rjmp	.-134    	; 0x169a <main+0xa4>
			break;
		case 5:
			ScreenChangePassword(&value);
    1720:	ce 01       	movw	r24, r28
    1722:	05 96       	adiw	r24, 0x05	; 5
    1724:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <ScreenChangePassword>
    1728:	b8 cf       	rjmp	.-144    	; 0x169a <main+0xa4>

0000172a <__vector_19>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_COMP_vect)
{
    172a:	1f 92       	push	r1
    172c:	0f 92       	push	r0
    172e:	0f b6       	in	r0, 0x3f	; 63
    1730:	0f 92       	push	r0
    1732:	11 24       	eor	r1, r1
    1734:	2f 93       	push	r18
    1736:	3f 93       	push	r19
    1738:	4f 93       	push	r20
    173a:	5f 93       	push	r21
    173c:	6f 93       	push	r22
    173e:	7f 93       	push	r23
    1740:	8f 93       	push	r24
    1742:	9f 93       	push	r25
    1744:	af 93       	push	r26
    1746:	bf 93       	push	r27
    1748:	ef 93       	push	r30
    174a:	ff 93       	push	r31
    174c:	df 93       	push	r29
    174e:	cf 93       	push	r28
    1750:	cd b7       	in	r28, 0x3d	; 61
    1752:	de b7       	in	r29, 0x3e	; 62

	if(g_callBackPtr != NULL_PTR)
    1754:	80 91 7c 00 	lds	r24, 0x007C
    1758:	90 91 7d 00 	lds	r25, 0x007D
    175c:	00 97       	sbiw	r24, 0x00	; 0
    175e:	29 f0       	breq	.+10     	; 0x176a <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1760:	e0 91 7c 00 	lds	r30, 0x007C
    1764:	f0 91 7d 00 	lds	r31, 0x007D
    1768:	09 95       	icall
	}
}
    176a:	cf 91       	pop	r28
    176c:	df 91       	pop	r29
    176e:	ff 91       	pop	r31
    1770:	ef 91       	pop	r30
    1772:	bf 91       	pop	r27
    1774:	af 91       	pop	r26
    1776:	9f 91       	pop	r25
    1778:	8f 91       	pop	r24
    177a:	7f 91       	pop	r23
    177c:	6f 91       	pop	r22
    177e:	5f 91       	pop	r21
    1780:	4f 91       	pop	r20
    1782:	3f 91       	pop	r19
    1784:	2f 91       	pop	r18
    1786:	0f 90       	pop	r0
    1788:	0f be       	out	0x3f, r0	; 63
    178a:	0f 90       	pop	r0
    178c:	1f 90       	pop	r1
    178e:	18 95       	reti

00001790 <__vector_9>:
ISR(TIMER0_OVF_vect)
{
    1790:	1f 92       	push	r1
    1792:	0f 92       	push	r0
    1794:	0f b6       	in	r0, 0x3f	; 63
    1796:	0f 92       	push	r0
    1798:	11 24       	eor	r1, r1
    179a:	2f 93       	push	r18
    179c:	3f 93       	push	r19
    179e:	4f 93       	push	r20
    17a0:	5f 93       	push	r21
    17a2:	6f 93       	push	r22
    17a4:	7f 93       	push	r23
    17a6:	8f 93       	push	r24
    17a8:	9f 93       	push	r25
    17aa:	af 93       	push	r26
    17ac:	bf 93       	push	r27
    17ae:	ef 93       	push	r30
    17b0:	ff 93       	push	r31
    17b2:	df 93       	push	r29
    17b4:	cf 93       	push	r28
    17b6:	cd b7       	in	r28, 0x3d	; 61
    17b8:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    17ba:	80 91 7c 00 	lds	r24, 0x007C
    17be:	90 91 7d 00 	lds	r25, 0x007D
    17c2:	00 97       	sbiw	r24, 0x00	; 0
    17c4:	29 f0       	breq	.+10     	; 0x17d0 <__vector_9+0x40>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    17c6:	e0 91 7c 00 	lds	r30, 0x007C
    17ca:	f0 91 7d 00 	lds	r31, 0x007D
    17ce:	09 95       	icall
		}
}
    17d0:	cf 91       	pop	r28
    17d2:	df 91       	pop	r29
    17d4:	ff 91       	pop	r31
    17d6:	ef 91       	pop	r30
    17d8:	bf 91       	pop	r27
    17da:	af 91       	pop	r26
    17dc:	9f 91       	pop	r25
    17de:	8f 91       	pop	r24
    17e0:	7f 91       	pop	r23
    17e2:	6f 91       	pop	r22
    17e4:	5f 91       	pop	r21
    17e6:	4f 91       	pop	r20
    17e8:	3f 91       	pop	r19
    17ea:	2f 91       	pop	r18
    17ec:	0f 90       	pop	r0
    17ee:	0f be       	out	0x3f, r0	; 63
    17f0:	0f 90       	pop	r0
    17f2:	1f 90       	pop	r1
    17f4:	18 95       	reti

000017f6 <Timer_init>:
/*******************************************************************************
 *                       Timer Functions                                       *
 *******************************************************************************/

void Timer_init(const Timers *Config_PTR)
{
    17f6:	df 93       	push	r29
    17f8:	cf 93       	push	r28
    17fa:	00 d0       	rcall	.+0      	; 0x17fc <Timer_init+0x6>
    17fc:	cd b7       	in	r28, 0x3d	; 61
    17fe:	de b7       	in	r29, 0x3e	; 62
    1800:	9a 83       	std	Y+2, r25	; 0x02
    1802:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = Config_PTR->InitValueTimer;    // Set Timer initial value to 0
    1804:	a2 e5       	ldi	r26, 0x52	; 82
    1806:	b0 e0       	ldi	r27, 0x00	; 0
    1808:	e9 81       	ldd	r30, Y+1	; 0x01
    180a:	fa 81       	ldd	r31, Y+2	; 0x02
    180c:	80 81       	ld	r24, Z
    180e:	8c 93       	st	X, r24


	if(Config_PTR->TimerMode == Compare && Config_PTR->TimerID == Timer0) //CompareMode
    1810:	e9 81       	ldd	r30, Y+1	; 0x01
    1812:	fa 81       	ldd	r31, Y+2	; 0x02
    1814:	82 81       	ldd	r24, Z+2	; 0x02
    1816:	81 30       	cpi	r24, 0x01	; 1
    1818:	99 f4       	brne	.+38     	; 0x1840 <Timer_init+0x4a>
    181a:	e9 81       	ldd	r30, Y+1	; 0x01
    181c:	fa 81       	ldd	r31, Y+2	; 0x02
    181e:	84 81       	ldd	r24, Z+4	; 0x04
    1820:	88 23       	and	r24, r24
    1822:	71 f4       	brne	.+28     	; 0x1840 <Timer_init+0x4a>
	{
		OCR0  = Config_PTR->CompareValueTimer; // Set Compare Value
    1824:	ac e5       	ldi	r26, 0x5C	; 92
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	e9 81       	ldd	r30, Y+1	; 0x01
    182a:	fa 81       	ldd	r31, Y+2	; 0x02
    182c:	81 81       	ldd	r24, Z+1	; 0x01
    182e:	8c 93       	st	X, r24
		TIMSK |= (1<<OCIE0); // Enable Timer0 Compare Interrupt
    1830:	a9 e5       	ldi	r26, 0x59	; 89
    1832:	b0 e0       	ldi	r27, 0x00	; 0
    1834:	e9 e5       	ldi	r30, 0x59	; 89
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	80 81       	ld	r24, Z
    183a:	82 60       	ori	r24, 0x02	; 2
    183c:	8c 93       	st	X, r24
    183e:	11 c0       	rjmp	.+34     	; 0x1862 <Timer_init+0x6c>

	}

	else if(Config_PTR->TimerMode == Normal && Config_PTR->TimerID == Timer0)//NormalMode
    1840:	e9 81       	ldd	r30, Y+1	; 0x01
    1842:	fa 81       	ldd	r31, Y+2	; 0x02
    1844:	82 81       	ldd	r24, Z+2	; 0x02
    1846:	88 23       	and	r24, r24
    1848:	61 f4       	brne	.+24     	; 0x1862 <Timer_init+0x6c>
    184a:	e9 81       	ldd	r30, Y+1	; 0x01
    184c:	fa 81       	ldd	r31, Y+2	; 0x02
    184e:	84 81       	ldd	r24, Z+4	; 0x04
    1850:	88 23       	and	r24, r24
    1852:	39 f4       	brne	.+14     	; 0x1862 <Timer_init+0x6c>
	{


		TIMSK |= (1<<TOIE0);
    1854:	a9 e5       	ldi	r26, 0x59	; 89
    1856:	b0 e0       	ldi	r27, 0x00	; 0
    1858:	e9 e5       	ldi	r30, 0x59	; 89
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	80 81       	ld	r24, Z
    185e:	81 60       	ori	r24, 0x01	; 1
    1860:	8c 93       	st	X, r24
	 * 3. Config_PTR->TimerMode = 1 : CompareMode WGM01=1 & WGM00=0
	 * 4. No need for OC0 in this example so COM00=0 & COM01=0
	 * 5. Set PreScaleValue CS02,CS01,CS00
	 */
	//TCCR0 = (1<<FOC0) | (1<<WGM01) | (1<<CS02) | (1<<CS00);
	TCCR0 = (1<<FOC0) | ((Config_PTR->TimerMode & (0x01)) << WGM01) | (Config_PTR->TimerPreScaler << CS00);
    1862:	a3 e5       	ldi	r26, 0x53	; 83
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	e9 81       	ldd	r30, Y+1	; 0x01
    1868:	fa 81       	ldd	r31, Y+2	; 0x02
    186a:	82 81       	ldd	r24, Z+2	; 0x02
    186c:	88 2f       	mov	r24, r24
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	81 70       	andi	r24, 0x01	; 1
    1872:	90 70       	andi	r25, 0x00	; 0
    1874:	88 0f       	add	r24, r24
    1876:	99 1f       	adc	r25, r25
    1878:	88 0f       	add	r24, r24
    187a:	99 1f       	adc	r25, r25
    187c:	88 0f       	add	r24, r24
    187e:	99 1f       	adc	r25, r25
    1880:	98 2f       	mov	r25, r24
    1882:	90 68       	ori	r25, 0x80	; 128
    1884:	e9 81       	ldd	r30, Y+1	; 0x01
    1886:	fa 81       	ldd	r31, Y+2	; 0x02
    1888:	83 81       	ldd	r24, Z+3	; 0x03
    188a:	89 2b       	or	r24, r25
    188c:	8c 93       	st	X, r24

}
    188e:	0f 90       	pop	r0
    1890:	0f 90       	pop	r0
    1892:	cf 91       	pop	r28
    1894:	df 91       	pop	r29
    1896:	08 95       	ret

00001898 <Timer_setCallBack>:

void Timer_setCallBack(void(*a_ptr)(void))
{
    1898:	df 93       	push	r29
    189a:	cf 93       	push	r28
    189c:	00 d0       	rcall	.+0      	; 0x189e <Timer_setCallBack+0x6>
    189e:	cd b7       	in	r28, 0x3d	; 61
    18a0:	de b7       	in	r29, 0x3e	; 62
    18a2:	9a 83       	std	Y+2, r25	; 0x02
    18a4:	89 83       	std	Y+1, r24	; 0x01

	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    18a6:	89 81       	ldd	r24, Y+1	; 0x01
    18a8:	9a 81       	ldd	r25, Y+2	; 0x02
    18aa:	90 93 7d 00 	sts	0x007D, r25
    18ae:	80 93 7c 00 	sts	0x007C, r24
}
    18b2:	0f 90       	pop	r0
    18b4:	0f 90       	pop	r0
    18b6:	cf 91       	pop	r28
    18b8:	df 91       	pop	r29
    18ba:	08 95       	ret

000018bc <Timer_DeInit>:


void Timer_DeInit(const Timers *Config_PTR)
{
    18bc:	df 93       	push	r29
    18be:	cf 93       	push	r28
    18c0:	00 d0       	rcall	.+0      	; 0x18c2 <Timer_DeInit+0x6>
    18c2:	cd b7       	in	r28, 0x3d	; 61
    18c4:	de b7       	in	r29, 0x3e	; 62
    18c6:	9a 83       	std	Y+2, r25	; 0x02
    18c8:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0;
    18ca:	e2 e5       	ldi	r30, 0x52	; 82
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	10 82       	st	Z, r1
	OCR0  = 0;
    18d0:	ec e5       	ldi	r30, 0x5C	; 92
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	10 82       	st	Z, r1
	if(Config_PTR->TimerID == Timer0)
    18d6:	e9 81       	ldd	r30, Y+1	; 0x01
    18d8:	fa 81       	ldd	r31, Y+2	; 0x02
    18da:	84 81       	ldd	r24, Z+4	; 0x04
    18dc:	88 23       	and	r24, r24
    18de:	39 f4       	brne	.+14     	; 0x18ee <Timer_DeInit+0x32>
	{
		TIMSK &= 0xFC; //DeInit Compare/OverFlow Modes in Timer0 OCIE0,TOIE0
    18e0:	a9 e5       	ldi	r26, 0x59	; 89
    18e2:	b0 e0       	ldi	r27, 0x00	; 0
    18e4:	e9 e5       	ldi	r30, 0x59	; 89
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	80 81       	ld	r24, Z
    18ea:	8c 7f       	andi	r24, 0xFC	; 252
    18ec:	8c 93       	st	X, r24
	}
	TCCR0 = 0 ;
    18ee:	e3 e5       	ldi	r30, 0x53	; 83
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	10 82       	st	Z, r1

}
    18f4:	0f 90       	pop	r0
    18f6:	0f 90       	pop	r0
    18f8:	cf 91       	pop	r28
    18fa:	df 91       	pop	r29
    18fc:	08 95       	ret

000018fe <DcMotor_Init>:
 * Initialize the DC Motor by:
 * 1. Setup the direction of the two motor pins as output by send the request to GPIO driver.
 * 2. Stop the motor at the beginning
 */
void DcMotor_Init(void)
{
    18fe:	df 93       	push	r29
    1900:	cf 93       	push	r28
    1902:	cd b7       	in	r28, 0x3d	; 61
    1904:	de b7       	in	r29, 0x3e	; 62
	/* Setup the two motor pins as output pins */
	GPIO_setupPinDirection(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,PIN_OUTPUT);
    1906:	83 e0       	ldi	r24, 0x03	; 3
    1908:	62 e0       	ldi	r22, 0x02	; 2
    190a:	41 e0       	ldi	r20, 0x01	; 1
    190c:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,PIN_OUTPUT);
    1910:	83 e0       	ldi	r24, 0x03	; 3
    1912:	63 e0       	ldi	r22, 0x03	; 3
    1914:	41 e0       	ldi	r20, 0x01	; 1
    1916:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <GPIO_setupPinDirection>

	/* Motor is stopped at the beginning */
	GPIO_writePin(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,LOGIC_LOW);
    191a:	83 e0       	ldi	r24, 0x03	; 3
    191c:	62 e0       	ldi	r22, 0x02	; 2
    191e:	40 e0       	ldi	r20, 0x00	; 0
    1920:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,LOGIC_LOW);
    1924:	83 e0       	ldi	r24, 0x03	; 3
    1926:	63 e0       	ldi	r22, 0x03	; 3
    1928:	40 e0       	ldi	r20, 0x00	; 0
    192a:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <GPIO_writePin>
}
    192e:	cf 91       	pop	r28
    1930:	df 91       	pop	r29
    1932:	08 95       	ret

00001934 <DcMotor_Rotate>:
 * Description :
 * 1. Rotate  or Stop the motor according to the state input variable.
 * 2. Control the motor speed 0 --> 100% from its maximum speed by sending to PWM driver.
 */
void DcMotor_Rotate(DcMotor_State state)
{
    1934:	df 93       	push	r29
    1936:	cf 93       	push	r28
    1938:	0f 92       	push	r0
    193a:	cd b7       	in	r28, 0x3d	; 61
    193c:	de b7       	in	r29, 0x3e	; 62
    193e:	89 83       	std	Y+1, r24	; 0x01
	if(state == DC_MOTOR_CW)
    1940:	89 81       	ldd	r24, Y+1	; 0x01
    1942:	81 30       	cpi	r24, 0x01	; 1
    1944:	59 f4       	brne	.+22     	; 0x195c <DcMotor_Rotate+0x28>
	{
		/* Rotates the Motor CW */
		GPIO_writePin(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,LOGIC_LOW);
    1946:	83 e0       	ldi	r24, 0x03	; 3
    1948:	62 e0       	ldi	r22, 0x02	; 2
    194a:	40 e0       	ldi	r20, 0x00	; 0
    194c:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,LOGIC_HIGH);
    1950:	83 e0       	ldi	r24, 0x03	; 3
    1952:	63 e0       	ldi	r22, 0x03	; 3
    1954:	41 e0       	ldi	r20, 0x01	; 1
    1956:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <GPIO_writePin>
    195a:	1b c0       	rjmp	.+54     	; 0x1992 <DcMotor_Rotate+0x5e>
	}
	else if(state == DC_MOTOR_ACW)
    195c:	89 81       	ldd	r24, Y+1	; 0x01
    195e:	82 30       	cpi	r24, 0x02	; 2
    1960:	59 f4       	brne	.+22     	; 0x1978 <DcMotor_Rotate+0x44>
	{
		/* Rotates the Motor A-CW */
		GPIO_writePin(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,LOGIC_HIGH);
    1962:	83 e0       	ldi	r24, 0x03	; 3
    1964:	62 e0       	ldi	r22, 0x02	; 2
    1966:	41 e0       	ldi	r20, 0x01	; 1
    1968:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,LOGIC_LOW);
    196c:	83 e0       	ldi	r24, 0x03	; 3
    196e:	63 e0       	ldi	r22, 0x03	; 3
    1970:	40 e0       	ldi	r20, 0x00	; 0
    1972:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <GPIO_writePin>
    1976:	0d c0       	rjmp	.+26     	; 0x1992 <DcMotor_Rotate+0x5e>
	}
	else if(state == DC_MOTOR_STOP)
    1978:	89 81       	ldd	r24, Y+1	; 0x01
    197a:	88 23       	and	r24, r24
    197c:	51 f4       	brne	.+20     	; 0x1992 <DcMotor_Rotate+0x5e>
	{
		/* Stop the Motor */
		GPIO_writePin(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,LOGIC_LOW);
    197e:	83 e0       	ldi	r24, 0x03	; 3
    1980:	62 e0       	ldi	r22, 0x02	; 2
    1982:	40 e0       	ldi	r20, 0x00	; 0
    1984:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,LOGIC_LOW);
    1988:	83 e0       	ldi	r24, 0x03	; 3
    198a:	63 e0       	ldi	r22, 0x03	; 3
    198c:	40 e0       	ldi	r20, 0x00	; 0
    198e:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <GPIO_writePin>
	}
	else
	{
		/* Invalid Input State - Do Nothing */
	}
}
    1992:	0f 90       	pop	r0
    1994:	cf 91       	pop	r28
    1996:	df 91       	pop	r29
    1998:	08 95       	ret

0000199a <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    199a:	df 93       	push	r29
    199c:	cf 93       	push	r28
    199e:	00 d0       	rcall	.+0      	; 0x19a0 <EEPROM_writeByte+0x6>
    19a0:	00 d0       	rcall	.+0      	; 0x19a2 <EEPROM_writeByte+0x8>
    19a2:	cd b7       	in	r28, 0x3d	; 61
    19a4:	de b7       	in	r29, 0x3e	; 62
    19a6:	9a 83       	std	Y+2, r25	; 0x02
    19a8:	89 83       	std	Y+1, r24	; 0x01
    19aa:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    19ac:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <TWI_start>
    if (TWI_getStatus() != TWI_START)
    19b0:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <TWI_getStatus>
    19b4:	88 30       	cpi	r24, 0x08	; 8
    19b6:	11 f0       	breq	.+4      	; 0x19bc <EEPROM_writeByte+0x22>
        return ERROR;
    19b8:	1c 82       	std	Y+4, r1	; 0x04
    19ba:	28 c0       	rjmp	.+80     	; 0x1a0c <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    19bc:	89 81       	ldd	r24, Y+1	; 0x01
    19be:	9a 81       	ldd	r25, Y+2	; 0x02
    19c0:	80 70       	andi	r24, 0x00	; 0
    19c2:	97 70       	andi	r25, 0x07	; 7
    19c4:	88 0f       	add	r24, r24
    19c6:	89 2f       	mov	r24, r25
    19c8:	88 1f       	adc	r24, r24
    19ca:	99 0b       	sbc	r25, r25
    19cc:	91 95       	neg	r25
    19ce:	80 6a       	ori	r24, 0xA0	; 160
    19d0:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    19d4:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <TWI_getStatus>
    19d8:	88 31       	cpi	r24, 0x18	; 24
    19da:	11 f0       	breq	.+4      	; 0x19e0 <EEPROM_writeByte+0x46>
        return ERROR; 
    19dc:	1c 82       	std	Y+4, r1	; 0x04
    19de:	16 c0       	rjmp	.+44     	; 0x1a0c <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    19e0:	89 81       	ldd	r24, Y+1	; 0x01
    19e2:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    19e6:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <TWI_getStatus>
    19ea:	88 32       	cpi	r24, 0x28	; 40
    19ec:	11 f0       	breq	.+4      	; 0x19f2 <EEPROM_writeByte+0x58>
        return ERROR;
    19ee:	1c 82       	std	Y+4, r1	; 0x04
    19f0:	0d c0       	rjmp	.+26     	; 0x1a0c <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    19f2:	8b 81       	ldd	r24, Y+3	; 0x03
    19f4:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    19f8:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <TWI_getStatus>
    19fc:	88 32       	cpi	r24, 0x28	; 40
    19fe:	11 f0       	breq	.+4      	; 0x1a04 <EEPROM_writeByte+0x6a>
        return ERROR;
    1a00:	1c 82       	std	Y+4, r1	; 0x04
    1a02:	04 c0       	rjmp	.+8      	; 0x1a0c <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1a04:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <TWI_stop>
	
    return SUCCESS;
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	8c 83       	std	Y+4, r24	; 0x04
    1a0c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1a0e:	0f 90       	pop	r0
    1a10:	0f 90       	pop	r0
    1a12:	0f 90       	pop	r0
    1a14:	0f 90       	pop	r0
    1a16:	cf 91       	pop	r28
    1a18:	df 91       	pop	r29
    1a1a:	08 95       	ret

00001a1c <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1a1c:	df 93       	push	r29
    1a1e:	cf 93       	push	r28
    1a20:	00 d0       	rcall	.+0      	; 0x1a22 <EEPROM_readByte+0x6>
    1a22:	00 d0       	rcall	.+0      	; 0x1a24 <EEPROM_readByte+0x8>
    1a24:	0f 92       	push	r0
    1a26:	cd b7       	in	r28, 0x3d	; 61
    1a28:	de b7       	in	r29, 0x3e	; 62
    1a2a:	9a 83       	std	Y+2, r25	; 0x02
    1a2c:	89 83       	std	Y+1, r24	; 0x01
    1a2e:	7c 83       	std	Y+4, r23	; 0x04
    1a30:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1a32:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1a36:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <TWI_getStatus>
    1a3a:	88 30       	cpi	r24, 0x08	; 8
    1a3c:	11 f0       	breq	.+4      	; 0x1a42 <EEPROM_readByte+0x26>
        return ERROR;
    1a3e:	1d 82       	std	Y+5, r1	; 0x05
    1a40:	44 c0       	rjmp	.+136    	; 0x1aca <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1a42:	89 81       	ldd	r24, Y+1	; 0x01
    1a44:	9a 81       	ldd	r25, Y+2	; 0x02
    1a46:	80 70       	andi	r24, 0x00	; 0
    1a48:	97 70       	andi	r25, 0x07	; 7
    1a4a:	88 0f       	add	r24, r24
    1a4c:	89 2f       	mov	r24, r25
    1a4e:	88 1f       	adc	r24, r24
    1a50:	99 0b       	sbc	r25, r25
    1a52:	91 95       	neg	r25
    1a54:	80 6a       	ori	r24, 0xA0	; 160
    1a56:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1a5a:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <TWI_getStatus>
    1a5e:	88 31       	cpi	r24, 0x18	; 24
    1a60:	11 f0       	breq	.+4      	; 0x1a66 <EEPROM_readByte+0x4a>
        return ERROR;
    1a62:	1d 82       	std	Y+5, r1	; 0x05
    1a64:	32 c0       	rjmp	.+100    	; 0x1aca <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1a66:	89 81       	ldd	r24, Y+1	; 0x01
    1a68:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1a6c:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <TWI_getStatus>
    1a70:	88 32       	cpi	r24, 0x28	; 40
    1a72:	11 f0       	breq	.+4      	; 0x1a78 <EEPROM_readByte+0x5c>
        return ERROR;
    1a74:	1d 82       	std	Y+5, r1	; 0x05
    1a76:	29 c0       	rjmp	.+82     	; 0x1aca <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1a78:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1a7c:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <TWI_getStatus>
    1a80:	80 31       	cpi	r24, 0x10	; 16
    1a82:	11 f0       	breq	.+4      	; 0x1a88 <EEPROM_readByte+0x6c>
        return ERROR;
    1a84:	1d 82       	std	Y+5, r1	; 0x05
    1a86:	21 c0       	rjmp	.+66     	; 0x1aca <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1a88:	89 81       	ldd	r24, Y+1	; 0x01
    1a8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a8c:	80 70       	andi	r24, 0x00	; 0
    1a8e:	97 70       	andi	r25, 0x07	; 7
    1a90:	88 0f       	add	r24, r24
    1a92:	89 2f       	mov	r24, r25
    1a94:	88 1f       	adc	r24, r24
    1a96:	99 0b       	sbc	r25, r25
    1a98:	91 95       	neg	r25
    1a9a:	81 6a       	ori	r24, 0xA1	; 161
    1a9c:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1aa0:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <TWI_getStatus>
    1aa4:	80 34       	cpi	r24, 0x40	; 64
    1aa6:	11 f0       	breq	.+4      	; 0x1aac <EEPROM_readByte+0x90>
        return ERROR;
    1aa8:	1d 82       	std	Y+5, r1	; 0x05
    1aaa:	0f c0       	rjmp	.+30     	; 0x1aca <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1aac:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <TWI_readByteWithNACK>
    1ab0:	eb 81       	ldd	r30, Y+3	; 0x03
    1ab2:	fc 81       	ldd	r31, Y+4	; 0x04
    1ab4:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1ab6:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <TWI_getStatus>
    1aba:	88 35       	cpi	r24, 0x58	; 88
    1abc:	11 f0       	breq	.+4      	; 0x1ac2 <EEPROM_readByte+0xa6>
        return ERROR;
    1abe:	1d 82       	std	Y+5, r1	; 0x05
    1ac0:	04 c0       	rjmp	.+8      	; 0x1aca <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1ac2:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <TWI_stop>

    return SUCCESS;
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	8d 83       	std	Y+5, r24	; 0x05
    1aca:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1acc:	0f 90       	pop	r0
    1ace:	0f 90       	pop	r0
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	0f 90       	pop	r0
    1ad6:	cf 91       	pop	r28
    1ad8:	df 91       	pop	r29
    1ada:	08 95       	ret

00001adc <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1adc:	df 93       	push	r29
    1ade:	cf 93       	push	r28
    1ae0:	00 d0       	rcall	.+0      	; 0x1ae2 <GPIO_setupPinDirection+0x6>
    1ae2:	00 d0       	rcall	.+0      	; 0x1ae4 <GPIO_setupPinDirection+0x8>
    1ae4:	0f 92       	push	r0
    1ae6:	cd b7       	in	r28, 0x3d	; 61
    1ae8:	de b7       	in	r29, 0x3e	; 62
    1aea:	89 83       	std	Y+1, r24	; 0x01
    1aec:	6a 83       	std	Y+2, r22	; 0x02
    1aee:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1af0:	8a 81       	ldd	r24, Y+2	; 0x02
    1af2:	88 30       	cpi	r24, 0x08	; 8
    1af4:	08 f0       	brcs	.+2      	; 0x1af8 <GPIO_setupPinDirection+0x1c>
    1af6:	d5 c0       	rjmp	.+426    	; 0x1ca2 <GPIO_setupPinDirection+0x1c6>
    1af8:	89 81       	ldd	r24, Y+1	; 0x01
    1afa:	84 30       	cpi	r24, 0x04	; 4
    1afc:	08 f0       	brcs	.+2      	; 0x1b00 <GPIO_setupPinDirection+0x24>
    1afe:	d1 c0       	rjmp	.+418    	; 0x1ca2 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1b00:	89 81       	ldd	r24, Y+1	; 0x01
    1b02:	28 2f       	mov	r18, r24
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	3d 83       	std	Y+5, r19	; 0x05
    1b08:	2c 83       	std	Y+4, r18	; 0x04
    1b0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b0c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b0e:	81 30       	cpi	r24, 0x01	; 1
    1b10:	91 05       	cpc	r25, r1
    1b12:	09 f4       	brne	.+2      	; 0x1b16 <GPIO_setupPinDirection+0x3a>
    1b14:	43 c0       	rjmp	.+134    	; 0x1b9c <GPIO_setupPinDirection+0xc0>
    1b16:	2c 81       	ldd	r18, Y+4	; 0x04
    1b18:	3d 81       	ldd	r19, Y+5	; 0x05
    1b1a:	22 30       	cpi	r18, 0x02	; 2
    1b1c:	31 05       	cpc	r19, r1
    1b1e:	2c f4       	brge	.+10     	; 0x1b2a <GPIO_setupPinDirection+0x4e>
    1b20:	8c 81       	ldd	r24, Y+4	; 0x04
    1b22:	9d 81       	ldd	r25, Y+5	; 0x05
    1b24:	00 97       	sbiw	r24, 0x00	; 0
    1b26:	71 f0       	breq	.+28     	; 0x1b44 <GPIO_setupPinDirection+0x68>
    1b28:	bc c0       	rjmp	.+376    	; 0x1ca2 <GPIO_setupPinDirection+0x1c6>
    1b2a:	2c 81       	ldd	r18, Y+4	; 0x04
    1b2c:	3d 81       	ldd	r19, Y+5	; 0x05
    1b2e:	22 30       	cpi	r18, 0x02	; 2
    1b30:	31 05       	cpc	r19, r1
    1b32:	09 f4       	brne	.+2      	; 0x1b36 <GPIO_setupPinDirection+0x5a>
    1b34:	5f c0       	rjmp	.+190    	; 0x1bf4 <GPIO_setupPinDirection+0x118>
    1b36:	8c 81       	ldd	r24, Y+4	; 0x04
    1b38:	9d 81       	ldd	r25, Y+5	; 0x05
    1b3a:	83 30       	cpi	r24, 0x03	; 3
    1b3c:	91 05       	cpc	r25, r1
    1b3e:	09 f4       	brne	.+2      	; 0x1b42 <GPIO_setupPinDirection+0x66>
    1b40:	85 c0       	rjmp	.+266    	; 0x1c4c <GPIO_setupPinDirection+0x170>
    1b42:	af c0       	rjmp	.+350    	; 0x1ca2 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1b44:	8b 81       	ldd	r24, Y+3	; 0x03
    1b46:	81 30       	cpi	r24, 0x01	; 1
    1b48:	a1 f4       	brne	.+40     	; 0x1b72 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1b4a:	aa e3       	ldi	r26, 0x3A	; 58
    1b4c:	b0 e0       	ldi	r27, 0x00	; 0
    1b4e:	ea e3       	ldi	r30, 0x3A	; 58
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	80 81       	ld	r24, Z
    1b54:	48 2f       	mov	r20, r24
    1b56:	8a 81       	ldd	r24, Y+2	; 0x02
    1b58:	28 2f       	mov	r18, r24
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	02 2e       	mov	r0, r18
    1b62:	02 c0       	rjmp	.+4      	; 0x1b68 <GPIO_setupPinDirection+0x8c>
    1b64:	88 0f       	add	r24, r24
    1b66:	99 1f       	adc	r25, r25
    1b68:	0a 94       	dec	r0
    1b6a:	e2 f7       	brpl	.-8      	; 0x1b64 <GPIO_setupPinDirection+0x88>
    1b6c:	84 2b       	or	r24, r20
    1b6e:	8c 93       	st	X, r24
    1b70:	98 c0       	rjmp	.+304    	; 0x1ca2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1b72:	aa e3       	ldi	r26, 0x3A	; 58
    1b74:	b0 e0       	ldi	r27, 0x00	; 0
    1b76:	ea e3       	ldi	r30, 0x3A	; 58
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	80 81       	ld	r24, Z
    1b7c:	48 2f       	mov	r20, r24
    1b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b80:	28 2f       	mov	r18, r24
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	02 2e       	mov	r0, r18
    1b8a:	02 c0       	rjmp	.+4      	; 0x1b90 <GPIO_setupPinDirection+0xb4>
    1b8c:	88 0f       	add	r24, r24
    1b8e:	99 1f       	adc	r25, r25
    1b90:	0a 94       	dec	r0
    1b92:	e2 f7       	brpl	.-8      	; 0x1b8c <GPIO_setupPinDirection+0xb0>
    1b94:	80 95       	com	r24
    1b96:	84 23       	and	r24, r20
    1b98:	8c 93       	st	X, r24
    1b9a:	83 c0       	rjmp	.+262    	; 0x1ca2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1b9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9e:	81 30       	cpi	r24, 0x01	; 1
    1ba0:	a1 f4       	brne	.+40     	; 0x1bca <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1ba2:	a7 e3       	ldi	r26, 0x37	; 55
    1ba4:	b0 e0       	ldi	r27, 0x00	; 0
    1ba6:	e7 e3       	ldi	r30, 0x37	; 55
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	80 81       	ld	r24, Z
    1bac:	48 2f       	mov	r20, r24
    1bae:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb0:	28 2f       	mov	r18, r24
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	02 2e       	mov	r0, r18
    1bba:	02 c0       	rjmp	.+4      	; 0x1bc0 <GPIO_setupPinDirection+0xe4>
    1bbc:	88 0f       	add	r24, r24
    1bbe:	99 1f       	adc	r25, r25
    1bc0:	0a 94       	dec	r0
    1bc2:	e2 f7       	brpl	.-8      	; 0x1bbc <GPIO_setupPinDirection+0xe0>
    1bc4:	84 2b       	or	r24, r20
    1bc6:	8c 93       	st	X, r24
    1bc8:	6c c0       	rjmp	.+216    	; 0x1ca2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1bca:	a7 e3       	ldi	r26, 0x37	; 55
    1bcc:	b0 e0       	ldi	r27, 0x00	; 0
    1bce:	e7 e3       	ldi	r30, 0x37	; 55
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	48 2f       	mov	r20, r24
    1bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd8:	28 2f       	mov	r18, r24
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	02 2e       	mov	r0, r18
    1be2:	02 c0       	rjmp	.+4      	; 0x1be8 <GPIO_setupPinDirection+0x10c>
    1be4:	88 0f       	add	r24, r24
    1be6:	99 1f       	adc	r25, r25
    1be8:	0a 94       	dec	r0
    1bea:	e2 f7       	brpl	.-8      	; 0x1be4 <GPIO_setupPinDirection+0x108>
    1bec:	80 95       	com	r24
    1bee:	84 23       	and	r24, r20
    1bf0:	8c 93       	st	X, r24
    1bf2:	57 c0       	rjmp	.+174    	; 0x1ca2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1bf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf6:	81 30       	cpi	r24, 0x01	; 1
    1bf8:	a1 f4       	brne	.+40     	; 0x1c22 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1bfa:	a4 e3       	ldi	r26, 0x34	; 52
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	e4 e3       	ldi	r30, 0x34	; 52
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	48 2f       	mov	r20, r24
    1c06:	8a 81       	ldd	r24, Y+2	; 0x02
    1c08:	28 2f       	mov	r18, r24
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	02 2e       	mov	r0, r18
    1c12:	02 c0       	rjmp	.+4      	; 0x1c18 <GPIO_setupPinDirection+0x13c>
    1c14:	88 0f       	add	r24, r24
    1c16:	99 1f       	adc	r25, r25
    1c18:	0a 94       	dec	r0
    1c1a:	e2 f7       	brpl	.-8      	; 0x1c14 <GPIO_setupPinDirection+0x138>
    1c1c:	84 2b       	or	r24, r20
    1c1e:	8c 93       	st	X, r24
    1c20:	40 c0       	rjmp	.+128    	; 0x1ca2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1c22:	a4 e3       	ldi	r26, 0x34	; 52
    1c24:	b0 e0       	ldi	r27, 0x00	; 0
    1c26:	e4 e3       	ldi	r30, 0x34	; 52
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	80 81       	ld	r24, Z
    1c2c:	48 2f       	mov	r20, r24
    1c2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c30:	28 2f       	mov	r18, r24
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	02 2e       	mov	r0, r18
    1c3a:	02 c0       	rjmp	.+4      	; 0x1c40 <GPIO_setupPinDirection+0x164>
    1c3c:	88 0f       	add	r24, r24
    1c3e:	99 1f       	adc	r25, r25
    1c40:	0a 94       	dec	r0
    1c42:	e2 f7       	brpl	.-8      	; 0x1c3c <GPIO_setupPinDirection+0x160>
    1c44:	80 95       	com	r24
    1c46:	84 23       	and	r24, r20
    1c48:	8c 93       	st	X, r24
    1c4a:	2b c0       	rjmp	.+86     	; 0x1ca2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4e:	81 30       	cpi	r24, 0x01	; 1
    1c50:	a1 f4       	brne	.+40     	; 0x1c7a <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1c52:	a1 e3       	ldi	r26, 0x31	; 49
    1c54:	b0 e0       	ldi	r27, 0x00	; 0
    1c56:	e1 e3       	ldi	r30, 0x31	; 49
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	80 81       	ld	r24, Z
    1c5c:	48 2f       	mov	r20, r24
    1c5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c60:	28 2f       	mov	r18, r24
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	02 2e       	mov	r0, r18
    1c6a:	02 c0       	rjmp	.+4      	; 0x1c70 <GPIO_setupPinDirection+0x194>
    1c6c:	88 0f       	add	r24, r24
    1c6e:	99 1f       	adc	r25, r25
    1c70:	0a 94       	dec	r0
    1c72:	e2 f7       	brpl	.-8      	; 0x1c6c <GPIO_setupPinDirection+0x190>
    1c74:	84 2b       	or	r24, r20
    1c76:	8c 93       	st	X, r24
    1c78:	14 c0       	rjmp	.+40     	; 0x1ca2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1c7a:	a1 e3       	ldi	r26, 0x31	; 49
    1c7c:	b0 e0       	ldi	r27, 0x00	; 0
    1c7e:	e1 e3       	ldi	r30, 0x31	; 49
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	80 81       	ld	r24, Z
    1c84:	48 2f       	mov	r20, r24
    1c86:	8a 81       	ldd	r24, Y+2	; 0x02
    1c88:	28 2f       	mov	r18, r24
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	02 2e       	mov	r0, r18
    1c92:	02 c0       	rjmp	.+4      	; 0x1c98 <GPIO_setupPinDirection+0x1bc>
    1c94:	88 0f       	add	r24, r24
    1c96:	99 1f       	adc	r25, r25
    1c98:	0a 94       	dec	r0
    1c9a:	e2 f7       	brpl	.-8      	; 0x1c94 <GPIO_setupPinDirection+0x1b8>
    1c9c:	80 95       	com	r24
    1c9e:	84 23       	and	r24, r20
    1ca0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1ca2:	0f 90       	pop	r0
    1ca4:	0f 90       	pop	r0
    1ca6:	0f 90       	pop	r0
    1ca8:	0f 90       	pop	r0
    1caa:	0f 90       	pop	r0
    1cac:	cf 91       	pop	r28
    1cae:	df 91       	pop	r29
    1cb0:	08 95       	ret

00001cb2 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1cb2:	df 93       	push	r29
    1cb4:	cf 93       	push	r28
    1cb6:	00 d0       	rcall	.+0      	; 0x1cb8 <GPIO_writePin+0x6>
    1cb8:	00 d0       	rcall	.+0      	; 0x1cba <GPIO_writePin+0x8>
    1cba:	0f 92       	push	r0
    1cbc:	cd b7       	in	r28, 0x3d	; 61
    1cbe:	de b7       	in	r29, 0x3e	; 62
    1cc0:	89 83       	std	Y+1, r24	; 0x01
    1cc2:	6a 83       	std	Y+2, r22	; 0x02
    1cc4:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc8:	88 30       	cpi	r24, 0x08	; 8
    1cca:	08 f0       	brcs	.+2      	; 0x1cce <GPIO_writePin+0x1c>
    1ccc:	d5 c0       	rjmp	.+426    	; 0x1e78 <GPIO_writePin+0x1c6>
    1cce:	89 81       	ldd	r24, Y+1	; 0x01
    1cd0:	84 30       	cpi	r24, 0x04	; 4
    1cd2:	08 f0       	brcs	.+2      	; 0x1cd6 <GPIO_writePin+0x24>
    1cd4:	d1 c0       	rjmp	.+418    	; 0x1e78 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1cd6:	89 81       	ldd	r24, Y+1	; 0x01
    1cd8:	28 2f       	mov	r18, r24
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	3d 83       	std	Y+5, r19	; 0x05
    1cde:	2c 83       	std	Y+4, r18	; 0x04
    1ce0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ce4:	81 30       	cpi	r24, 0x01	; 1
    1ce6:	91 05       	cpc	r25, r1
    1ce8:	09 f4       	brne	.+2      	; 0x1cec <GPIO_writePin+0x3a>
    1cea:	43 c0       	rjmp	.+134    	; 0x1d72 <GPIO_writePin+0xc0>
    1cec:	2c 81       	ldd	r18, Y+4	; 0x04
    1cee:	3d 81       	ldd	r19, Y+5	; 0x05
    1cf0:	22 30       	cpi	r18, 0x02	; 2
    1cf2:	31 05       	cpc	r19, r1
    1cf4:	2c f4       	brge	.+10     	; 0x1d00 <GPIO_writePin+0x4e>
    1cf6:	8c 81       	ldd	r24, Y+4	; 0x04
    1cf8:	9d 81       	ldd	r25, Y+5	; 0x05
    1cfa:	00 97       	sbiw	r24, 0x00	; 0
    1cfc:	71 f0       	breq	.+28     	; 0x1d1a <GPIO_writePin+0x68>
    1cfe:	bc c0       	rjmp	.+376    	; 0x1e78 <GPIO_writePin+0x1c6>
    1d00:	2c 81       	ldd	r18, Y+4	; 0x04
    1d02:	3d 81       	ldd	r19, Y+5	; 0x05
    1d04:	22 30       	cpi	r18, 0x02	; 2
    1d06:	31 05       	cpc	r19, r1
    1d08:	09 f4       	brne	.+2      	; 0x1d0c <GPIO_writePin+0x5a>
    1d0a:	5f c0       	rjmp	.+190    	; 0x1dca <GPIO_writePin+0x118>
    1d0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d0e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d10:	83 30       	cpi	r24, 0x03	; 3
    1d12:	91 05       	cpc	r25, r1
    1d14:	09 f4       	brne	.+2      	; 0x1d18 <GPIO_writePin+0x66>
    1d16:	85 c0       	rjmp	.+266    	; 0x1e22 <GPIO_writePin+0x170>
    1d18:	af c0       	rjmp	.+350    	; 0x1e78 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1c:	81 30       	cpi	r24, 0x01	; 1
    1d1e:	a1 f4       	brne	.+40     	; 0x1d48 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1d20:	ab e3       	ldi	r26, 0x3B	; 59
    1d22:	b0 e0       	ldi	r27, 0x00	; 0
    1d24:	eb e3       	ldi	r30, 0x3B	; 59
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	80 81       	ld	r24, Z
    1d2a:	48 2f       	mov	r20, r24
    1d2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2e:	28 2f       	mov	r18, r24
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	02 2e       	mov	r0, r18
    1d38:	02 c0       	rjmp	.+4      	; 0x1d3e <GPIO_writePin+0x8c>
    1d3a:	88 0f       	add	r24, r24
    1d3c:	99 1f       	adc	r25, r25
    1d3e:	0a 94       	dec	r0
    1d40:	e2 f7       	brpl	.-8      	; 0x1d3a <GPIO_writePin+0x88>
    1d42:	84 2b       	or	r24, r20
    1d44:	8c 93       	st	X, r24
    1d46:	98 c0       	rjmp	.+304    	; 0x1e78 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1d48:	ab e3       	ldi	r26, 0x3B	; 59
    1d4a:	b0 e0       	ldi	r27, 0x00	; 0
    1d4c:	eb e3       	ldi	r30, 0x3B	; 59
    1d4e:	f0 e0       	ldi	r31, 0x00	; 0
    1d50:	80 81       	ld	r24, Z
    1d52:	48 2f       	mov	r20, r24
    1d54:	8a 81       	ldd	r24, Y+2	; 0x02
    1d56:	28 2f       	mov	r18, r24
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	81 e0       	ldi	r24, 0x01	; 1
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	02 2e       	mov	r0, r18
    1d60:	02 c0       	rjmp	.+4      	; 0x1d66 <GPIO_writePin+0xb4>
    1d62:	88 0f       	add	r24, r24
    1d64:	99 1f       	adc	r25, r25
    1d66:	0a 94       	dec	r0
    1d68:	e2 f7       	brpl	.-8      	; 0x1d62 <GPIO_writePin+0xb0>
    1d6a:	80 95       	com	r24
    1d6c:	84 23       	and	r24, r20
    1d6e:	8c 93       	st	X, r24
    1d70:	83 c0       	rjmp	.+262    	; 0x1e78 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1d72:	8b 81       	ldd	r24, Y+3	; 0x03
    1d74:	81 30       	cpi	r24, 0x01	; 1
    1d76:	a1 f4       	brne	.+40     	; 0x1da0 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1d78:	a8 e3       	ldi	r26, 0x38	; 56
    1d7a:	b0 e0       	ldi	r27, 0x00	; 0
    1d7c:	e8 e3       	ldi	r30, 0x38	; 56
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	80 81       	ld	r24, Z
    1d82:	48 2f       	mov	r20, r24
    1d84:	8a 81       	ldd	r24, Y+2	; 0x02
    1d86:	28 2f       	mov	r18, r24
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	02 2e       	mov	r0, r18
    1d90:	02 c0       	rjmp	.+4      	; 0x1d96 <GPIO_writePin+0xe4>
    1d92:	88 0f       	add	r24, r24
    1d94:	99 1f       	adc	r25, r25
    1d96:	0a 94       	dec	r0
    1d98:	e2 f7       	brpl	.-8      	; 0x1d92 <GPIO_writePin+0xe0>
    1d9a:	84 2b       	or	r24, r20
    1d9c:	8c 93       	st	X, r24
    1d9e:	6c c0       	rjmp	.+216    	; 0x1e78 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1da0:	a8 e3       	ldi	r26, 0x38	; 56
    1da2:	b0 e0       	ldi	r27, 0x00	; 0
    1da4:	e8 e3       	ldi	r30, 0x38	; 56
    1da6:	f0 e0       	ldi	r31, 0x00	; 0
    1da8:	80 81       	ld	r24, Z
    1daa:	48 2f       	mov	r20, r24
    1dac:	8a 81       	ldd	r24, Y+2	; 0x02
    1dae:	28 2f       	mov	r18, r24
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	02 2e       	mov	r0, r18
    1db8:	02 c0       	rjmp	.+4      	; 0x1dbe <GPIO_writePin+0x10c>
    1dba:	88 0f       	add	r24, r24
    1dbc:	99 1f       	adc	r25, r25
    1dbe:	0a 94       	dec	r0
    1dc0:	e2 f7       	brpl	.-8      	; 0x1dba <GPIO_writePin+0x108>
    1dc2:	80 95       	com	r24
    1dc4:	84 23       	and	r24, r20
    1dc6:	8c 93       	st	X, r24
    1dc8:	57 c0       	rjmp	.+174    	; 0x1e78 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1dca:	8b 81       	ldd	r24, Y+3	; 0x03
    1dcc:	81 30       	cpi	r24, 0x01	; 1
    1dce:	a1 f4       	brne	.+40     	; 0x1df8 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1dd0:	a5 e3       	ldi	r26, 0x35	; 53
    1dd2:	b0 e0       	ldi	r27, 0x00	; 0
    1dd4:	e5 e3       	ldi	r30, 0x35	; 53
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	80 81       	ld	r24, Z
    1dda:	48 2f       	mov	r20, r24
    1ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dde:	28 2f       	mov	r18, r24
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	81 e0       	ldi	r24, 0x01	; 1
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	02 2e       	mov	r0, r18
    1de8:	02 c0       	rjmp	.+4      	; 0x1dee <GPIO_writePin+0x13c>
    1dea:	88 0f       	add	r24, r24
    1dec:	99 1f       	adc	r25, r25
    1dee:	0a 94       	dec	r0
    1df0:	e2 f7       	brpl	.-8      	; 0x1dea <GPIO_writePin+0x138>
    1df2:	84 2b       	or	r24, r20
    1df4:	8c 93       	st	X, r24
    1df6:	40 c0       	rjmp	.+128    	; 0x1e78 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1df8:	a5 e3       	ldi	r26, 0x35	; 53
    1dfa:	b0 e0       	ldi	r27, 0x00	; 0
    1dfc:	e5 e3       	ldi	r30, 0x35	; 53
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	80 81       	ld	r24, Z
    1e02:	48 2f       	mov	r20, r24
    1e04:	8a 81       	ldd	r24, Y+2	; 0x02
    1e06:	28 2f       	mov	r18, r24
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	02 2e       	mov	r0, r18
    1e10:	02 c0       	rjmp	.+4      	; 0x1e16 <GPIO_writePin+0x164>
    1e12:	88 0f       	add	r24, r24
    1e14:	99 1f       	adc	r25, r25
    1e16:	0a 94       	dec	r0
    1e18:	e2 f7       	brpl	.-8      	; 0x1e12 <GPIO_writePin+0x160>
    1e1a:	80 95       	com	r24
    1e1c:	84 23       	and	r24, r20
    1e1e:	8c 93       	st	X, r24
    1e20:	2b c0       	rjmp	.+86     	; 0x1e78 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1e22:	8b 81       	ldd	r24, Y+3	; 0x03
    1e24:	81 30       	cpi	r24, 0x01	; 1
    1e26:	a1 f4       	brne	.+40     	; 0x1e50 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1e28:	a2 e3       	ldi	r26, 0x32	; 50
    1e2a:	b0 e0       	ldi	r27, 0x00	; 0
    1e2c:	e2 e3       	ldi	r30, 0x32	; 50
    1e2e:	f0 e0       	ldi	r31, 0x00	; 0
    1e30:	80 81       	ld	r24, Z
    1e32:	48 2f       	mov	r20, r24
    1e34:	8a 81       	ldd	r24, Y+2	; 0x02
    1e36:	28 2f       	mov	r18, r24
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	81 e0       	ldi	r24, 0x01	; 1
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	02 2e       	mov	r0, r18
    1e40:	02 c0       	rjmp	.+4      	; 0x1e46 <GPIO_writePin+0x194>
    1e42:	88 0f       	add	r24, r24
    1e44:	99 1f       	adc	r25, r25
    1e46:	0a 94       	dec	r0
    1e48:	e2 f7       	brpl	.-8      	; 0x1e42 <GPIO_writePin+0x190>
    1e4a:	84 2b       	or	r24, r20
    1e4c:	8c 93       	st	X, r24
    1e4e:	14 c0       	rjmp	.+40     	; 0x1e78 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1e50:	a2 e3       	ldi	r26, 0x32	; 50
    1e52:	b0 e0       	ldi	r27, 0x00	; 0
    1e54:	e2 e3       	ldi	r30, 0x32	; 50
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	80 81       	ld	r24, Z
    1e5a:	48 2f       	mov	r20, r24
    1e5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5e:	28 2f       	mov	r18, r24
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	81 e0       	ldi	r24, 0x01	; 1
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	02 2e       	mov	r0, r18
    1e68:	02 c0       	rjmp	.+4      	; 0x1e6e <GPIO_writePin+0x1bc>
    1e6a:	88 0f       	add	r24, r24
    1e6c:	99 1f       	adc	r25, r25
    1e6e:	0a 94       	dec	r0
    1e70:	e2 f7       	brpl	.-8      	; 0x1e6a <GPIO_writePin+0x1b8>
    1e72:	80 95       	com	r24
    1e74:	84 23       	and	r24, r20
    1e76:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1e78:	0f 90       	pop	r0
    1e7a:	0f 90       	pop	r0
    1e7c:	0f 90       	pop	r0
    1e7e:	0f 90       	pop	r0
    1e80:	0f 90       	pop	r0
    1e82:	cf 91       	pop	r28
    1e84:	df 91       	pop	r29
    1e86:	08 95       	ret

00001e88 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1e88:	df 93       	push	r29
    1e8a:	cf 93       	push	r28
    1e8c:	00 d0       	rcall	.+0      	; 0x1e8e <GPIO_readPin+0x6>
    1e8e:	00 d0       	rcall	.+0      	; 0x1e90 <GPIO_readPin+0x8>
    1e90:	0f 92       	push	r0
    1e92:	cd b7       	in	r28, 0x3d	; 61
    1e94:	de b7       	in	r29, 0x3e	; 62
    1e96:	8a 83       	std	Y+2, r24	; 0x02
    1e98:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1e9a:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9e:	88 30       	cpi	r24, 0x08	; 8
    1ea0:	08 f0       	brcs	.+2      	; 0x1ea4 <GPIO_readPin+0x1c>
    1ea2:	84 c0       	rjmp	.+264    	; 0x1fac <GPIO_readPin+0x124>
    1ea4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea6:	84 30       	cpi	r24, 0x04	; 4
    1ea8:	08 f0       	brcs	.+2      	; 0x1eac <GPIO_readPin+0x24>
    1eaa:	80 c0       	rjmp	.+256    	; 0x1fac <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1eac:	8a 81       	ldd	r24, Y+2	; 0x02
    1eae:	28 2f       	mov	r18, r24
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	3d 83       	std	Y+5, r19	; 0x05
    1eb4:	2c 83       	std	Y+4, r18	; 0x04
    1eb6:	4c 81       	ldd	r20, Y+4	; 0x04
    1eb8:	5d 81       	ldd	r21, Y+5	; 0x05
    1eba:	41 30       	cpi	r20, 0x01	; 1
    1ebc:	51 05       	cpc	r21, r1
    1ebe:	79 f1       	breq	.+94     	; 0x1f1e <GPIO_readPin+0x96>
    1ec0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ec2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ec4:	82 30       	cpi	r24, 0x02	; 2
    1ec6:	91 05       	cpc	r25, r1
    1ec8:	34 f4       	brge	.+12     	; 0x1ed6 <GPIO_readPin+0x4e>
    1eca:	2c 81       	ldd	r18, Y+4	; 0x04
    1ecc:	3d 81       	ldd	r19, Y+5	; 0x05
    1ece:	21 15       	cp	r18, r1
    1ed0:	31 05       	cpc	r19, r1
    1ed2:	69 f0       	breq	.+26     	; 0x1eee <GPIO_readPin+0x66>
    1ed4:	6b c0       	rjmp	.+214    	; 0x1fac <GPIO_readPin+0x124>
    1ed6:	4c 81       	ldd	r20, Y+4	; 0x04
    1ed8:	5d 81       	ldd	r21, Y+5	; 0x05
    1eda:	42 30       	cpi	r20, 0x02	; 2
    1edc:	51 05       	cpc	r21, r1
    1ede:	b9 f1       	breq	.+110    	; 0x1f4e <GPIO_readPin+0xc6>
    1ee0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ee2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ee4:	83 30       	cpi	r24, 0x03	; 3
    1ee6:	91 05       	cpc	r25, r1
    1ee8:	09 f4       	brne	.+2      	; 0x1eec <GPIO_readPin+0x64>
    1eea:	49 c0       	rjmp	.+146    	; 0x1f7e <GPIO_readPin+0xf6>
    1eec:	5f c0       	rjmp	.+190    	; 0x1fac <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1eee:	e9 e3       	ldi	r30, 0x39	; 57
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	80 81       	ld	r24, Z
    1ef4:	28 2f       	mov	r18, r24
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	8b 81       	ldd	r24, Y+3	; 0x03
    1efa:	88 2f       	mov	r24, r24
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	a9 01       	movw	r20, r18
    1f00:	02 c0       	rjmp	.+4      	; 0x1f06 <GPIO_readPin+0x7e>
    1f02:	55 95       	asr	r21
    1f04:	47 95       	ror	r20
    1f06:	8a 95       	dec	r24
    1f08:	e2 f7       	brpl	.-8      	; 0x1f02 <GPIO_readPin+0x7a>
    1f0a:	ca 01       	movw	r24, r20
    1f0c:	81 70       	andi	r24, 0x01	; 1
    1f0e:	90 70       	andi	r25, 0x00	; 0
    1f10:	88 23       	and	r24, r24
    1f12:	19 f0       	breq	.+6      	; 0x1f1a <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	89 83       	std	Y+1, r24	; 0x01
    1f18:	49 c0       	rjmp	.+146    	; 0x1fac <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1f1a:	19 82       	std	Y+1, r1	; 0x01
    1f1c:	47 c0       	rjmp	.+142    	; 0x1fac <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1f1e:	e6 e3       	ldi	r30, 0x36	; 54
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	80 81       	ld	r24, Z
    1f24:	28 2f       	mov	r18, r24
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2a:	88 2f       	mov	r24, r24
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	a9 01       	movw	r20, r18
    1f30:	02 c0       	rjmp	.+4      	; 0x1f36 <GPIO_readPin+0xae>
    1f32:	55 95       	asr	r21
    1f34:	47 95       	ror	r20
    1f36:	8a 95       	dec	r24
    1f38:	e2 f7       	brpl	.-8      	; 0x1f32 <GPIO_readPin+0xaa>
    1f3a:	ca 01       	movw	r24, r20
    1f3c:	81 70       	andi	r24, 0x01	; 1
    1f3e:	90 70       	andi	r25, 0x00	; 0
    1f40:	88 23       	and	r24, r24
    1f42:	19 f0       	breq	.+6      	; 0x1f4a <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1f44:	81 e0       	ldi	r24, 0x01	; 1
    1f46:	89 83       	std	Y+1, r24	; 0x01
    1f48:	31 c0       	rjmp	.+98     	; 0x1fac <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1f4a:	19 82       	std	Y+1, r1	; 0x01
    1f4c:	2f c0       	rjmp	.+94     	; 0x1fac <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1f4e:	e3 e3       	ldi	r30, 0x33	; 51
    1f50:	f0 e0       	ldi	r31, 0x00	; 0
    1f52:	80 81       	ld	r24, Z
    1f54:	28 2f       	mov	r18, r24
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5a:	88 2f       	mov	r24, r24
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	a9 01       	movw	r20, r18
    1f60:	02 c0       	rjmp	.+4      	; 0x1f66 <GPIO_readPin+0xde>
    1f62:	55 95       	asr	r21
    1f64:	47 95       	ror	r20
    1f66:	8a 95       	dec	r24
    1f68:	e2 f7       	brpl	.-8      	; 0x1f62 <GPIO_readPin+0xda>
    1f6a:	ca 01       	movw	r24, r20
    1f6c:	81 70       	andi	r24, 0x01	; 1
    1f6e:	90 70       	andi	r25, 0x00	; 0
    1f70:	88 23       	and	r24, r24
    1f72:	19 f0       	breq	.+6      	; 0x1f7a <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1f74:	81 e0       	ldi	r24, 0x01	; 1
    1f76:	89 83       	std	Y+1, r24	; 0x01
    1f78:	19 c0       	rjmp	.+50     	; 0x1fac <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1f7a:	19 82       	std	Y+1, r1	; 0x01
    1f7c:	17 c0       	rjmp	.+46     	; 0x1fac <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1f7e:	e0 e3       	ldi	r30, 0x30	; 48
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	80 81       	ld	r24, Z
    1f84:	28 2f       	mov	r18, r24
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8a:	88 2f       	mov	r24, r24
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	a9 01       	movw	r20, r18
    1f90:	02 c0       	rjmp	.+4      	; 0x1f96 <GPIO_readPin+0x10e>
    1f92:	55 95       	asr	r21
    1f94:	47 95       	ror	r20
    1f96:	8a 95       	dec	r24
    1f98:	e2 f7       	brpl	.-8      	; 0x1f92 <GPIO_readPin+0x10a>
    1f9a:	ca 01       	movw	r24, r20
    1f9c:	81 70       	andi	r24, 0x01	; 1
    1f9e:	90 70       	andi	r25, 0x00	; 0
    1fa0:	88 23       	and	r24, r24
    1fa2:	19 f0       	breq	.+6      	; 0x1faa <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	89 83       	std	Y+1, r24	; 0x01
    1fa8:	01 c0       	rjmp	.+2      	; 0x1fac <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1faa:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1fac:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fae:	0f 90       	pop	r0
    1fb0:	0f 90       	pop	r0
    1fb2:	0f 90       	pop	r0
    1fb4:	0f 90       	pop	r0
    1fb6:	0f 90       	pop	r0
    1fb8:	cf 91       	pop	r28
    1fba:	df 91       	pop	r29
    1fbc:	08 95       	ret

00001fbe <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1fbe:	df 93       	push	r29
    1fc0:	cf 93       	push	r28
    1fc2:	00 d0       	rcall	.+0      	; 0x1fc4 <GPIO_setupPortDirection+0x6>
    1fc4:	00 d0       	rcall	.+0      	; 0x1fc6 <GPIO_setupPortDirection+0x8>
    1fc6:	cd b7       	in	r28, 0x3d	; 61
    1fc8:	de b7       	in	r29, 0x3e	; 62
    1fca:	89 83       	std	Y+1, r24	; 0x01
    1fcc:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1fce:	89 81       	ldd	r24, Y+1	; 0x01
    1fd0:	84 30       	cpi	r24, 0x04	; 4
    1fd2:	90 f5       	brcc	.+100    	; 0x2038 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1fd4:	89 81       	ldd	r24, Y+1	; 0x01
    1fd6:	28 2f       	mov	r18, r24
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	3c 83       	std	Y+4, r19	; 0x04
    1fdc:	2b 83       	std	Y+3, r18	; 0x03
    1fde:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe2:	81 30       	cpi	r24, 0x01	; 1
    1fe4:	91 05       	cpc	r25, r1
    1fe6:	d1 f0       	breq	.+52     	; 0x201c <GPIO_setupPortDirection+0x5e>
    1fe8:	2b 81       	ldd	r18, Y+3	; 0x03
    1fea:	3c 81       	ldd	r19, Y+4	; 0x04
    1fec:	22 30       	cpi	r18, 0x02	; 2
    1fee:	31 05       	cpc	r19, r1
    1ff0:	2c f4       	brge	.+10     	; 0x1ffc <GPIO_setupPortDirection+0x3e>
    1ff2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff6:	00 97       	sbiw	r24, 0x00	; 0
    1ff8:	61 f0       	breq	.+24     	; 0x2012 <GPIO_setupPortDirection+0x54>
    1ffa:	1e c0       	rjmp	.+60     	; 0x2038 <GPIO_setupPortDirection+0x7a>
    1ffc:	2b 81       	ldd	r18, Y+3	; 0x03
    1ffe:	3c 81       	ldd	r19, Y+4	; 0x04
    2000:	22 30       	cpi	r18, 0x02	; 2
    2002:	31 05       	cpc	r19, r1
    2004:	81 f0       	breq	.+32     	; 0x2026 <GPIO_setupPortDirection+0x68>
    2006:	8b 81       	ldd	r24, Y+3	; 0x03
    2008:	9c 81       	ldd	r25, Y+4	; 0x04
    200a:	83 30       	cpi	r24, 0x03	; 3
    200c:	91 05       	cpc	r25, r1
    200e:	81 f0       	breq	.+32     	; 0x2030 <GPIO_setupPortDirection+0x72>
    2010:	13 c0       	rjmp	.+38     	; 0x2038 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2012:	ea e3       	ldi	r30, 0x3A	; 58
    2014:	f0 e0       	ldi	r31, 0x00	; 0
    2016:	8a 81       	ldd	r24, Y+2	; 0x02
    2018:	80 83       	st	Z, r24
    201a:	0e c0       	rjmp	.+28     	; 0x2038 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    201c:	e7 e3       	ldi	r30, 0x37	; 55
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	8a 81       	ldd	r24, Y+2	; 0x02
    2022:	80 83       	st	Z, r24
    2024:	09 c0       	rjmp	.+18     	; 0x2038 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2026:	e4 e3       	ldi	r30, 0x34	; 52
    2028:	f0 e0       	ldi	r31, 0x00	; 0
    202a:	8a 81       	ldd	r24, Y+2	; 0x02
    202c:	80 83       	st	Z, r24
    202e:	04 c0       	rjmp	.+8      	; 0x2038 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2030:	e1 e3       	ldi	r30, 0x31	; 49
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	8a 81       	ldd	r24, Y+2	; 0x02
    2036:	80 83       	st	Z, r24
			break;
		}
	}
}
    2038:	0f 90       	pop	r0
    203a:	0f 90       	pop	r0
    203c:	0f 90       	pop	r0
    203e:	0f 90       	pop	r0
    2040:	cf 91       	pop	r28
    2042:	df 91       	pop	r29
    2044:	08 95       	ret

00002046 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2046:	df 93       	push	r29
    2048:	cf 93       	push	r28
    204a:	00 d0       	rcall	.+0      	; 0x204c <GPIO_writePort+0x6>
    204c:	00 d0       	rcall	.+0      	; 0x204e <GPIO_writePort+0x8>
    204e:	cd b7       	in	r28, 0x3d	; 61
    2050:	de b7       	in	r29, 0x3e	; 62
    2052:	89 83       	std	Y+1, r24	; 0x01
    2054:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2056:	89 81       	ldd	r24, Y+1	; 0x01
    2058:	84 30       	cpi	r24, 0x04	; 4
    205a:	90 f5       	brcc	.+100    	; 0x20c0 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    205c:	89 81       	ldd	r24, Y+1	; 0x01
    205e:	28 2f       	mov	r18, r24
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	3c 83       	std	Y+4, r19	; 0x04
    2064:	2b 83       	std	Y+3, r18	; 0x03
    2066:	8b 81       	ldd	r24, Y+3	; 0x03
    2068:	9c 81       	ldd	r25, Y+4	; 0x04
    206a:	81 30       	cpi	r24, 0x01	; 1
    206c:	91 05       	cpc	r25, r1
    206e:	d1 f0       	breq	.+52     	; 0x20a4 <GPIO_writePort+0x5e>
    2070:	2b 81       	ldd	r18, Y+3	; 0x03
    2072:	3c 81       	ldd	r19, Y+4	; 0x04
    2074:	22 30       	cpi	r18, 0x02	; 2
    2076:	31 05       	cpc	r19, r1
    2078:	2c f4       	brge	.+10     	; 0x2084 <GPIO_writePort+0x3e>
    207a:	8b 81       	ldd	r24, Y+3	; 0x03
    207c:	9c 81       	ldd	r25, Y+4	; 0x04
    207e:	00 97       	sbiw	r24, 0x00	; 0
    2080:	61 f0       	breq	.+24     	; 0x209a <GPIO_writePort+0x54>
    2082:	1e c0       	rjmp	.+60     	; 0x20c0 <GPIO_writePort+0x7a>
    2084:	2b 81       	ldd	r18, Y+3	; 0x03
    2086:	3c 81       	ldd	r19, Y+4	; 0x04
    2088:	22 30       	cpi	r18, 0x02	; 2
    208a:	31 05       	cpc	r19, r1
    208c:	81 f0       	breq	.+32     	; 0x20ae <GPIO_writePort+0x68>
    208e:	8b 81       	ldd	r24, Y+3	; 0x03
    2090:	9c 81       	ldd	r25, Y+4	; 0x04
    2092:	83 30       	cpi	r24, 0x03	; 3
    2094:	91 05       	cpc	r25, r1
    2096:	81 f0       	breq	.+32     	; 0x20b8 <GPIO_writePort+0x72>
    2098:	13 c0       	rjmp	.+38     	; 0x20c0 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    209a:	eb e3       	ldi	r30, 0x3B	; 59
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	8a 81       	ldd	r24, Y+2	; 0x02
    20a0:	80 83       	st	Z, r24
    20a2:	0e c0       	rjmp	.+28     	; 0x20c0 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    20a4:	e8 e3       	ldi	r30, 0x38	; 56
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	8a 81       	ldd	r24, Y+2	; 0x02
    20aa:	80 83       	st	Z, r24
    20ac:	09 c0       	rjmp	.+18     	; 0x20c0 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    20ae:	e5 e3       	ldi	r30, 0x35	; 53
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	8a 81       	ldd	r24, Y+2	; 0x02
    20b4:	80 83       	st	Z, r24
    20b6:	04 c0       	rjmp	.+8      	; 0x20c0 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    20b8:	e2 e3       	ldi	r30, 0x32	; 50
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	8a 81       	ldd	r24, Y+2	; 0x02
    20be:	80 83       	st	Z, r24
			break;
		}
	}
}
    20c0:	0f 90       	pop	r0
    20c2:	0f 90       	pop	r0
    20c4:	0f 90       	pop	r0
    20c6:	0f 90       	pop	r0
    20c8:	cf 91       	pop	r28
    20ca:	df 91       	pop	r29
    20cc:	08 95       	ret

000020ce <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    20ce:	df 93       	push	r29
    20d0:	cf 93       	push	r28
    20d2:	00 d0       	rcall	.+0      	; 0x20d4 <GPIO_readPort+0x6>
    20d4:	00 d0       	rcall	.+0      	; 0x20d6 <GPIO_readPort+0x8>
    20d6:	cd b7       	in	r28, 0x3d	; 61
    20d8:	de b7       	in	r29, 0x3e	; 62
    20da:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    20dc:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    20de:	8a 81       	ldd	r24, Y+2	; 0x02
    20e0:	84 30       	cpi	r24, 0x04	; 4
    20e2:	90 f5       	brcc	.+100    	; 0x2148 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    20e4:	8a 81       	ldd	r24, Y+2	; 0x02
    20e6:	28 2f       	mov	r18, r24
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	3c 83       	std	Y+4, r19	; 0x04
    20ec:	2b 83       	std	Y+3, r18	; 0x03
    20ee:	8b 81       	ldd	r24, Y+3	; 0x03
    20f0:	9c 81       	ldd	r25, Y+4	; 0x04
    20f2:	81 30       	cpi	r24, 0x01	; 1
    20f4:	91 05       	cpc	r25, r1
    20f6:	d1 f0       	breq	.+52     	; 0x212c <GPIO_readPort+0x5e>
    20f8:	2b 81       	ldd	r18, Y+3	; 0x03
    20fa:	3c 81       	ldd	r19, Y+4	; 0x04
    20fc:	22 30       	cpi	r18, 0x02	; 2
    20fe:	31 05       	cpc	r19, r1
    2100:	2c f4       	brge	.+10     	; 0x210c <GPIO_readPort+0x3e>
    2102:	8b 81       	ldd	r24, Y+3	; 0x03
    2104:	9c 81       	ldd	r25, Y+4	; 0x04
    2106:	00 97       	sbiw	r24, 0x00	; 0
    2108:	61 f0       	breq	.+24     	; 0x2122 <GPIO_readPort+0x54>
    210a:	1e c0       	rjmp	.+60     	; 0x2148 <GPIO_readPort+0x7a>
    210c:	2b 81       	ldd	r18, Y+3	; 0x03
    210e:	3c 81       	ldd	r19, Y+4	; 0x04
    2110:	22 30       	cpi	r18, 0x02	; 2
    2112:	31 05       	cpc	r19, r1
    2114:	81 f0       	breq	.+32     	; 0x2136 <GPIO_readPort+0x68>
    2116:	8b 81       	ldd	r24, Y+3	; 0x03
    2118:	9c 81       	ldd	r25, Y+4	; 0x04
    211a:	83 30       	cpi	r24, 0x03	; 3
    211c:	91 05       	cpc	r25, r1
    211e:	81 f0       	breq	.+32     	; 0x2140 <GPIO_readPort+0x72>
    2120:	13 c0       	rjmp	.+38     	; 0x2148 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2122:	e9 e3       	ldi	r30, 0x39	; 57
    2124:	f0 e0       	ldi	r31, 0x00	; 0
    2126:	80 81       	ld	r24, Z
    2128:	89 83       	std	Y+1, r24	; 0x01
    212a:	0e c0       	rjmp	.+28     	; 0x2148 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    212c:	e6 e3       	ldi	r30, 0x36	; 54
    212e:	f0 e0       	ldi	r31, 0x00	; 0
    2130:	80 81       	ld	r24, Z
    2132:	89 83       	std	Y+1, r24	; 0x01
    2134:	09 c0       	rjmp	.+18     	; 0x2148 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2136:	e3 e3       	ldi	r30, 0x33	; 51
    2138:	f0 e0       	ldi	r31, 0x00	; 0
    213a:	80 81       	ld	r24, Z
    213c:	89 83       	std	Y+1, r24	; 0x01
    213e:	04 c0       	rjmp	.+8      	; 0x2148 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2140:	e0 e3       	ldi	r30, 0x30	; 48
    2142:	f0 e0       	ldi	r31, 0x00	; 0
    2144:	80 81       	ld	r24, Z
    2146:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2148:	89 81       	ldd	r24, Y+1	; 0x01
}
    214a:	0f 90       	pop	r0
    214c:	0f 90       	pop	r0
    214e:	0f 90       	pop	r0
    2150:	0f 90       	pop	r0
    2152:	cf 91       	pop	r28
    2154:	df 91       	pop	r29
    2156:	08 95       	ret

00002158 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2158:	df 93       	push	r29
    215a:	cf 93       	push	r28
    215c:	cd b7       	in	r28, 0x3d	; 61
    215e:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2160:	80 e0       	ldi	r24, 0x00	; 0
    2162:	60 e0       	ldi	r22, 0x00	; 0
    2164:	41 e0       	ldi	r20, 0x01	; 1
    2166:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    216a:	80 e0       	ldi	r24, 0x00	; 0
    216c:	61 e0       	ldi	r22, 0x01	; 1
    216e:	41 e0       	ldi	r20, 0x01	; 1
    2170:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2174:	80 e0       	ldi	r24, 0x00	; 0
    2176:	62 e0       	ldi	r22, 0x02	; 2
    2178:	41 e0       	ldi	r20, 0x01	; 1
    217a:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    217e:	81 e0       	ldi	r24, 0x01	; 1
    2180:	6f ef       	ldi	r22, 0xFF	; 255
    2182:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    2186:	88 e3       	ldi	r24, 0x38	; 56
    2188:	0e 94 cf 10 	call	0x219e	; 0x219e <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    218c:	8c e0       	ldi	r24, 0x0C	; 12
    218e:	0e 94 cf 10 	call	0x219e	; 0x219e <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2192:	81 e0       	ldi	r24, 0x01	; 1
    2194:	0e 94 cf 10 	call	0x219e	; 0x219e <LCD_sendCommand>
}
    2198:	cf 91       	pop	r28
    219a:	df 91       	pop	r29
    219c:	08 95       	ret

0000219e <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    219e:	df 93       	push	r29
    21a0:	cf 93       	push	r28
    21a2:	cd b7       	in	r28, 0x3d	; 61
    21a4:	de b7       	in	r29, 0x3e	; 62
    21a6:	e9 97       	sbiw	r28, 0x39	; 57
    21a8:	0f b6       	in	r0, 0x3f	; 63
    21aa:	f8 94       	cli
    21ac:	de bf       	out	0x3e, r29	; 62
    21ae:	0f be       	out	0x3f, r0	; 63
    21b0:	cd bf       	out	0x3d, r28	; 61
    21b2:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    21b4:	80 e0       	ldi	r24, 0x00	; 0
    21b6:	60 e0       	ldi	r22, 0x00	; 0
    21b8:	40 e0       	ldi	r20, 0x00	; 0
    21ba:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    21be:	80 e0       	ldi	r24, 0x00	; 0
    21c0:	61 e0       	ldi	r22, 0x01	; 1
    21c2:	40 e0       	ldi	r20, 0x00	; 0
    21c4:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <GPIO_writePin>
    21c8:	80 e0       	ldi	r24, 0x00	; 0
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	a0 e8       	ldi	r26, 0x80	; 128
    21ce:	bf e3       	ldi	r27, 0x3F	; 63
    21d0:	8d ab       	std	Y+53, r24	; 0x35
    21d2:	9e ab       	std	Y+54, r25	; 0x36
    21d4:	af ab       	std	Y+55, r26	; 0x37
    21d6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21d8:	6d a9       	ldd	r22, Y+53	; 0x35
    21da:	7e a9       	ldd	r23, Y+54	; 0x36
    21dc:	8f a9       	ldd	r24, Y+55	; 0x37
    21de:	98 ad       	ldd	r25, Y+56	; 0x38
    21e0:	20 e0       	ldi	r18, 0x00	; 0
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	4a e7       	ldi	r20, 0x7A	; 122
    21e6:	53 e4       	ldi	r21, 0x43	; 67
    21e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ec:	dc 01       	movw	r26, r24
    21ee:	cb 01       	movw	r24, r22
    21f0:	89 ab       	std	Y+49, r24	; 0x31
    21f2:	9a ab       	std	Y+50, r25	; 0x32
    21f4:	ab ab       	std	Y+51, r26	; 0x33
    21f6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    21f8:	69 a9       	ldd	r22, Y+49	; 0x31
    21fa:	7a a9       	ldd	r23, Y+50	; 0x32
    21fc:	8b a9       	ldd	r24, Y+51	; 0x33
    21fe:	9c a9       	ldd	r25, Y+52	; 0x34
    2200:	20 e0       	ldi	r18, 0x00	; 0
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	40 e8       	ldi	r20, 0x80	; 128
    2206:	5f e3       	ldi	r21, 0x3F	; 63
    2208:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    220c:	88 23       	and	r24, r24
    220e:	2c f4       	brge	.+10     	; 0x221a <LCD_sendCommand+0x7c>
		__ticks = 1;
    2210:	81 e0       	ldi	r24, 0x01	; 1
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	98 ab       	std	Y+48, r25	; 0x30
    2216:	8f a7       	std	Y+47, r24	; 0x2f
    2218:	3f c0       	rjmp	.+126    	; 0x2298 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    221a:	69 a9       	ldd	r22, Y+49	; 0x31
    221c:	7a a9       	ldd	r23, Y+50	; 0x32
    221e:	8b a9       	ldd	r24, Y+51	; 0x33
    2220:	9c a9       	ldd	r25, Y+52	; 0x34
    2222:	20 e0       	ldi	r18, 0x00	; 0
    2224:	3f ef       	ldi	r19, 0xFF	; 255
    2226:	4f e7       	ldi	r20, 0x7F	; 127
    2228:	57 e4       	ldi	r21, 0x47	; 71
    222a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    222e:	18 16       	cp	r1, r24
    2230:	4c f5       	brge	.+82     	; 0x2284 <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2232:	6d a9       	ldd	r22, Y+53	; 0x35
    2234:	7e a9       	ldd	r23, Y+54	; 0x36
    2236:	8f a9       	ldd	r24, Y+55	; 0x37
    2238:	98 ad       	ldd	r25, Y+56	; 0x38
    223a:	20 e0       	ldi	r18, 0x00	; 0
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	40 e2       	ldi	r20, 0x20	; 32
    2240:	51 e4       	ldi	r21, 0x41	; 65
    2242:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2246:	dc 01       	movw	r26, r24
    2248:	cb 01       	movw	r24, r22
    224a:	bc 01       	movw	r22, r24
    224c:	cd 01       	movw	r24, r26
    224e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2252:	dc 01       	movw	r26, r24
    2254:	cb 01       	movw	r24, r22
    2256:	98 ab       	std	Y+48, r25	; 0x30
    2258:	8f a7       	std	Y+47, r24	; 0x2f
    225a:	0f c0       	rjmp	.+30     	; 0x227a <LCD_sendCommand+0xdc>
    225c:	89 e1       	ldi	r24, 0x19	; 25
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	9e a7       	std	Y+46, r25	; 0x2e
    2262:	8d a7       	std	Y+45, r24	; 0x2d
    2264:	8d a5       	ldd	r24, Y+45	; 0x2d
    2266:	9e a5       	ldd	r25, Y+46	; 0x2e
    2268:	01 97       	sbiw	r24, 0x01	; 1
    226a:	f1 f7       	brne	.-4      	; 0x2268 <LCD_sendCommand+0xca>
    226c:	9e a7       	std	Y+46, r25	; 0x2e
    226e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2270:	8f a5       	ldd	r24, Y+47	; 0x2f
    2272:	98 a9       	ldd	r25, Y+48	; 0x30
    2274:	01 97       	sbiw	r24, 0x01	; 1
    2276:	98 ab       	std	Y+48, r25	; 0x30
    2278:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    227a:	8f a5       	ldd	r24, Y+47	; 0x2f
    227c:	98 a9       	ldd	r25, Y+48	; 0x30
    227e:	00 97       	sbiw	r24, 0x00	; 0
    2280:	69 f7       	brne	.-38     	; 0x225c <LCD_sendCommand+0xbe>
    2282:	14 c0       	rjmp	.+40     	; 0x22ac <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2284:	69 a9       	ldd	r22, Y+49	; 0x31
    2286:	7a a9       	ldd	r23, Y+50	; 0x32
    2288:	8b a9       	ldd	r24, Y+51	; 0x33
    228a:	9c a9       	ldd	r25, Y+52	; 0x34
    228c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2290:	dc 01       	movw	r26, r24
    2292:	cb 01       	movw	r24, r22
    2294:	98 ab       	std	Y+48, r25	; 0x30
    2296:	8f a7       	std	Y+47, r24	; 0x2f
    2298:	8f a5       	ldd	r24, Y+47	; 0x2f
    229a:	98 a9       	ldd	r25, Y+48	; 0x30
    229c:	9c a7       	std	Y+44, r25	; 0x2c
    229e:	8b a7       	std	Y+43, r24	; 0x2b
    22a0:	8b a5       	ldd	r24, Y+43	; 0x2b
    22a2:	9c a5       	ldd	r25, Y+44	; 0x2c
    22a4:	01 97       	sbiw	r24, 0x01	; 1
    22a6:	f1 f7       	brne	.-4      	; 0x22a4 <LCD_sendCommand+0x106>
    22a8:	9c a7       	std	Y+44, r25	; 0x2c
    22aa:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    22ac:	80 e0       	ldi	r24, 0x00	; 0
    22ae:	62 e0       	ldi	r22, 0x02	; 2
    22b0:	41 e0       	ldi	r20, 0x01	; 1
    22b2:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <GPIO_writePin>
    22b6:	80 e0       	ldi	r24, 0x00	; 0
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	a0 e8       	ldi	r26, 0x80	; 128
    22bc:	bf e3       	ldi	r27, 0x3F	; 63
    22be:	8f a3       	std	Y+39, r24	; 0x27
    22c0:	98 a7       	std	Y+40, r25	; 0x28
    22c2:	a9 a7       	std	Y+41, r26	; 0x29
    22c4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22c6:	6f a1       	ldd	r22, Y+39	; 0x27
    22c8:	78 a5       	ldd	r23, Y+40	; 0x28
    22ca:	89 a5       	ldd	r24, Y+41	; 0x29
    22cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    22ce:	20 e0       	ldi	r18, 0x00	; 0
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	4a e7       	ldi	r20, 0x7A	; 122
    22d4:	53 e4       	ldi	r21, 0x43	; 67
    22d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22da:	dc 01       	movw	r26, r24
    22dc:	cb 01       	movw	r24, r22
    22de:	8b a3       	std	Y+35, r24	; 0x23
    22e0:	9c a3       	std	Y+36, r25	; 0x24
    22e2:	ad a3       	std	Y+37, r26	; 0x25
    22e4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22e6:	6b a1       	ldd	r22, Y+35	; 0x23
    22e8:	7c a1       	ldd	r23, Y+36	; 0x24
    22ea:	8d a1       	ldd	r24, Y+37	; 0x25
    22ec:	9e a1       	ldd	r25, Y+38	; 0x26
    22ee:	20 e0       	ldi	r18, 0x00	; 0
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	40 e8       	ldi	r20, 0x80	; 128
    22f4:	5f e3       	ldi	r21, 0x3F	; 63
    22f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22fa:	88 23       	and	r24, r24
    22fc:	2c f4       	brge	.+10     	; 0x2308 <LCD_sendCommand+0x16a>
		__ticks = 1;
    22fe:	81 e0       	ldi	r24, 0x01	; 1
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	9a a3       	std	Y+34, r25	; 0x22
    2304:	89 a3       	std	Y+33, r24	; 0x21
    2306:	3f c0       	rjmp	.+126    	; 0x2386 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    2308:	6b a1       	ldd	r22, Y+35	; 0x23
    230a:	7c a1       	ldd	r23, Y+36	; 0x24
    230c:	8d a1       	ldd	r24, Y+37	; 0x25
    230e:	9e a1       	ldd	r25, Y+38	; 0x26
    2310:	20 e0       	ldi	r18, 0x00	; 0
    2312:	3f ef       	ldi	r19, 0xFF	; 255
    2314:	4f e7       	ldi	r20, 0x7F	; 127
    2316:	57 e4       	ldi	r21, 0x47	; 71
    2318:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    231c:	18 16       	cp	r1, r24
    231e:	4c f5       	brge	.+82     	; 0x2372 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2320:	6f a1       	ldd	r22, Y+39	; 0x27
    2322:	78 a5       	ldd	r23, Y+40	; 0x28
    2324:	89 a5       	ldd	r24, Y+41	; 0x29
    2326:	9a a5       	ldd	r25, Y+42	; 0x2a
    2328:	20 e0       	ldi	r18, 0x00	; 0
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	40 e2       	ldi	r20, 0x20	; 32
    232e:	51 e4       	ldi	r21, 0x41	; 65
    2330:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2334:	dc 01       	movw	r26, r24
    2336:	cb 01       	movw	r24, r22
    2338:	bc 01       	movw	r22, r24
    233a:	cd 01       	movw	r24, r26
    233c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2340:	dc 01       	movw	r26, r24
    2342:	cb 01       	movw	r24, r22
    2344:	9a a3       	std	Y+34, r25	; 0x22
    2346:	89 a3       	std	Y+33, r24	; 0x21
    2348:	0f c0       	rjmp	.+30     	; 0x2368 <LCD_sendCommand+0x1ca>
    234a:	89 e1       	ldi	r24, 0x19	; 25
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	98 a3       	std	Y+32, r25	; 0x20
    2350:	8f 8f       	std	Y+31, r24	; 0x1f
    2352:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2354:	98 a1       	ldd	r25, Y+32	; 0x20
    2356:	01 97       	sbiw	r24, 0x01	; 1
    2358:	f1 f7       	brne	.-4      	; 0x2356 <LCD_sendCommand+0x1b8>
    235a:	98 a3       	std	Y+32, r25	; 0x20
    235c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    235e:	89 a1       	ldd	r24, Y+33	; 0x21
    2360:	9a a1       	ldd	r25, Y+34	; 0x22
    2362:	01 97       	sbiw	r24, 0x01	; 1
    2364:	9a a3       	std	Y+34, r25	; 0x22
    2366:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2368:	89 a1       	ldd	r24, Y+33	; 0x21
    236a:	9a a1       	ldd	r25, Y+34	; 0x22
    236c:	00 97       	sbiw	r24, 0x00	; 0
    236e:	69 f7       	brne	.-38     	; 0x234a <LCD_sendCommand+0x1ac>
    2370:	14 c0       	rjmp	.+40     	; 0x239a <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2372:	6b a1       	ldd	r22, Y+35	; 0x23
    2374:	7c a1       	ldd	r23, Y+36	; 0x24
    2376:	8d a1       	ldd	r24, Y+37	; 0x25
    2378:	9e a1       	ldd	r25, Y+38	; 0x26
    237a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    237e:	dc 01       	movw	r26, r24
    2380:	cb 01       	movw	r24, r22
    2382:	9a a3       	std	Y+34, r25	; 0x22
    2384:	89 a3       	std	Y+33, r24	; 0x21
    2386:	89 a1       	ldd	r24, Y+33	; 0x21
    2388:	9a a1       	ldd	r25, Y+34	; 0x22
    238a:	9e 8f       	std	Y+30, r25	; 0x1e
    238c:	8d 8f       	std	Y+29, r24	; 0x1d
    238e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2390:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2392:	01 97       	sbiw	r24, 0x01	; 1
    2394:	f1 f7       	brne	.-4      	; 0x2392 <LCD_sendCommand+0x1f4>
    2396:	9e 8f       	std	Y+30, r25	; 0x1e
    2398:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    239a:	81 e0       	ldi	r24, 0x01	; 1
    239c:	69 ad       	ldd	r22, Y+57	; 0x39
    239e:	0e 94 23 10 	call	0x2046	; 0x2046 <GPIO_writePort>
    23a2:	80 e0       	ldi	r24, 0x00	; 0
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	a0 e8       	ldi	r26, 0x80	; 128
    23a8:	bf e3       	ldi	r27, 0x3F	; 63
    23aa:	89 8f       	std	Y+25, r24	; 0x19
    23ac:	9a 8f       	std	Y+26, r25	; 0x1a
    23ae:	ab 8f       	std	Y+27, r26	; 0x1b
    23b0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23b2:	69 8d       	ldd	r22, Y+25	; 0x19
    23b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23ba:	20 e0       	ldi	r18, 0x00	; 0
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	4a e7       	ldi	r20, 0x7A	; 122
    23c0:	53 e4       	ldi	r21, 0x43	; 67
    23c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c6:	dc 01       	movw	r26, r24
    23c8:	cb 01       	movw	r24, r22
    23ca:	8d 8b       	std	Y+21, r24	; 0x15
    23cc:	9e 8b       	std	Y+22, r25	; 0x16
    23ce:	af 8b       	std	Y+23, r26	; 0x17
    23d0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23d2:	6d 89       	ldd	r22, Y+21	; 0x15
    23d4:	7e 89       	ldd	r23, Y+22	; 0x16
    23d6:	8f 89       	ldd	r24, Y+23	; 0x17
    23d8:	98 8d       	ldd	r25, Y+24	; 0x18
    23da:	20 e0       	ldi	r18, 0x00	; 0
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	40 e8       	ldi	r20, 0x80	; 128
    23e0:	5f e3       	ldi	r21, 0x3F	; 63
    23e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23e6:	88 23       	and	r24, r24
    23e8:	2c f4       	brge	.+10     	; 0x23f4 <LCD_sendCommand+0x256>
		__ticks = 1;
    23ea:	81 e0       	ldi	r24, 0x01	; 1
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	9c 8b       	std	Y+20, r25	; 0x14
    23f0:	8b 8b       	std	Y+19, r24	; 0x13
    23f2:	3f c0       	rjmp	.+126    	; 0x2472 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    23f4:	6d 89       	ldd	r22, Y+21	; 0x15
    23f6:	7e 89       	ldd	r23, Y+22	; 0x16
    23f8:	8f 89       	ldd	r24, Y+23	; 0x17
    23fa:	98 8d       	ldd	r25, Y+24	; 0x18
    23fc:	20 e0       	ldi	r18, 0x00	; 0
    23fe:	3f ef       	ldi	r19, 0xFF	; 255
    2400:	4f e7       	ldi	r20, 0x7F	; 127
    2402:	57 e4       	ldi	r21, 0x47	; 71
    2404:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2408:	18 16       	cp	r1, r24
    240a:	4c f5       	brge	.+82     	; 0x245e <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    240c:	69 8d       	ldd	r22, Y+25	; 0x19
    240e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2410:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2412:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2414:	20 e0       	ldi	r18, 0x00	; 0
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	40 e2       	ldi	r20, 0x20	; 32
    241a:	51 e4       	ldi	r21, 0x41	; 65
    241c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2420:	dc 01       	movw	r26, r24
    2422:	cb 01       	movw	r24, r22
    2424:	bc 01       	movw	r22, r24
    2426:	cd 01       	movw	r24, r26
    2428:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    242c:	dc 01       	movw	r26, r24
    242e:	cb 01       	movw	r24, r22
    2430:	9c 8b       	std	Y+20, r25	; 0x14
    2432:	8b 8b       	std	Y+19, r24	; 0x13
    2434:	0f c0       	rjmp	.+30     	; 0x2454 <LCD_sendCommand+0x2b6>
    2436:	89 e1       	ldi	r24, 0x19	; 25
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	9a 8b       	std	Y+18, r25	; 0x12
    243c:	89 8b       	std	Y+17, r24	; 0x11
    243e:	89 89       	ldd	r24, Y+17	; 0x11
    2440:	9a 89       	ldd	r25, Y+18	; 0x12
    2442:	01 97       	sbiw	r24, 0x01	; 1
    2444:	f1 f7       	brne	.-4      	; 0x2442 <LCD_sendCommand+0x2a4>
    2446:	9a 8b       	std	Y+18, r25	; 0x12
    2448:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    244a:	8b 89       	ldd	r24, Y+19	; 0x13
    244c:	9c 89       	ldd	r25, Y+20	; 0x14
    244e:	01 97       	sbiw	r24, 0x01	; 1
    2450:	9c 8b       	std	Y+20, r25	; 0x14
    2452:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2454:	8b 89       	ldd	r24, Y+19	; 0x13
    2456:	9c 89       	ldd	r25, Y+20	; 0x14
    2458:	00 97       	sbiw	r24, 0x00	; 0
    245a:	69 f7       	brne	.-38     	; 0x2436 <LCD_sendCommand+0x298>
    245c:	14 c0       	rjmp	.+40     	; 0x2486 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    245e:	6d 89       	ldd	r22, Y+21	; 0x15
    2460:	7e 89       	ldd	r23, Y+22	; 0x16
    2462:	8f 89       	ldd	r24, Y+23	; 0x17
    2464:	98 8d       	ldd	r25, Y+24	; 0x18
    2466:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    246a:	dc 01       	movw	r26, r24
    246c:	cb 01       	movw	r24, r22
    246e:	9c 8b       	std	Y+20, r25	; 0x14
    2470:	8b 8b       	std	Y+19, r24	; 0x13
    2472:	8b 89       	ldd	r24, Y+19	; 0x13
    2474:	9c 89       	ldd	r25, Y+20	; 0x14
    2476:	98 8b       	std	Y+16, r25	; 0x10
    2478:	8f 87       	std	Y+15, r24	; 0x0f
    247a:	8f 85       	ldd	r24, Y+15	; 0x0f
    247c:	98 89       	ldd	r25, Y+16	; 0x10
    247e:	01 97       	sbiw	r24, 0x01	; 1
    2480:	f1 f7       	brne	.-4      	; 0x247e <LCD_sendCommand+0x2e0>
    2482:	98 8b       	std	Y+16, r25	; 0x10
    2484:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2486:	80 e0       	ldi	r24, 0x00	; 0
    2488:	62 e0       	ldi	r22, 0x02	; 2
    248a:	40 e0       	ldi	r20, 0x00	; 0
    248c:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <GPIO_writePin>
    2490:	80 e0       	ldi	r24, 0x00	; 0
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	a0 e8       	ldi	r26, 0x80	; 128
    2496:	bf e3       	ldi	r27, 0x3F	; 63
    2498:	8b 87       	std	Y+11, r24	; 0x0b
    249a:	9c 87       	std	Y+12, r25	; 0x0c
    249c:	ad 87       	std	Y+13, r26	; 0x0d
    249e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    24a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    24a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    24a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	4a e7       	ldi	r20, 0x7A	; 122
    24ae:	53 e4       	ldi	r21, 0x43	; 67
    24b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b4:	dc 01       	movw	r26, r24
    24b6:	cb 01       	movw	r24, r22
    24b8:	8f 83       	std	Y+7, r24	; 0x07
    24ba:	98 87       	std	Y+8, r25	; 0x08
    24bc:	a9 87       	std	Y+9, r26	; 0x09
    24be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24c0:	6f 81       	ldd	r22, Y+7	; 0x07
    24c2:	78 85       	ldd	r23, Y+8	; 0x08
    24c4:	89 85       	ldd	r24, Y+9	; 0x09
    24c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24c8:	20 e0       	ldi	r18, 0x00	; 0
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	40 e8       	ldi	r20, 0x80	; 128
    24ce:	5f e3       	ldi	r21, 0x3F	; 63
    24d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24d4:	88 23       	and	r24, r24
    24d6:	2c f4       	brge	.+10     	; 0x24e2 <LCD_sendCommand+0x344>
		__ticks = 1;
    24d8:	81 e0       	ldi	r24, 0x01	; 1
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	9e 83       	std	Y+6, r25	; 0x06
    24de:	8d 83       	std	Y+5, r24	; 0x05
    24e0:	3f c0       	rjmp	.+126    	; 0x2560 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    24e2:	6f 81       	ldd	r22, Y+7	; 0x07
    24e4:	78 85       	ldd	r23, Y+8	; 0x08
    24e6:	89 85       	ldd	r24, Y+9	; 0x09
    24e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ea:	20 e0       	ldi	r18, 0x00	; 0
    24ec:	3f ef       	ldi	r19, 0xFF	; 255
    24ee:	4f e7       	ldi	r20, 0x7F	; 127
    24f0:	57 e4       	ldi	r21, 0x47	; 71
    24f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24f6:	18 16       	cp	r1, r24
    24f8:	4c f5       	brge	.+82     	; 0x254c <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    24fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    24fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2500:	9e 85       	ldd	r25, Y+14	; 0x0e
    2502:	20 e0       	ldi	r18, 0x00	; 0
    2504:	30 e0       	ldi	r19, 0x00	; 0
    2506:	40 e2       	ldi	r20, 0x20	; 32
    2508:	51 e4       	ldi	r21, 0x41	; 65
    250a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    250e:	dc 01       	movw	r26, r24
    2510:	cb 01       	movw	r24, r22
    2512:	bc 01       	movw	r22, r24
    2514:	cd 01       	movw	r24, r26
    2516:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    251a:	dc 01       	movw	r26, r24
    251c:	cb 01       	movw	r24, r22
    251e:	9e 83       	std	Y+6, r25	; 0x06
    2520:	8d 83       	std	Y+5, r24	; 0x05
    2522:	0f c0       	rjmp	.+30     	; 0x2542 <LCD_sendCommand+0x3a4>
    2524:	89 e1       	ldi	r24, 0x19	; 25
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	9c 83       	std	Y+4, r25	; 0x04
    252a:	8b 83       	std	Y+3, r24	; 0x03
    252c:	8b 81       	ldd	r24, Y+3	; 0x03
    252e:	9c 81       	ldd	r25, Y+4	; 0x04
    2530:	01 97       	sbiw	r24, 0x01	; 1
    2532:	f1 f7       	brne	.-4      	; 0x2530 <LCD_sendCommand+0x392>
    2534:	9c 83       	std	Y+4, r25	; 0x04
    2536:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2538:	8d 81       	ldd	r24, Y+5	; 0x05
    253a:	9e 81       	ldd	r25, Y+6	; 0x06
    253c:	01 97       	sbiw	r24, 0x01	; 1
    253e:	9e 83       	std	Y+6, r25	; 0x06
    2540:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2542:	8d 81       	ldd	r24, Y+5	; 0x05
    2544:	9e 81       	ldd	r25, Y+6	; 0x06
    2546:	00 97       	sbiw	r24, 0x00	; 0
    2548:	69 f7       	brne	.-38     	; 0x2524 <LCD_sendCommand+0x386>
    254a:	14 c0       	rjmp	.+40     	; 0x2574 <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    254c:	6f 81       	ldd	r22, Y+7	; 0x07
    254e:	78 85       	ldd	r23, Y+8	; 0x08
    2550:	89 85       	ldd	r24, Y+9	; 0x09
    2552:	9a 85       	ldd	r25, Y+10	; 0x0a
    2554:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2558:	dc 01       	movw	r26, r24
    255a:	cb 01       	movw	r24, r22
    255c:	9e 83       	std	Y+6, r25	; 0x06
    255e:	8d 83       	std	Y+5, r24	; 0x05
    2560:	8d 81       	ldd	r24, Y+5	; 0x05
    2562:	9e 81       	ldd	r25, Y+6	; 0x06
    2564:	9a 83       	std	Y+2, r25	; 0x02
    2566:	89 83       	std	Y+1, r24	; 0x01
    2568:	89 81       	ldd	r24, Y+1	; 0x01
    256a:	9a 81       	ldd	r25, Y+2	; 0x02
    256c:	01 97       	sbiw	r24, 0x01	; 1
    256e:	f1 f7       	brne	.-4      	; 0x256c <LCD_sendCommand+0x3ce>
    2570:	9a 83       	std	Y+2, r25	; 0x02
    2572:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2574:	e9 96       	adiw	r28, 0x39	; 57
    2576:	0f b6       	in	r0, 0x3f	; 63
    2578:	f8 94       	cli
    257a:	de bf       	out	0x3e, r29	; 62
    257c:	0f be       	out	0x3f, r0	; 63
    257e:	cd bf       	out	0x3d, r28	; 61
    2580:	cf 91       	pop	r28
    2582:	df 91       	pop	r29
    2584:	08 95       	ret

00002586 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2586:	df 93       	push	r29
    2588:	cf 93       	push	r28
    258a:	cd b7       	in	r28, 0x3d	; 61
    258c:	de b7       	in	r29, 0x3e	; 62
    258e:	e9 97       	sbiw	r28, 0x39	; 57
    2590:	0f b6       	in	r0, 0x3f	; 63
    2592:	f8 94       	cli
    2594:	de bf       	out	0x3e, r29	; 62
    2596:	0f be       	out	0x3f, r0	; 63
    2598:	cd bf       	out	0x3d, r28	; 61
    259a:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    259c:	80 e0       	ldi	r24, 0x00	; 0
    259e:	60 e0       	ldi	r22, 0x00	; 0
    25a0:	41 e0       	ldi	r20, 0x01	; 1
    25a2:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    25a6:	80 e0       	ldi	r24, 0x00	; 0
    25a8:	61 e0       	ldi	r22, 0x01	; 1
    25aa:	40 e0       	ldi	r20, 0x00	; 0
    25ac:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <GPIO_writePin>
    25b0:	80 e0       	ldi	r24, 0x00	; 0
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	a0 e8       	ldi	r26, 0x80	; 128
    25b6:	bf e3       	ldi	r27, 0x3F	; 63
    25b8:	8d ab       	std	Y+53, r24	; 0x35
    25ba:	9e ab       	std	Y+54, r25	; 0x36
    25bc:	af ab       	std	Y+55, r26	; 0x37
    25be:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25c0:	6d a9       	ldd	r22, Y+53	; 0x35
    25c2:	7e a9       	ldd	r23, Y+54	; 0x36
    25c4:	8f a9       	ldd	r24, Y+55	; 0x37
    25c6:	98 ad       	ldd	r25, Y+56	; 0x38
    25c8:	20 e0       	ldi	r18, 0x00	; 0
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	4a e7       	ldi	r20, 0x7A	; 122
    25ce:	53 e4       	ldi	r21, 0x43	; 67
    25d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d4:	dc 01       	movw	r26, r24
    25d6:	cb 01       	movw	r24, r22
    25d8:	89 ab       	std	Y+49, r24	; 0x31
    25da:	9a ab       	std	Y+50, r25	; 0x32
    25dc:	ab ab       	std	Y+51, r26	; 0x33
    25de:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    25e0:	69 a9       	ldd	r22, Y+49	; 0x31
    25e2:	7a a9       	ldd	r23, Y+50	; 0x32
    25e4:	8b a9       	ldd	r24, Y+51	; 0x33
    25e6:	9c a9       	ldd	r25, Y+52	; 0x34
    25e8:	20 e0       	ldi	r18, 0x00	; 0
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	40 e8       	ldi	r20, 0x80	; 128
    25ee:	5f e3       	ldi	r21, 0x3F	; 63
    25f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25f4:	88 23       	and	r24, r24
    25f6:	2c f4       	brge	.+10     	; 0x2602 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    25f8:	81 e0       	ldi	r24, 0x01	; 1
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	98 ab       	std	Y+48, r25	; 0x30
    25fe:	8f a7       	std	Y+47, r24	; 0x2f
    2600:	3f c0       	rjmp	.+126    	; 0x2680 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    2602:	69 a9       	ldd	r22, Y+49	; 0x31
    2604:	7a a9       	ldd	r23, Y+50	; 0x32
    2606:	8b a9       	ldd	r24, Y+51	; 0x33
    2608:	9c a9       	ldd	r25, Y+52	; 0x34
    260a:	20 e0       	ldi	r18, 0x00	; 0
    260c:	3f ef       	ldi	r19, 0xFF	; 255
    260e:	4f e7       	ldi	r20, 0x7F	; 127
    2610:	57 e4       	ldi	r21, 0x47	; 71
    2612:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2616:	18 16       	cp	r1, r24
    2618:	4c f5       	brge	.+82     	; 0x266c <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    261a:	6d a9       	ldd	r22, Y+53	; 0x35
    261c:	7e a9       	ldd	r23, Y+54	; 0x36
    261e:	8f a9       	ldd	r24, Y+55	; 0x37
    2620:	98 ad       	ldd	r25, Y+56	; 0x38
    2622:	20 e0       	ldi	r18, 0x00	; 0
    2624:	30 e0       	ldi	r19, 0x00	; 0
    2626:	40 e2       	ldi	r20, 0x20	; 32
    2628:	51 e4       	ldi	r21, 0x41	; 65
    262a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    262e:	dc 01       	movw	r26, r24
    2630:	cb 01       	movw	r24, r22
    2632:	bc 01       	movw	r22, r24
    2634:	cd 01       	movw	r24, r26
    2636:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    263a:	dc 01       	movw	r26, r24
    263c:	cb 01       	movw	r24, r22
    263e:	98 ab       	std	Y+48, r25	; 0x30
    2640:	8f a7       	std	Y+47, r24	; 0x2f
    2642:	0f c0       	rjmp	.+30     	; 0x2662 <LCD_displayCharacter+0xdc>
    2644:	89 e1       	ldi	r24, 0x19	; 25
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	9e a7       	std	Y+46, r25	; 0x2e
    264a:	8d a7       	std	Y+45, r24	; 0x2d
    264c:	8d a5       	ldd	r24, Y+45	; 0x2d
    264e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2650:	01 97       	sbiw	r24, 0x01	; 1
    2652:	f1 f7       	brne	.-4      	; 0x2650 <LCD_displayCharacter+0xca>
    2654:	9e a7       	std	Y+46, r25	; 0x2e
    2656:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2658:	8f a5       	ldd	r24, Y+47	; 0x2f
    265a:	98 a9       	ldd	r25, Y+48	; 0x30
    265c:	01 97       	sbiw	r24, 0x01	; 1
    265e:	98 ab       	std	Y+48, r25	; 0x30
    2660:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2662:	8f a5       	ldd	r24, Y+47	; 0x2f
    2664:	98 a9       	ldd	r25, Y+48	; 0x30
    2666:	00 97       	sbiw	r24, 0x00	; 0
    2668:	69 f7       	brne	.-38     	; 0x2644 <LCD_displayCharacter+0xbe>
    266a:	14 c0       	rjmp	.+40     	; 0x2694 <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    266c:	69 a9       	ldd	r22, Y+49	; 0x31
    266e:	7a a9       	ldd	r23, Y+50	; 0x32
    2670:	8b a9       	ldd	r24, Y+51	; 0x33
    2672:	9c a9       	ldd	r25, Y+52	; 0x34
    2674:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2678:	dc 01       	movw	r26, r24
    267a:	cb 01       	movw	r24, r22
    267c:	98 ab       	std	Y+48, r25	; 0x30
    267e:	8f a7       	std	Y+47, r24	; 0x2f
    2680:	8f a5       	ldd	r24, Y+47	; 0x2f
    2682:	98 a9       	ldd	r25, Y+48	; 0x30
    2684:	9c a7       	std	Y+44, r25	; 0x2c
    2686:	8b a7       	std	Y+43, r24	; 0x2b
    2688:	8b a5       	ldd	r24, Y+43	; 0x2b
    268a:	9c a5       	ldd	r25, Y+44	; 0x2c
    268c:	01 97       	sbiw	r24, 0x01	; 1
    268e:	f1 f7       	brne	.-4      	; 0x268c <LCD_displayCharacter+0x106>
    2690:	9c a7       	std	Y+44, r25	; 0x2c
    2692:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2694:	80 e0       	ldi	r24, 0x00	; 0
    2696:	62 e0       	ldi	r22, 0x02	; 2
    2698:	41 e0       	ldi	r20, 0x01	; 1
    269a:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <GPIO_writePin>
    269e:	80 e0       	ldi	r24, 0x00	; 0
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	a0 e8       	ldi	r26, 0x80	; 128
    26a4:	bf e3       	ldi	r27, 0x3F	; 63
    26a6:	8f a3       	std	Y+39, r24	; 0x27
    26a8:	98 a7       	std	Y+40, r25	; 0x28
    26aa:	a9 a7       	std	Y+41, r26	; 0x29
    26ac:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26ae:	6f a1       	ldd	r22, Y+39	; 0x27
    26b0:	78 a5       	ldd	r23, Y+40	; 0x28
    26b2:	89 a5       	ldd	r24, Y+41	; 0x29
    26b4:	9a a5       	ldd	r25, Y+42	; 0x2a
    26b6:	20 e0       	ldi	r18, 0x00	; 0
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	4a e7       	ldi	r20, 0x7A	; 122
    26bc:	53 e4       	ldi	r21, 0x43	; 67
    26be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26c2:	dc 01       	movw	r26, r24
    26c4:	cb 01       	movw	r24, r22
    26c6:	8b a3       	std	Y+35, r24	; 0x23
    26c8:	9c a3       	std	Y+36, r25	; 0x24
    26ca:	ad a3       	std	Y+37, r26	; 0x25
    26cc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    26ce:	6b a1       	ldd	r22, Y+35	; 0x23
    26d0:	7c a1       	ldd	r23, Y+36	; 0x24
    26d2:	8d a1       	ldd	r24, Y+37	; 0x25
    26d4:	9e a1       	ldd	r25, Y+38	; 0x26
    26d6:	20 e0       	ldi	r18, 0x00	; 0
    26d8:	30 e0       	ldi	r19, 0x00	; 0
    26da:	40 e8       	ldi	r20, 0x80	; 128
    26dc:	5f e3       	ldi	r21, 0x3F	; 63
    26de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26e2:	88 23       	and	r24, r24
    26e4:	2c f4       	brge	.+10     	; 0x26f0 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    26e6:	81 e0       	ldi	r24, 0x01	; 1
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	9a a3       	std	Y+34, r25	; 0x22
    26ec:	89 a3       	std	Y+33, r24	; 0x21
    26ee:	3f c0       	rjmp	.+126    	; 0x276e <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    26f0:	6b a1       	ldd	r22, Y+35	; 0x23
    26f2:	7c a1       	ldd	r23, Y+36	; 0x24
    26f4:	8d a1       	ldd	r24, Y+37	; 0x25
    26f6:	9e a1       	ldd	r25, Y+38	; 0x26
    26f8:	20 e0       	ldi	r18, 0x00	; 0
    26fa:	3f ef       	ldi	r19, 0xFF	; 255
    26fc:	4f e7       	ldi	r20, 0x7F	; 127
    26fe:	57 e4       	ldi	r21, 0x47	; 71
    2700:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2704:	18 16       	cp	r1, r24
    2706:	4c f5       	brge	.+82     	; 0x275a <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2708:	6f a1       	ldd	r22, Y+39	; 0x27
    270a:	78 a5       	ldd	r23, Y+40	; 0x28
    270c:	89 a5       	ldd	r24, Y+41	; 0x29
    270e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2710:	20 e0       	ldi	r18, 0x00	; 0
    2712:	30 e0       	ldi	r19, 0x00	; 0
    2714:	40 e2       	ldi	r20, 0x20	; 32
    2716:	51 e4       	ldi	r21, 0x41	; 65
    2718:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    271c:	dc 01       	movw	r26, r24
    271e:	cb 01       	movw	r24, r22
    2720:	bc 01       	movw	r22, r24
    2722:	cd 01       	movw	r24, r26
    2724:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2728:	dc 01       	movw	r26, r24
    272a:	cb 01       	movw	r24, r22
    272c:	9a a3       	std	Y+34, r25	; 0x22
    272e:	89 a3       	std	Y+33, r24	; 0x21
    2730:	0f c0       	rjmp	.+30     	; 0x2750 <LCD_displayCharacter+0x1ca>
    2732:	89 e1       	ldi	r24, 0x19	; 25
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	98 a3       	std	Y+32, r25	; 0x20
    2738:	8f 8f       	std	Y+31, r24	; 0x1f
    273a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    273c:	98 a1       	ldd	r25, Y+32	; 0x20
    273e:	01 97       	sbiw	r24, 0x01	; 1
    2740:	f1 f7       	brne	.-4      	; 0x273e <LCD_displayCharacter+0x1b8>
    2742:	98 a3       	std	Y+32, r25	; 0x20
    2744:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2746:	89 a1       	ldd	r24, Y+33	; 0x21
    2748:	9a a1       	ldd	r25, Y+34	; 0x22
    274a:	01 97       	sbiw	r24, 0x01	; 1
    274c:	9a a3       	std	Y+34, r25	; 0x22
    274e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2750:	89 a1       	ldd	r24, Y+33	; 0x21
    2752:	9a a1       	ldd	r25, Y+34	; 0x22
    2754:	00 97       	sbiw	r24, 0x00	; 0
    2756:	69 f7       	brne	.-38     	; 0x2732 <LCD_displayCharacter+0x1ac>
    2758:	14 c0       	rjmp	.+40     	; 0x2782 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    275a:	6b a1       	ldd	r22, Y+35	; 0x23
    275c:	7c a1       	ldd	r23, Y+36	; 0x24
    275e:	8d a1       	ldd	r24, Y+37	; 0x25
    2760:	9e a1       	ldd	r25, Y+38	; 0x26
    2762:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2766:	dc 01       	movw	r26, r24
    2768:	cb 01       	movw	r24, r22
    276a:	9a a3       	std	Y+34, r25	; 0x22
    276c:	89 a3       	std	Y+33, r24	; 0x21
    276e:	89 a1       	ldd	r24, Y+33	; 0x21
    2770:	9a a1       	ldd	r25, Y+34	; 0x22
    2772:	9e 8f       	std	Y+30, r25	; 0x1e
    2774:	8d 8f       	std	Y+29, r24	; 0x1d
    2776:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2778:	9e 8d       	ldd	r25, Y+30	; 0x1e
    277a:	01 97       	sbiw	r24, 0x01	; 1
    277c:	f1 f7       	brne	.-4      	; 0x277a <LCD_displayCharacter+0x1f4>
    277e:	9e 8f       	std	Y+30, r25	; 0x1e
    2780:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2782:	81 e0       	ldi	r24, 0x01	; 1
    2784:	69 ad       	ldd	r22, Y+57	; 0x39
    2786:	0e 94 23 10 	call	0x2046	; 0x2046 <GPIO_writePort>
    278a:	80 e0       	ldi	r24, 0x00	; 0
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	a0 e8       	ldi	r26, 0x80	; 128
    2790:	bf e3       	ldi	r27, 0x3F	; 63
    2792:	89 8f       	std	Y+25, r24	; 0x19
    2794:	9a 8f       	std	Y+26, r25	; 0x1a
    2796:	ab 8f       	std	Y+27, r26	; 0x1b
    2798:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    279a:	69 8d       	ldd	r22, Y+25	; 0x19
    279c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    279e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27a2:	20 e0       	ldi	r18, 0x00	; 0
    27a4:	30 e0       	ldi	r19, 0x00	; 0
    27a6:	4a e7       	ldi	r20, 0x7A	; 122
    27a8:	53 e4       	ldi	r21, 0x43	; 67
    27aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ae:	dc 01       	movw	r26, r24
    27b0:	cb 01       	movw	r24, r22
    27b2:	8d 8b       	std	Y+21, r24	; 0x15
    27b4:	9e 8b       	std	Y+22, r25	; 0x16
    27b6:	af 8b       	std	Y+23, r26	; 0x17
    27b8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    27ba:	6d 89       	ldd	r22, Y+21	; 0x15
    27bc:	7e 89       	ldd	r23, Y+22	; 0x16
    27be:	8f 89       	ldd	r24, Y+23	; 0x17
    27c0:	98 8d       	ldd	r25, Y+24	; 0x18
    27c2:	20 e0       	ldi	r18, 0x00	; 0
    27c4:	30 e0       	ldi	r19, 0x00	; 0
    27c6:	40 e8       	ldi	r20, 0x80	; 128
    27c8:	5f e3       	ldi	r21, 0x3F	; 63
    27ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27ce:	88 23       	and	r24, r24
    27d0:	2c f4       	brge	.+10     	; 0x27dc <LCD_displayCharacter+0x256>
		__ticks = 1;
    27d2:	81 e0       	ldi	r24, 0x01	; 1
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	9c 8b       	std	Y+20, r25	; 0x14
    27d8:	8b 8b       	std	Y+19, r24	; 0x13
    27da:	3f c0       	rjmp	.+126    	; 0x285a <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    27dc:	6d 89       	ldd	r22, Y+21	; 0x15
    27de:	7e 89       	ldd	r23, Y+22	; 0x16
    27e0:	8f 89       	ldd	r24, Y+23	; 0x17
    27e2:	98 8d       	ldd	r25, Y+24	; 0x18
    27e4:	20 e0       	ldi	r18, 0x00	; 0
    27e6:	3f ef       	ldi	r19, 0xFF	; 255
    27e8:	4f e7       	ldi	r20, 0x7F	; 127
    27ea:	57 e4       	ldi	r21, 0x47	; 71
    27ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27f0:	18 16       	cp	r1, r24
    27f2:	4c f5       	brge	.+82     	; 0x2846 <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27f4:	69 8d       	ldd	r22, Y+25	; 0x19
    27f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27fc:	20 e0       	ldi	r18, 0x00	; 0
    27fe:	30 e0       	ldi	r19, 0x00	; 0
    2800:	40 e2       	ldi	r20, 0x20	; 32
    2802:	51 e4       	ldi	r21, 0x41	; 65
    2804:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2808:	dc 01       	movw	r26, r24
    280a:	cb 01       	movw	r24, r22
    280c:	bc 01       	movw	r22, r24
    280e:	cd 01       	movw	r24, r26
    2810:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2814:	dc 01       	movw	r26, r24
    2816:	cb 01       	movw	r24, r22
    2818:	9c 8b       	std	Y+20, r25	; 0x14
    281a:	8b 8b       	std	Y+19, r24	; 0x13
    281c:	0f c0       	rjmp	.+30     	; 0x283c <LCD_displayCharacter+0x2b6>
    281e:	89 e1       	ldi	r24, 0x19	; 25
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	9a 8b       	std	Y+18, r25	; 0x12
    2824:	89 8b       	std	Y+17, r24	; 0x11
    2826:	89 89       	ldd	r24, Y+17	; 0x11
    2828:	9a 89       	ldd	r25, Y+18	; 0x12
    282a:	01 97       	sbiw	r24, 0x01	; 1
    282c:	f1 f7       	brne	.-4      	; 0x282a <LCD_displayCharacter+0x2a4>
    282e:	9a 8b       	std	Y+18, r25	; 0x12
    2830:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2832:	8b 89       	ldd	r24, Y+19	; 0x13
    2834:	9c 89       	ldd	r25, Y+20	; 0x14
    2836:	01 97       	sbiw	r24, 0x01	; 1
    2838:	9c 8b       	std	Y+20, r25	; 0x14
    283a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    283c:	8b 89       	ldd	r24, Y+19	; 0x13
    283e:	9c 89       	ldd	r25, Y+20	; 0x14
    2840:	00 97       	sbiw	r24, 0x00	; 0
    2842:	69 f7       	brne	.-38     	; 0x281e <LCD_displayCharacter+0x298>
    2844:	14 c0       	rjmp	.+40     	; 0x286e <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2846:	6d 89       	ldd	r22, Y+21	; 0x15
    2848:	7e 89       	ldd	r23, Y+22	; 0x16
    284a:	8f 89       	ldd	r24, Y+23	; 0x17
    284c:	98 8d       	ldd	r25, Y+24	; 0x18
    284e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2852:	dc 01       	movw	r26, r24
    2854:	cb 01       	movw	r24, r22
    2856:	9c 8b       	std	Y+20, r25	; 0x14
    2858:	8b 8b       	std	Y+19, r24	; 0x13
    285a:	8b 89       	ldd	r24, Y+19	; 0x13
    285c:	9c 89       	ldd	r25, Y+20	; 0x14
    285e:	98 8b       	std	Y+16, r25	; 0x10
    2860:	8f 87       	std	Y+15, r24	; 0x0f
    2862:	8f 85       	ldd	r24, Y+15	; 0x0f
    2864:	98 89       	ldd	r25, Y+16	; 0x10
    2866:	01 97       	sbiw	r24, 0x01	; 1
    2868:	f1 f7       	brne	.-4      	; 0x2866 <LCD_displayCharacter+0x2e0>
    286a:	98 8b       	std	Y+16, r25	; 0x10
    286c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    286e:	80 e0       	ldi	r24, 0x00	; 0
    2870:	62 e0       	ldi	r22, 0x02	; 2
    2872:	40 e0       	ldi	r20, 0x00	; 0
    2874:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <GPIO_writePin>
    2878:	80 e0       	ldi	r24, 0x00	; 0
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	a0 e8       	ldi	r26, 0x80	; 128
    287e:	bf e3       	ldi	r27, 0x3F	; 63
    2880:	8b 87       	std	Y+11, r24	; 0x0b
    2882:	9c 87       	std	Y+12, r25	; 0x0c
    2884:	ad 87       	std	Y+13, r26	; 0x0d
    2886:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2888:	6b 85       	ldd	r22, Y+11	; 0x0b
    288a:	7c 85       	ldd	r23, Y+12	; 0x0c
    288c:	8d 85       	ldd	r24, Y+13	; 0x0d
    288e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2890:	20 e0       	ldi	r18, 0x00	; 0
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	4a e7       	ldi	r20, 0x7A	; 122
    2896:	53 e4       	ldi	r21, 0x43	; 67
    2898:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    289c:	dc 01       	movw	r26, r24
    289e:	cb 01       	movw	r24, r22
    28a0:	8f 83       	std	Y+7, r24	; 0x07
    28a2:	98 87       	std	Y+8, r25	; 0x08
    28a4:	a9 87       	std	Y+9, r26	; 0x09
    28a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28a8:	6f 81       	ldd	r22, Y+7	; 0x07
    28aa:	78 85       	ldd	r23, Y+8	; 0x08
    28ac:	89 85       	ldd	r24, Y+9	; 0x09
    28ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    28b0:	20 e0       	ldi	r18, 0x00	; 0
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	40 e8       	ldi	r20, 0x80	; 128
    28b6:	5f e3       	ldi	r21, 0x3F	; 63
    28b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28bc:	88 23       	and	r24, r24
    28be:	2c f4       	brge	.+10     	; 0x28ca <LCD_displayCharacter+0x344>
		__ticks = 1;
    28c0:	81 e0       	ldi	r24, 0x01	; 1
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	9e 83       	std	Y+6, r25	; 0x06
    28c6:	8d 83       	std	Y+5, r24	; 0x05
    28c8:	3f c0       	rjmp	.+126    	; 0x2948 <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    28ca:	6f 81       	ldd	r22, Y+7	; 0x07
    28cc:	78 85       	ldd	r23, Y+8	; 0x08
    28ce:	89 85       	ldd	r24, Y+9	; 0x09
    28d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    28d2:	20 e0       	ldi	r18, 0x00	; 0
    28d4:	3f ef       	ldi	r19, 0xFF	; 255
    28d6:	4f e7       	ldi	r20, 0x7F	; 127
    28d8:	57 e4       	ldi	r21, 0x47	; 71
    28da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28de:	18 16       	cp	r1, r24
    28e0:	4c f5       	brge	.+82     	; 0x2934 <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    28e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    28e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    28e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    28ea:	20 e0       	ldi	r18, 0x00	; 0
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	40 e2       	ldi	r20, 0x20	; 32
    28f0:	51 e4       	ldi	r21, 0x41	; 65
    28f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f6:	dc 01       	movw	r26, r24
    28f8:	cb 01       	movw	r24, r22
    28fa:	bc 01       	movw	r22, r24
    28fc:	cd 01       	movw	r24, r26
    28fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2902:	dc 01       	movw	r26, r24
    2904:	cb 01       	movw	r24, r22
    2906:	9e 83       	std	Y+6, r25	; 0x06
    2908:	8d 83       	std	Y+5, r24	; 0x05
    290a:	0f c0       	rjmp	.+30     	; 0x292a <LCD_displayCharacter+0x3a4>
    290c:	89 e1       	ldi	r24, 0x19	; 25
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	9c 83       	std	Y+4, r25	; 0x04
    2912:	8b 83       	std	Y+3, r24	; 0x03
    2914:	8b 81       	ldd	r24, Y+3	; 0x03
    2916:	9c 81       	ldd	r25, Y+4	; 0x04
    2918:	01 97       	sbiw	r24, 0x01	; 1
    291a:	f1 f7       	brne	.-4      	; 0x2918 <LCD_displayCharacter+0x392>
    291c:	9c 83       	std	Y+4, r25	; 0x04
    291e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2920:	8d 81       	ldd	r24, Y+5	; 0x05
    2922:	9e 81       	ldd	r25, Y+6	; 0x06
    2924:	01 97       	sbiw	r24, 0x01	; 1
    2926:	9e 83       	std	Y+6, r25	; 0x06
    2928:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    292a:	8d 81       	ldd	r24, Y+5	; 0x05
    292c:	9e 81       	ldd	r25, Y+6	; 0x06
    292e:	00 97       	sbiw	r24, 0x00	; 0
    2930:	69 f7       	brne	.-38     	; 0x290c <LCD_displayCharacter+0x386>
    2932:	14 c0       	rjmp	.+40     	; 0x295c <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2934:	6f 81       	ldd	r22, Y+7	; 0x07
    2936:	78 85       	ldd	r23, Y+8	; 0x08
    2938:	89 85       	ldd	r24, Y+9	; 0x09
    293a:	9a 85       	ldd	r25, Y+10	; 0x0a
    293c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2940:	dc 01       	movw	r26, r24
    2942:	cb 01       	movw	r24, r22
    2944:	9e 83       	std	Y+6, r25	; 0x06
    2946:	8d 83       	std	Y+5, r24	; 0x05
    2948:	8d 81       	ldd	r24, Y+5	; 0x05
    294a:	9e 81       	ldd	r25, Y+6	; 0x06
    294c:	9a 83       	std	Y+2, r25	; 0x02
    294e:	89 83       	std	Y+1, r24	; 0x01
    2950:	89 81       	ldd	r24, Y+1	; 0x01
    2952:	9a 81       	ldd	r25, Y+2	; 0x02
    2954:	01 97       	sbiw	r24, 0x01	; 1
    2956:	f1 f7       	brne	.-4      	; 0x2954 <LCD_displayCharacter+0x3ce>
    2958:	9a 83       	std	Y+2, r25	; 0x02
    295a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    295c:	e9 96       	adiw	r28, 0x39	; 57
    295e:	0f b6       	in	r0, 0x3f	; 63
    2960:	f8 94       	cli
    2962:	de bf       	out	0x3e, r29	; 62
    2964:	0f be       	out	0x3f, r0	; 63
    2966:	cd bf       	out	0x3d, r28	; 61
    2968:	cf 91       	pop	r28
    296a:	df 91       	pop	r29
    296c:	08 95       	ret

0000296e <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    296e:	df 93       	push	r29
    2970:	cf 93       	push	r28
    2972:	00 d0       	rcall	.+0      	; 0x2974 <LCD_displayString+0x6>
    2974:	0f 92       	push	r0
    2976:	cd b7       	in	r28, 0x3d	; 61
    2978:	de b7       	in	r29, 0x3e	; 62
    297a:	9b 83       	std	Y+3, r25	; 0x03
    297c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    297e:	19 82       	std	Y+1, r1	; 0x01
    2980:	0e c0       	rjmp	.+28     	; 0x299e <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2982:	89 81       	ldd	r24, Y+1	; 0x01
    2984:	28 2f       	mov	r18, r24
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	8a 81       	ldd	r24, Y+2	; 0x02
    298a:	9b 81       	ldd	r25, Y+3	; 0x03
    298c:	fc 01       	movw	r30, r24
    298e:	e2 0f       	add	r30, r18
    2990:	f3 1f       	adc	r31, r19
    2992:	80 81       	ld	r24, Z
    2994:	0e 94 c3 12 	call	0x2586	; 0x2586 <LCD_displayCharacter>
		i++;
    2998:	89 81       	ldd	r24, Y+1	; 0x01
    299a:	8f 5f       	subi	r24, 0xFF	; 255
    299c:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    299e:	89 81       	ldd	r24, Y+1	; 0x01
    29a0:	28 2f       	mov	r18, r24
    29a2:	30 e0       	ldi	r19, 0x00	; 0
    29a4:	8a 81       	ldd	r24, Y+2	; 0x02
    29a6:	9b 81       	ldd	r25, Y+3	; 0x03
    29a8:	fc 01       	movw	r30, r24
    29aa:	e2 0f       	add	r30, r18
    29ac:	f3 1f       	adc	r31, r19
    29ae:	80 81       	ld	r24, Z
    29b0:	88 23       	and	r24, r24
    29b2:	39 f7       	brne	.-50     	; 0x2982 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    29b4:	0f 90       	pop	r0
    29b6:	0f 90       	pop	r0
    29b8:	0f 90       	pop	r0
    29ba:	cf 91       	pop	r28
    29bc:	df 91       	pop	r29
    29be:	08 95       	ret

000029c0 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    29c0:	df 93       	push	r29
    29c2:	cf 93       	push	r28
    29c4:	00 d0       	rcall	.+0      	; 0x29c6 <LCD_moveCursor+0x6>
    29c6:	00 d0       	rcall	.+0      	; 0x29c8 <LCD_moveCursor+0x8>
    29c8:	0f 92       	push	r0
    29ca:	cd b7       	in	r28, 0x3d	; 61
    29cc:	de b7       	in	r29, 0x3e	; 62
    29ce:	8a 83       	std	Y+2, r24	; 0x02
    29d0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    29d2:	8a 81       	ldd	r24, Y+2	; 0x02
    29d4:	28 2f       	mov	r18, r24
    29d6:	30 e0       	ldi	r19, 0x00	; 0
    29d8:	3d 83       	std	Y+5, r19	; 0x05
    29da:	2c 83       	std	Y+4, r18	; 0x04
    29dc:	8c 81       	ldd	r24, Y+4	; 0x04
    29de:	9d 81       	ldd	r25, Y+5	; 0x05
    29e0:	81 30       	cpi	r24, 0x01	; 1
    29e2:	91 05       	cpc	r25, r1
    29e4:	c1 f0       	breq	.+48     	; 0x2a16 <LCD_moveCursor+0x56>
    29e6:	2c 81       	ldd	r18, Y+4	; 0x04
    29e8:	3d 81       	ldd	r19, Y+5	; 0x05
    29ea:	22 30       	cpi	r18, 0x02	; 2
    29ec:	31 05       	cpc	r19, r1
    29ee:	2c f4       	brge	.+10     	; 0x29fa <LCD_moveCursor+0x3a>
    29f0:	8c 81       	ldd	r24, Y+4	; 0x04
    29f2:	9d 81       	ldd	r25, Y+5	; 0x05
    29f4:	00 97       	sbiw	r24, 0x00	; 0
    29f6:	61 f0       	breq	.+24     	; 0x2a10 <LCD_moveCursor+0x50>
    29f8:	19 c0       	rjmp	.+50     	; 0x2a2c <LCD_moveCursor+0x6c>
    29fa:	2c 81       	ldd	r18, Y+4	; 0x04
    29fc:	3d 81       	ldd	r19, Y+5	; 0x05
    29fe:	22 30       	cpi	r18, 0x02	; 2
    2a00:	31 05       	cpc	r19, r1
    2a02:	69 f0       	breq	.+26     	; 0x2a1e <LCD_moveCursor+0x5e>
    2a04:	8c 81       	ldd	r24, Y+4	; 0x04
    2a06:	9d 81       	ldd	r25, Y+5	; 0x05
    2a08:	83 30       	cpi	r24, 0x03	; 3
    2a0a:	91 05       	cpc	r25, r1
    2a0c:	61 f0       	breq	.+24     	; 0x2a26 <LCD_moveCursor+0x66>
    2a0e:	0e c0       	rjmp	.+28     	; 0x2a2c <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2a10:	8b 81       	ldd	r24, Y+3	; 0x03
    2a12:	89 83       	std	Y+1, r24	; 0x01
    2a14:	0b c0       	rjmp	.+22     	; 0x2a2c <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2a16:	8b 81       	ldd	r24, Y+3	; 0x03
    2a18:	80 5c       	subi	r24, 0xC0	; 192
    2a1a:	89 83       	std	Y+1, r24	; 0x01
    2a1c:	07 c0       	rjmp	.+14     	; 0x2a2c <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a20:	80 5f       	subi	r24, 0xF0	; 240
    2a22:	89 83       	std	Y+1, r24	; 0x01
    2a24:	03 c0       	rjmp	.+6      	; 0x2a2c <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2a26:	8b 81       	ldd	r24, Y+3	; 0x03
    2a28:	80 5b       	subi	r24, 0xB0	; 176
    2a2a:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2a2c:	89 81       	ldd	r24, Y+1	; 0x01
    2a2e:	80 68       	ori	r24, 0x80	; 128
    2a30:	0e 94 cf 10 	call	0x219e	; 0x219e <LCD_sendCommand>
}
    2a34:	0f 90       	pop	r0
    2a36:	0f 90       	pop	r0
    2a38:	0f 90       	pop	r0
    2a3a:	0f 90       	pop	r0
    2a3c:	0f 90       	pop	r0
    2a3e:	cf 91       	pop	r28
    2a40:	df 91       	pop	r29
    2a42:	08 95       	ret

00002a44 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2a44:	df 93       	push	r29
    2a46:	cf 93       	push	r28
    2a48:	00 d0       	rcall	.+0      	; 0x2a4a <LCD_displayStringRowColumn+0x6>
    2a4a:	00 d0       	rcall	.+0      	; 0x2a4c <LCD_displayStringRowColumn+0x8>
    2a4c:	cd b7       	in	r28, 0x3d	; 61
    2a4e:	de b7       	in	r29, 0x3e	; 62
    2a50:	89 83       	std	Y+1, r24	; 0x01
    2a52:	6a 83       	std	Y+2, r22	; 0x02
    2a54:	5c 83       	std	Y+4, r21	; 0x04
    2a56:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2a58:	89 81       	ldd	r24, Y+1	; 0x01
    2a5a:	6a 81       	ldd	r22, Y+2	; 0x02
    2a5c:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2a60:	8b 81       	ldd	r24, Y+3	; 0x03
    2a62:	9c 81       	ldd	r25, Y+4	; 0x04
    2a64:	0e 94 b7 14 	call	0x296e	; 0x296e <LCD_displayString>
}
    2a68:	0f 90       	pop	r0
    2a6a:	0f 90       	pop	r0
    2a6c:	0f 90       	pop	r0
    2a6e:	0f 90       	pop	r0
    2a70:	cf 91       	pop	r28
    2a72:	df 91       	pop	r29
    2a74:	08 95       	ret

00002a76 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2a76:	df 93       	push	r29
    2a78:	cf 93       	push	r28
    2a7a:	cd b7       	in	r28, 0x3d	; 61
    2a7c:	de b7       	in	r29, 0x3e	; 62
    2a7e:	62 97       	sbiw	r28, 0x12	; 18
    2a80:	0f b6       	in	r0, 0x3f	; 63
    2a82:	f8 94       	cli
    2a84:	de bf       	out	0x3e, r29	; 62
    2a86:	0f be       	out	0x3f, r0	; 63
    2a88:	cd bf       	out	0x3d, r28	; 61
    2a8a:	9a 8b       	std	Y+18, r25	; 0x12
    2a8c:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2a8e:	89 89       	ldd	r24, Y+17	; 0x11
    2a90:	9a 89       	ldd	r25, Y+18	; 0x12
    2a92:	9e 01       	movw	r18, r28
    2a94:	2f 5f       	subi	r18, 0xFF	; 255
    2a96:	3f 4f       	sbci	r19, 0xFF	; 255
    2a98:	b9 01       	movw	r22, r18
    2a9a:	4a e0       	ldi	r20, 0x0A	; 10
    2a9c:	50 e0       	ldi	r21, 0x00	; 0
    2a9e:	0e 94 94 17 	call	0x2f28	; 0x2f28 <itoa>
   LCD_displayString(buff); /* Display the string */
    2aa2:	ce 01       	movw	r24, r28
    2aa4:	01 96       	adiw	r24, 0x01	; 1
    2aa6:	0e 94 b7 14 	call	0x296e	; 0x296e <LCD_displayString>
}
    2aaa:	62 96       	adiw	r28, 0x12	; 18
    2aac:	0f b6       	in	r0, 0x3f	; 63
    2aae:	f8 94       	cli
    2ab0:	de bf       	out	0x3e, r29	; 62
    2ab2:	0f be       	out	0x3f, r0	; 63
    2ab4:	cd bf       	out	0x3d, r28	; 61
    2ab6:	cf 91       	pop	r28
    2ab8:	df 91       	pop	r29
    2aba:	08 95       	ret

00002abc <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2abc:	df 93       	push	r29
    2abe:	cf 93       	push	r28
    2ac0:	cd b7       	in	r28, 0x3d	; 61
    2ac2:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2ac4:	81 e0       	ldi	r24, 0x01	; 1
    2ac6:	0e 94 cf 10 	call	0x219e	; 0x219e <LCD_sendCommand>
}
    2aca:	cf 91       	pop	r28
    2acc:	df 91       	pop	r29
    2ace:	08 95       	ret

00002ad0 <TWI_init>:
#include "common_macros.h"
#include <avr/io.h>


void TWI_init(const Config_twi *Config_PTR )
{
    2ad0:	df 93       	push	r29
    2ad2:	cf 93       	push	r28
    2ad4:	00 d0       	rcall	.+0      	; 0x2ad6 <TWI_init+0x6>
    2ad6:	cd b7       	in	r28, 0x3d	; 61
    2ad8:	de b7       	in	r29, 0x3e	; 62
    2ada:	9a 83       	std	Y+2, r25	; 0x02
    2adc:	89 83       	std	Y+1, r24	; 0x01

    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
    2ade:	e0 e2       	ldi	r30, 0x20	; 32
    2ae0:	f0 e0       	ldi	r31, 0x00	; 0
    2ae2:	82 e0       	ldi	r24, 0x02	; 2
    2ae4:	80 83       	st	Z, r24
	TWSR = (TWSR & 0xFC) | Config_PTR->BitRate;
    2ae6:	a1 e2       	ldi	r26, 0x21	; 33
    2ae8:	b0 e0       	ldi	r27, 0x00	; 0
    2aea:	e1 e2       	ldi	r30, 0x21	; 33
    2aec:	f0 e0       	ldi	r31, 0x00	; 0
    2aee:	80 81       	ld	r24, Z
    2af0:	98 2f       	mov	r25, r24
    2af2:	9c 7f       	andi	r25, 0xFC	; 252
    2af4:	e9 81       	ldd	r30, Y+1	; 0x01
    2af6:	fa 81       	ldd	r31, Y+2	; 0x02
    2af8:	80 81       	ld	r24, Z
    2afa:	89 2b       	or	r24, r25
    2afc:	8c 93       	st	X, r24
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = Config_PTR->SlaveAddres; // my address = 0x01 :)
    2afe:	a2 e2       	ldi	r26, 0x22	; 34
    2b00:	b0 e0       	ldi	r27, 0x00	; 0
    2b02:	e9 81       	ldd	r30, Y+1	; 0x01
    2b04:	fa 81       	ldd	r31, Y+2	; 0x02
    2b06:	81 81       	ldd	r24, Z+1	; 0x01
    2b08:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    2b0a:	e6 e5       	ldi	r30, 0x56	; 86
    2b0c:	f0 e0       	ldi	r31, 0x00	; 0
    2b0e:	84 e0       	ldi	r24, 0x04	; 4
    2b10:	80 83       	st	Z, r24
}
    2b12:	0f 90       	pop	r0
    2b14:	0f 90       	pop	r0
    2b16:	cf 91       	pop	r28
    2b18:	df 91       	pop	r29
    2b1a:	08 95       	ret

00002b1c <TWI_start>:

void TWI_start(void)
{
    2b1c:	df 93       	push	r29
    2b1e:	cf 93       	push	r28
    2b20:	cd b7       	in	r28, 0x3d	; 61
    2b22:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2b24:	e6 e5       	ldi	r30, 0x56	; 86
    2b26:	f0 e0       	ldi	r31, 0x00	; 0
    2b28:	84 ea       	ldi	r24, 0xA4	; 164
    2b2a:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2b2c:	e6 e5       	ldi	r30, 0x56	; 86
    2b2e:	f0 e0       	ldi	r31, 0x00	; 0
    2b30:	80 81       	ld	r24, Z
    2b32:	88 23       	and	r24, r24
    2b34:	dc f7       	brge	.-10     	; 0x2b2c <TWI_start+0x10>
}
    2b36:	cf 91       	pop	r28
    2b38:	df 91       	pop	r29
    2b3a:	08 95       	ret

00002b3c <TWI_stop>:

void TWI_stop(void)
{
    2b3c:	df 93       	push	r29
    2b3e:	cf 93       	push	r28
    2b40:	cd b7       	in	r28, 0x3d	; 61
    2b42:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2b44:	e6 e5       	ldi	r30, 0x56	; 86
    2b46:	f0 e0       	ldi	r31, 0x00	; 0
    2b48:	84 e9       	ldi	r24, 0x94	; 148
    2b4a:	80 83       	st	Z, r24
}
    2b4c:	cf 91       	pop	r28
    2b4e:	df 91       	pop	r29
    2b50:	08 95       	ret

00002b52 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    2b52:	df 93       	push	r29
    2b54:	cf 93       	push	r28
    2b56:	0f 92       	push	r0
    2b58:	cd b7       	in	r28, 0x3d	; 61
    2b5a:	de b7       	in	r29, 0x3e	; 62
    2b5c:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    2b5e:	e3 e2       	ldi	r30, 0x23	; 35
    2b60:	f0 e0       	ldi	r31, 0x00	; 0
    2b62:	89 81       	ldd	r24, Y+1	; 0x01
    2b64:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    2b66:	e6 e5       	ldi	r30, 0x56	; 86
    2b68:	f0 e0       	ldi	r31, 0x00	; 0
    2b6a:	84 e8       	ldi	r24, 0x84	; 132
    2b6c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2b6e:	e6 e5       	ldi	r30, 0x56	; 86
    2b70:	f0 e0       	ldi	r31, 0x00	; 0
    2b72:	80 81       	ld	r24, Z
    2b74:	88 23       	and	r24, r24
    2b76:	dc f7       	brge	.-10     	; 0x2b6e <TWI_writeByte+0x1c>
}
    2b78:	0f 90       	pop	r0
    2b7a:	cf 91       	pop	r28
    2b7c:	df 91       	pop	r29
    2b7e:	08 95       	ret

00002b80 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    2b80:	df 93       	push	r29
    2b82:	cf 93       	push	r28
    2b84:	cd b7       	in	r28, 0x3d	; 61
    2b86:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2b88:	e6 e5       	ldi	r30, 0x56	; 86
    2b8a:	f0 e0       	ldi	r31, 0x00	; 0
    2b8c:	84 ec       	ldi	r24, 0xC4	; 196
    2b8e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2b90:	e6 e5       	ldi	r30, 0x56	; 86
    2b92:	f0 e0       	ldi	r31, 0x00	; 0
    2b94:	80 81       	ld	r24, Z
    2b96:	88 23       	and	r24, r24
    2b98:	dc f7       	brge	.-10     	; 0x2b90 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    2b9a:	e3 e2       	ldi	r30, 0x23	; 35
    2b9c:	f0 e0       	ldi	r31, 0x00	; 0
    2b9e:	80 81       	ld	r24, Z
}
    2ba0:	cf 91       	pop	r28
    2ba2:	df 91       	pop	r29
    2ba4:	08 95       	ret

00002ba6 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    2ba6:	df 93       	push	r29
    2ba8:	cf 93       	push	r28
    2baa:	cd b7       	in	r28, 0x3d	; 61
    2bac:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2bae:	e6 e5       	ldi	r30, 0x56	; 86
    2bb0:	f0 e0       	ldi	r31, 0x00	; 0
    2bb2:	84 e8       	ldi	r24, 0x84	; 132
    2bb4:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2bb6:	e6 e5       	ldi	r30, 0x56	; 86
    2bb8:	f0 e0       	ldi	r31, 0x00	; 0
    2bba:	80 81       	ld	r24, Z
    2bbc:	88 23       	and	r24, r24
    2bbe:	dc f7       	brge	.-10     	; 0x2bb6 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    2bc0:	e3 e2       	ldi	r30, 0x23	; 35
    2bc2:	f0 e0       	ldi	r31, 0x00	; 0
    2bc4:	80 81       	ld	r24, Z
}
    2bc6:	cf 91       	pop	r28
    2bc8:	df 91       	pop	r29
    2bca:	08 95       	ret

00002bcc <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    2bcc:	df 93       	push	r29
    2bce:	cf 93       	push	r28
    2bd0:	0f 92       	push	r0
    2bd2:	cd b7       	in	r28, 0x3d	; 61
    2bd4:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    2bd6:	e1 e2       	ldi	r30, 0x21	; 33
    2bd8:	f0 e0       	ldi	r31, 0x00	; 0
    2bda:	80 81       	ld	r24, Z
    2bdc:	88 7f       	andi	r24, 0xF8	; 248
    2bde:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2be0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2be2:	0f 90       	pop	r0
    2be4:	cf 91       	pop	r28
    2be6:	df 91       	pop	r29
    2be8:	08 95       	ret

00002bea <UART_init>:
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */

void UART_init(const uart_ConfigType *Config_PTR)
{
    2bea:	df 93       	push	r29
    2bec:	cf 93       	push	r28
    2bee:	00 d0       	rcall	.+0      	; 0x2bf0 <UART_init+0x6>
    2bf0:	00 d0       	rcall	.+0      	; 0x2bf2 <UART_init+0x8>
    2bf2:	cd b7       	in	r28, 0x3d	; 61
    2bf4:	de b7       	in	r29, 0x3e	; 62
    2bf6:	9c 83       	std	Y+4, r25	; 0x04
    2bf8:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2bfa:	1a 82       	std	Y+2, r1	; 0x02
    2bfc:	19 82       	std	Y+1, r1	; 0x01

	/*
	 *  0 0 0 0    0 bit2 bit1 bit0
	 */
	bit0_USCZ0 = (Config_PTR->bit_data) & 0x01;
    2bfe:	eb 81       	ldd	r30, Y+3	; 0x03
    2c00:	fc 81       	ldd	r31, Y+4	; 0x04
    2c02:	84 81       	ldd	r24, Z+4	; 0x04
    2c04:	81 70       	andi	r24, 0x01	; 1
    2c06:	80 93 7e 00 	sts	0x007E, r24
	bit1_USCZ1 = ((Config_PTR->bit_data) & 0x02)>>1;
    2c0a:	eb 81       	ldd	r30, Y+3	; 0x03
    2c0c:	fc 81       	ldd	r31, Y+4	; 0x04
    2c0e:	84 81       	ldd	r24, Z+4	; 0x04
    2c10:	88 2f       	mov	r24, r24
    2c12:	90 e0       	ldi	r25, 0x00	; 0
    2c14:	82 70       	andi	r24, 0x02	; 2
    2c16:	90 70       	andi	r25, 0x00	; 0
    2c18:	95 95       	asr	r25
    2c1a:	87 95       	ror	r24
    2c1c:	80 93 7f 00 	sts	0x007F, r24
	bit2_USCZ2 = ((Config_PTR->bit_data) & 0x04)>>2;
    2c20:	eb 81       	ldd	r30, Y+3	; 0x03
    2c22:	fc 81       	ldd	r31, Y+4	; 0x04
    2c24:	84 81       	ldd	r24, Z+4	; 0x04
    2c26:	88 2f       	mov	r24, r24
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	84 70       	andi	r24, 0x04	; 4
    2c2c:	90 70       	andi	r25, 0x00	; 0
    2c2e:	95 95       	asr	r25
    2c30:	87 95       	ror	r24
    2c32:	95 95       	asr	r25
    2c34:	87 95       	ror	r24
    2c36:	80 93 80 00 	sts	0x0080, r24

	/*
	 *  0 0 0 0   0 0 UPM1 UPM0
	 */
	bit0_UPM0 = (Config_PTR->parity) & 0x01;
    2c3a:	eb 81       	ldd	r30, Y+3	; 0x03
    2c3c:	fc 81       	ldd	r31, Y+4	; 0x04
    2c3e:	85 81       	ldd	r24, Z+5	; 0x05
    2c40:	81 70       	andi	r24, 0x01	; 1
    2c42:	80 93 81 00 	sts	0x0081, r24
	bit1_UPM1 = ((Config_PTR->parity) & 0x02)>>1;
    2c46:	eb 81       	ldd	r30, Y+3	; 0x03
    2c48:	fc 81       	ldd	r31, Y+4	; 0x04
    2c4a:	85 81       	ldd	r24, Z+5	; 0x05
    2c4c:	88 2f       	mov	r24, r24
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	82 70       	andi	r24, 0x02	; 2
    2c52:	90 70       	andi	r25, 0x00	; 0
    2c54:	95 95       	asr	r25
    2c56:	87 95       	ror	r24
    2c58:	80 93 82 00 	sts	0x0082, r24

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2c5c:	eb e2       	ldi	r30, 0x2B	; 43
    2c5e:	f0 e0       	ldi	r31, 0x00	; 0
    2c60:	82 e0       	ldi	r24, 0x02	; 2
    2c62:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN) | (bit2_USCZ2<<UCSZ2);
    2c64:	ea e2       	ldi	r30, 0x2A	; 42
    2c66:	f0 e0       	ldi	r31, 0x00	; 0
    2c68:	80 91 80 00 	lds	r24, 0x0080
    2c6c:	88 2f       	mov	r24, r24
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	88 0f       	add	r24, r24
    2c72:	99 1f       	adc	r25, r25
    2c74:	88 0f       	add	r24, r24
    2c76:	99 1f       	adc	r25, r25
    2c78:	88 61       	ori	r24, 0x18	; 24
    2c7a:	80 83       	st	Z, r24
	 * UCSZ1   = bit1_USCZ1 For 8-bit data mode
	 * UCSZ2   = bit2_USCZ2 For 8-bit data mode
	 * UCSZ0   = bit0_USCZ0 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (bit0_USCZ0<<UCSZ0) | (bit1_USCZ1<<UCSZ1) | (Config_PTR->stop_bit<<USBS) | (bit0_UPM0 << UPM0) | (bit1_UPM1 <<UPM1);
    2c7c:	a0 e4       	ldi	r26, 0x40	; 64
    2c7e:	b0 e0       	ldi	r27, 0x00	; 0
    2c80:	80 91 7e 00 	lds	r24, 0x007E
    2c84:	88 2f       	mov	r24, r24
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	88 0f       	add	r24, r24
    2c8a:	99 1f       	adc	r25, r25
    2c8c:	28 2f       	mov	r18, r24
    2c8e:	20 68       	ori	r18, 0x80	; 128
    2c90:	80 91 7f 00 	lds	r24, 0x007F
    2c94:	88 2f       	mov	r24, r24
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	88 0f       	add	r24, r24
    2c9a:	99 1f       	adc	r25, r25
    2c9c:	88 0f       	add	r24, r24
    2c9e:	99 1f       	adc	r25, r25
    2ca0:	28 2b       	or	r18, r24
    2ca2:	eb 81       	ldd	r30, Y+3	; 0x03
    2ca4:	fc 81       	ldd	r31, Y+4	; 0x04
    2ca6:	86 81       	ldd	r24, Z+6	; 0x06
    2ca8:	88 2f       	mov	r24, r24
    2caa:	90 e0       	ldi	r25, 0x00	; 0
    2cac:	88 0f       	add	r24, r24
    2cae:	99 1f       	adc	r25, r25
    2cb0:	88 0f       	add	r24, r24
    2cb2:	99 1f       	adc	r25, r25
    2cb4:	88 0f       	add	r24, r24
    2cb6:	99 1f       	adc	r25, r25
    2cb8:	28 2b       	or	r18, r24
    2cba:	80 91 81 00 	lds	r24, 0x0081
    2cbe:	88 2f       	mov	r24, r24
    2cc0:	90 e0       	ldi	r25, 0x00	; 0
    2cc2:	82 95       	swap	r24
    2cc4:	92 95       	swap	r25
    2cc6:	90 7f       	andi	r25, 0xF0	; 240
    2cc8:	98 27       	eor	r25, r24
    2cca:	80 7f       	andi	r24, 0xF0	; 240
    2ccc:	98 27       	eor	r25, r24
    2cce:	28 2b       	or	r18, r24
    2cd0:	80 91 82 00 	lds	r24, 0x0082
    2cd4:	88 2f       	mov	r24, r24
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	88 0f       	add	r24, r24
    2cda:	99 1f       	adc	r25, r25
    2cdc:	82 95       	swap	r24
    2cde:	92 95       	swap	r25
    2ce0:	90 7f       	andi	r25, 0xF0	; 240
    2ce2:	98 27       	eor	r25, r24
    2ce4:	80 7f       	andi	r24, 0xF0	; 240
    2ce6:	98 27       	eor	r25, r24
    2ce8:	82 2b       	or	r24, r18
    2cea:	8c 93       	st	X, r24

	/* Calculate the UBRR register value by using the value of baud_rate from(4800, 9600, 144000) */
	ubrr_value = (uint16)(((F_CPU / (Config_PTR->baud_rate * 8UL))) - 1);
    2cec:	eb 81       	ldd	r30, Y+3	; 0x03
    2cee:	fc 81       	ldd	r31, Y+4	; 0x04
    2cf0:	80 81       	ld	r24, Z
    2cf2:	91 81       	ldd	r25, Z+1	; 0x01
    2cf4:	a2 81       	ldd	r26, Z+2	; 0x02
    2cf6:	b3 81       	ldd	r27, Z+3	; 0x03
    2cf8:	88 0f       	add	r24, r24
    2cfa:	99 1f       	adc	r25, r25
    2cfc:	aa 1f       	adc	r26, r26
    2cfe:	bb 1f       	adc	r27, r27
    2d00:	88 0f       	add	r24, r24
    2d02:	99 1f       	adc	r25, r25
    2d04:	aa 1f       	adc	r26, r26
    2d06:	bb 1f       	adc	r27, r27
    2d08:	88 0f       	add	r24, r24
    2d0a:	99 1f       	adc	r25, r25
    2d0c:	aa 1f       	adc	r26, r26
    2d0e:	bb 1f       	adc	r27, r27
    2d10:	9c 01       	movw	r18, r24
    2d12:	ad 01       	movw	r20, r26
    2d14:	80 e4       	ldi	r24, 0x40	; 64
    2d16:	92 e4       	ldi	r25, 0x42	; 66
    2d18:	af e0       	ldi	r26, 0x0F	; 15
    2d1a:	b0 e0       	ldi	r27, 0x00	; 0
    2d1c:	bc 01       	movw	r22, r24
    2d1e:	cd 01       	movw	r24, r26
    2d20:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <__udivmodsi4>
    2d24:	da 01       	movw	r26, r20
    2d26:	c9 01       	movw	r24, r18
    2d28:	01 97       	sbiw	r24, 0x01	; 1
    2d2a:	9a 83       	std	Y+2, r25	; 0x02
    2d2c:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2d2e:	e0 e4       	ldi	r30, 0x40	; 64
    2d30:	f0 e0       	ldi	r31, 0x00	; 0
    2d32:	89 81       	ldd	r24, Y+1	; 0x01
    2d34:	9a 81       	ldd	r25, Y+2	; 0x02
    2d36:	89 2f       	mov	r24, r25
    2d38:	99 27       	eor	r25, r25
    2d3a:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2d3c:	e9 e2       	ldi	r30, 0x29	; 41
    2d3e:	f0 e0       	ldi	r31, 0x00	; 0
    2d40:	89 81       	ldd	r24, Y+1	; 0x01
    2d42:	80 83       	st	Z, r24
}
    2d44:	0f 90       	pop	r0
    2d46:	0f 90       	pop	r0
    2d48:	0f 90       	pop	r0
    2d4a:	0f 90       	pop	r0
    2d4c:	cf 91       	pop	r28
    2d4e:	df 91       	pop	r29
    2d50:	08 95       	ret

00002d52 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2d52:	df 93       	push	r29
    2d54:	cf 93       	push	r28
    2d56:	0f 92       	push	r0
    2d58:	cd b7       	in	r28, 0x3d	; 61
    2d5a:	de b7       	in	r29, 0x3e	; 62
    2d5c:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2d5e:	eb e2       	ldi	r30, 0x2B	; 43
    2d60:	f0 e0       	ldi	r31, 0x00	; 0
    2d62:	80 81       	ld	r24, Z
    2d64:	88 2f       	mov	r24, r24
    2d66:	90 e0       	ldi	r25, 0x00	; 0
    2d68:	80 72       	andi	r24, 0x20	; 32
    2d6a:	90 70       	andi	r25, 0x00	; 0
    2d6c:	00 97       	sbiw	r24, 0x00	; 0
    2d6e:	b9 f3       	breq	.-18     	; 0x2d5e <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2d70:	ec e2       	ldi	r30, 0x2C	; 44
    2d72:	f0 e0       	ldi	r31, 0x00	; 0
    2d74:	89 81       	ldd	r24, Y+1	; 0x01
    2d76:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2d78:	0f 90       	pop	r0
    2d7a:	cf 91       	pop	r28
    2d7c:	df 91       	pop	r29
    2d7e:	08 95       	ret

00002d80 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2d80:	df 93       	push	r29
    2d82:	cf 93       	push	r28
    2d84:	cd b7       	in	r28, 0x3d	; 61
    2d86:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2d88:	eb e2       	ldi	r30, 0x2B	; 43
    2d8a:	f0 e0       	ldi	r31, 0x00	; 0
    2d8c:	80 81       	ld	r24, Z
    2d8e:	88 23       	and	r24, r24
    2d90:	dc f7       	brge	.-10     	; 0x2d88 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2d92:	ec e2       	ldi	r30, 0x2C	; 44
    2d94:	f0 e0       	ldi	r31, 0x00	; 0
    2d96:	80 81       	ld	r24, Z
}
    2d98:	cf 91       	pop	r28
    2d9a:	df 91       	pop	r29
    2d9c:	08 95       	ret

00002d9e <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2d9e:	df 93       	push	r29
    2da0:	cf 93       	push	r28
    2da2:	00 d0       	rcall	.+0      	; 0x2da4 <UART_sendString+0x6>
    2da4:	0f 92       	push	r0
    2da6:	cd b7       	in	r28, 0x3d	; 61
    2da8:	de b7       	in	r29, 0x3e	; 62
    2daa:	9b 83       	std	Y+3, r25	; 0x03
    2dac:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2dae:	19 82       	std	Y+1, r1	; 0x01
    2db0:	0e c0       	rjmp	.+28     	; 0x2dce <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2db2:	89 81       	ldd	r24, Y+1	; 0x01
    2db4:	28 2f       	mov	r18, r24
    2db6:	30 e0       	ldi	r19, 0x00	; 0
    2db8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dba:	9b 81       	ldd	r25, Y+3	; 0x03
    2dbc:	fc 01       	movw	r30, r24
    2dbe:	e2 0f       	add	r30, r18
    2dc0:	f3 1f       	adc	r31, r19
    2dc2:	80 81       	ld	r24, Z
    2dc4:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <UART_sendByte>
		i++;
    2dc8:	89 81       	ldd	r24, Y+1	; 0x01
    2dca:	8f 5f       	subi	r24, 0xFF	; 255
    2dcc:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2dce:	89 81       	ldd	r24, Y+1	; 0x01
    2dd0:	28 2f       	mov	r18, r24
    2dd2:	30 e0       	ldi	r19, 0x00	; 0
    2dd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd6:	9b 81       	ldd	r25, Y+3	; 0x03
    2dd8:	fc 01       	movw	r30, r24
    2dda:	e2 0f       	add	r30, r18
    2ddc:	f3 1f       	adc	r31, r19
    2dde:	80 81       	ld	r24, Z
    2de0:	88 23       	and	r24, r24
    2de2:	39 f7       	brne	.-50     	; 0x2db2 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2de4:	0f 90       	pop	r0
    2de6:	0f 90       	pop	r0
    2de8:	0f 90       	pop	r0
    2dea:	cf 91       	pop	r28
    2dec:	df 91       	pop	r29
    2dee:	08 95       	ret

00002df0 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2df0:	0f 93       	push	r16
    2df2:	1f 93       	push	r17
    2df4:	df 93       	push	r29
    2df6:	cf 93       	push	r28
    2df8:	00 d0       	rcall	.+0      	; 0x2dfa <UART_receiveString+0xa>
    2dfa:	0f 92       	push	r0
    2dfc:	cd b7       	in	r28, 0x3d	; 61
    2dfe:	de b7       	in	r29, 0x3e	; 62
    2e00:	9b 83       	std	Y+3, r25	; 0x03
    2e02:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2e04:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2e06:	89 81       	ldd	r24, Y+1	; 0x01
    2e08:	28 2f       	mov	r18, r24
    2e0a:	30 e0       	ldi	r19, 0x00	; 0
    2e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e0e:	9b 81       	ldd	r25, Y+3	; 0x03
    2e10:	8c 01       	movw	r16, r24
    2e12:	02 0f       	add	r16, r18
    2e14:	13 1f       	adc	r17, r19
    2e16:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <UART_recieveByte>
    2e1a:	f8 01       	movw	r30, r16
    2e1c:	80 83       	st	Z, r24
    2e1e:	0f c0       	rjmp	.+30     	; 0x2e3e <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2e20:	89 81       	ldd	r24, Y+1	; 0x01
    2e22:	8f 5f       	subi	r24, 0xFF	; 255
    2e24:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2e26:	89 81       	ldd	r24, Y+1	; 0x01
    2e28:	28 2f       	mov	r18, r24
    2e2a:	30 e0       	ldi	r19, 0x00	; 0
    2e2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e2e:	9b 81       	ldd	r25, Y+3	; 0x03
    2e30:	8c 01       	movw	r16, r24
    2e32:	02 0f       	add	r16, r18
    2e34:	13 1f       	adc	r17, r19
    2e36:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <UART_recieveByte>
    2e3a:	f8 01       	movw	r30, r16
    2e3c:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2e3e:	89 81       	ldd	r24, Y+1	; 0x01
    2e40:	28 2f       	mov	r18, r24
    2e42:	30 e0       	ldi	r19, 0x00	; 0
    2e44:	8a 81       	ldd	r24, Y+2	; 0x02
    2e46:	9b 81       	ldd	r25, Y+3	; 0x03
    2e48:	fc 01       	movw	r30, r24
    2e4a:	e2 0f       	add	r30, r18
    2e4c:	f3 1f       	adc	r31, r19
    2e4e:	80 81       	ld	r24, Z
    2e50:	83 32       	cpi	r24, 0x23	; 35
    2e52:	31 f7       	brne	.-52     	; 0x2e20 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2e54:	89 81       	ldd	r24, Y+1	; 0x01
    2e56:	28 2f       	mov	r18, r24
    2e58:	30 e0       	ldi	r19, 0x00	; 0
    2e5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e5c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e5e:	fc 01       	movw	r30, r24
    2e60:	e2 0f       	add	r30, r18
    2e62:	f3 1f       	adc	r31, r19
    2e64:	10 82       	st	Z, r1
}
    2e66:	0f 90       	pop	r0
    2e68:	0f 90       	pop	r0
    2e6a:	0f 90       	pop	r0
    2e6c:	cf 91       	pop	r28
    2e6e:	df 91       	pop	r29
    2e70:	1f 91       	pop	r17
    2e72:	0f 91       	pop	r16
    2e74:	08 95       	ret

00002e76 <__udivmodsi4>:
    2e76:	a1 e2       	ldi	r26, 0x21	; 33
    2e78:	1a 2e       	mov	r1, r26
    2e7a:	aa 1b       	sub	r26, r26
    2e7c:	bb 1b       	sub	r27, r27
    2e7e:	fd 01       	movw	r30, r26
    2e80:	0d c0       	rjmp	.+26     	; 0x2e9c <__udivmodsi4_ep>

00002e82 <__udivmodsi4_loop>:
    2e82:	aa 1f       	adc	r26, r26
    2e84:	bb 1f       	adc	r27, r27
    2e86:	ee 1f       	adc	r30, r30
    2e88:	ff 1f       	adc	r31, r31
    2e8a:	a2 17       	cp	r26, r18
    2e8c:	b3 07       	cpc	r27, r19
    2e8e:	e4 07       	cpc	r30, r20
    2e90:	f5 07       	cpc	r31, r21
    2e92:	20 f0       	brcs	.+8      	; 0x2e9c <__udivmodsi4_ep>
    2e94:	a2 1b       	sub	r26, r18
    2e96:	b3 0b       	sbc	r27, r19
    2e98:	e4 0b       	sbc	r30, r20
    2e9a:	f5 0b       	sbc	r31, r21

00002e9c <__udivmodsi4_ep>:
    2e9c:	66 1f       	adc	r22, r22
    2e9e:	77 1f       	adc	r23, r23
    2ea0:	88 1f       	adc	r24, r24
    2ea2:	99 1f       	adc	r25, r25
    2ea4:	1a 94       	dec	r1
    2ea6:	69 f7       	brne	.-38     	; 0x2e82 <__udivmodsi4_loop>
    2ea8:	60 95       	com	r22
    2eaa:	70 95       	com	r23
    2eac:	80 95       	com	r24
    2eae:	90 95       	com	r25
    2eb0:	9b 01       	movw	r18, r22
    2eb2:	ac 01       	movw	r20, r24
    2eb4:	bd 01       	movw	r22, r26
    2eb6:	cf 01       	movw	r24, r30
    2eb8:	08 95       	ret

00002eba <__prologue_saves__>:
    2eba:	2f 92       	push	r2
    2ebc:	3f 92       	push	r3
    2ebe:	4f 92       	push	r4
    2ec0:	5f 92       	push	r5
    2ec2:	6f 92       	push	r6
    2ec4:	7f 92       	push	r7
    2ec6:	8f 92       	push	r8
    2ec8:	9f 92       	push	r9
    2eca:	af 92       	push	r10
    2ecc:	bf 92       	push	r11
    2ece:	cf 92       	push	r12
    2ed0:	df 92       	push	r13
    2ed2:	ef 92       	push	r14
    2ed4:	ff 92       	push	r15
    2ed6:	0f 93       	push	r16
    2ed8:	1f 93       	push	r17
    2eda:	cf 93       	push	r28
    2edc:	df 93       	push	r29
    2ede:	cd b7       	in	r28, 0x3d	; 61
    2ee0:	de b7       	in	r29, 0x3e	; 62
    2ee2:	ca 1b       	sub	r28, r26
    2ee4:	db 0b       	sbc	r29, r27
    2ee6:	0f b6       	in	r0, 0x3f	; 63
    2ee8:	f8 94       	cli
    2eea:	de bf       	out	0x3e, r29	; 62
    2eec:	0f be       	out	0x3f, r0	; 63
    2eee:	cd bf       	out	0x3d, r28	; 61
    2ef0:	09 94       	ijmp

00002ef2 <__epilogue_restores__>:
    2ef2:	2a 88       	ldd	r2, Y+18	; 0x12
    2ef4:	39 88       	ldd	r3, Y+17	; 0x11
    2ef6:	48 88       	ldd	r4, Y+16	; 0x10
    2ef8:	5f 84       	ldd	r5, Y+15	; 0x0f
    2efa:	6e 84       	ldd	r6, Y+14	; 0x0e
    2efc:	7d 84       	ldd	r7, Y+13	; 0x0d
    2efe:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f00:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f02:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f04:	b9 84       	ldd	r11, Y+9	; 0x09
    2f06:	c8 84       	ldd	r12, Y+8	; 0x08
    2f08:	df 80       	ldd	r13, Y+7	; 0x07
    2f0a:	ee 80       	ldd	r14, Y+6	; 0x06
    2f0c:	fd 80       	ldd	r15, Y+5	; 0x05
    2f0e:	0c 81       	ldd	r16, Y+4	; 0x04
    2f10:	1b 81       	ldd	r17, Y+3	; 0x03
    2f12:	aa 81       	ldd	r26, Y+2	; 0x02
    2f14:	b9 81       	ldd	r27, Y+1	; 0x01
    2f16:	ce 0f       	add	r28, r30
    2f18:	d1 1d       	adc	r29, r1
    2f1a:	0f b6       	in	r0, 0x3f	; 63
    2f1c:	f8 94       	cli
    2f1e:	de bf       	out	0x3e, r29	; 62
    2f20:	0f be       	out	0x3f, r0	; 63
    2f22:	cd bf       	out	0x3d, r28	; 61
    2f24:	ed 01       	movw	r28, r26
    2f26:	08 95       	ret

00002f28 <itoa>:
    2f28:	fb 01       	movw	r30, r22
    2f2a:	9f 01       	movw	r18, r30
    2f2c:	e8 94       	clt
    2f2e:	42 30       	cpi	r20, 0x02	; 2
    2f30:	c4 f0       	brlt	.+48     	; 0x2f62 <itoa+0x3a>
    2f32:	45 32       	cpi	r20, 0x25	; 37
    2f34:	b4 f4       	brge	.+44     	; 0x2f62 <itoa+0x3a>
    2f36:	4a 30       	cpi	r20, 0x0A	; 10
    2f38:	29 f4       	brne	.+10     	; 0x2f44 <itoa+0x1c>
    2f3a:	97 fb       	bst	r25, 7
    2f3c:	1e f4       	brtc	.+6      	; 0x2f44 <itoa+0x1c>
    2f3e:	90 95       	com	r25
    2f40:	81 95       	neg	r24
    2f42:	9f 4f       	sbci	r25, 0xFF	; 255
    2f44:	64 2f       	mov	r22, r20
    2f46:	77 27       	eor	r23, r23
    2f48:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <__udivmodhi4>
    2f4c:	80 5d       	subi	r24, 0xD0	; 208
    2f4e:	8a 33       	cpi	r24, 0x3A	; 58
    2f50:	0c f0       	brlt	.+2      	; 0x2f54 <itoa+0x2c>
    2f52:	89 5d       	subi	r24, 0xD9	; 217
    2f54:	81 93       	st	Z+, r24
    2f56:	cb 01       	movw	r24, r22
    2f58:	00 97       	sbiw	r24, 0x00	; 0
    2f5a:	a1 f7       	brne	.-24     	; 0x2f44 <itoa+0x1c>
    2f5c:	16 f4       	brtc	.+4      	; 0x2f62 <itoa+0x3a>
    2f5e:	5d e2       	ldi	r21, 0x2D	; 45
    2f60:	51 93       	st	Z+, r21
    2f62:	10 82       	st	Z, r1
    2f64:	c9 01       	movw	r24, r18
    2f66:	0c 94 b5 17 	jmp	0x2f6a	; 0x2f6a <strrev>

00002f6a <strrev>:
    2f6a:	dc 01       	movw	r26, r24
    2f6c:	fc 01       	movw	r30, r24
    2f6e:	67 2f       	mov	r22, r23
    2f70:	71 91       	ld	r23, Z+
    2f72:	77 23       	and	r23, r23
    2f74:	e1 f7       	brne	.-8      	; 0x2f6e <strrev+0x4>
    2f76:	32 97       	sbiw	r30, 0x02	; 2
    2f78:	04 c0       	rjmp	.+8      	; 0x2f82 <strrev+0x18>
    2f7a:	7c 91       	ld	r23, X
    2f7c:	6d 93       	st	X+, r22
    2f7e:	70 83       	st	Z, r23
    2f80:	62 91       	ld	r22, -Z
    2f82:	ae 17       	cp	r26, r30
    2f84:	bf 07       	cpc	r27, r31
    2f86:	c8 f3       	brcs	.-14     	; 0x2f7a <strrev+0x10>
    2f88:	08 95       	ret

00002f8a <__udivmodhi4>:
    2f8a:	aa 1b       	sub	r26, r26
    2f8c:	bb 1b       	sub	r27, r27
    2f8e:	51 e1       	ldi	r21, 0x11	; 17
    2f90:	07 c0       	rjmp	.+14     	; 0x2fa0 <__udivmodhi4_ep>

00002f92 <__udivmodhi4_loop>:
    2f92:	aa 1f       	adc	r26, r26
    2f94:	bb 1f       	adc	r27, r27
    2f96:	a6 17       	cp	r26, r22
    2f98:	b7 07       	cpc	r27, r23
    2f9a:	10 f0       	brcs	.+4      	; 0x2fa0 <__udivmodhi4_ep>
    2f9c:	a6 1b       	sub	r26, r22
    2f9e:	b7 0b       	sbc	r27, r23

00002fa0 <__udivmodhi4_ep>:
    2fa0:	88 1f       	adc	r24, r24
    2fa2:	99 1f       	adc	r25, r25
    2fa4:	5a 95       	dec	r21
    2fa6:	a9 f7       	brne	.-22     	; 0x2f92 <__udivmodhi4_loop>
    2fa8:	80 95       	com	r24
    2faa:	90 95       	com	r25
    2fac:	bc 01       	movw	r22, r24
    2fae:	cd 01       	movw	r24, r26
    2fb0:	08 95       	ret

00002fb2 <_exit>:
    2fb2:	f8 94       	cli

00002fb4 <__stop_program>:
    2fb4:	ff cf       	rjmp	.-2      	; 0x2fb4 <__stop_program>
